
LoRa_Project_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005960  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08005a18  08005a18  00006a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c14  08005c14  0000706c  2**0
                  CONTENTS
  4 .ARM          00000000  08005c14  08005c14  0000706c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c14  08005c14  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c14  08005c14  00006c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c18  08005c18  00006c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005c1c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  2000006c  08005c88  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08005c88  00007338  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001109f  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267a  00000000  00000000  00018133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  0001a7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7a  00000000  00000000  0001b550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d44  00000000  00000000  0001bfca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010774  00000000  00000000  00032d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bc83  00000000  00000000  00043482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf105  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003954  00000000  00000000  000cf148  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d2a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000006c 	.word	0x2000006c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08005a00 	.word	0x08005a00

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000070 	.word	0x20000070
 80000fc:	08005a00 	.word	0x08005a00

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000406:	f000 fd8d 	bl	8000f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040a:	f000 f861 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800040e:	f000 f945 	bl	800069c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000412:	f000 f8f5 	bl	8000600 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000416:	f000 f8b5 	bl	8000584 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /****************************LoRa Module Initialization *******************************/
     printf("Slave APPLICATION\n\r");
 800041a:	4b26      	ldr	r3, [pc, #152]	@ (80004b4 <main+0xb4>)
 800041c:	0018      	movs	r0, r3
 800041e:	f004 fa6d 	bl	80048fc <iprintf>
     init_LoRa_parm();
 8000422:	f000 fa07 	bl	8000834 <init_LoRa_parm>
     sx126x_clear_device_errors( &LoRa);
 8000426:	4b24      	ldr	r3, [pc, #144]	@ (80004b8 <main+0xb8>)
 8000428:	0018      	movs	r0, r3
 800042a:	f003 ff21 	bl	8004270 <sx126x_clear_device_errors>
     sx126x_init(&LoRa );
 800042e:	4b22      	ldr	r3, [pc, #136]	@ (80004b8 <main+0xb8>)
 8000430:	0018      	movs	r0, r3
 8000432:	f003 f923 	bl	800367c <sx126x_init>

     Radio_init(&LoRa);
 8000436:	4b20      	ldr	r3, [pc, #128]	@ (80004b8 <main+0xb8>)
 8000438:	0018      	movs	r0, r3
 800043a:	f003 f997 	bl	800376c <Radio_init>
     sx126x_clear_irq_status( &LoRa, SX126X_IRQ_ALL );
 800043e:	4a1f      	ldr	r2, [pc, #124]	@ (80004bc <main+0xbc>)
 8000440:	4b1d      	ldr	r3, [pc, #116]	@ (80004b8 <main+0xb8>)
 8000442:	0011      	movs	r1, r2
 8000444:	0018      	movs	r0, r3
 8000446:	f003 fc3b 	bl	8003cc0 <sx126x_clear_irq_status>
     sx126x_set_dio_irq_params(
 800044a:	491c      	ldr	r1, [pc, #112]	@ (80004bc <main+0xbc>)
 800044c:	481a      	ldr	r0, [pc, #104]	@ (80004b8 <main+0xb8>)
 800044e:	2300      	movs	r3, #0
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	2300      	movs	r3, #0
 8000454:	2203      	movs	r2, #3
 8000456:	f003 fbb1 	bl	8003bbc <sx126x_set_dio_irq_params>
   		  &LoRa, SX126X_IRQ_ALL,
             SX126X_IRQ_TX_DONE | SX126X_IRQ_RX_DONE,
             SX126X_IRQ_NONE, SX126X_IRQ_NONE );

         sx126x_clear_irq_status( &LoRa, SX126X_IRQ_ALL );
 800045a:	4a18      	ldr	r2, [pc, #96]	@ (80004bc <main+0xbc>)
 800045c:	4b16      	ldr	r3, [pc, #88]	@ (80004b8 <main+0xb8>)
 800045e:	0011      	movs	r1, r2
 8000460:	0018      	movs	r0, r3
 8000462:	f003 fc2d 	bl	8003cc0 <sx126x_clear_irq_status>
     /****************************LoRa Module Initialization END *******************************/
         sx126x_get_pkt_type( &LoRa, &pkt_type );
 8000466:	4a16      	ldr	r2, [pc, #88]	@ (80004c0 <main+0xc0>)
 8000468:	4b13      	ldr	r3, [pc, #76]	@ (80004b8 <main+0xb8>)
 800046a:	0011      	movs	r1, r2
 800046c:	0018      	movs	r0, r3
 800046e:	f003 fd29 	bl	8003ec4 <sx126x_get_pkt_type>
         sx126x_get_status( &LoRa, &radio_status );
 8000472:	4a14      	ldr	r2, [pc, #80]	@ (80004c4 <main+0xc4>)
 8000474:	4b10      	ldr	r3, [pc, #64]	@ (80004b8 <main+0xb8>)
 8000476:	0011      	movs	r1, r2
 8000478:	0018      	movs	r0, r3
 800047a:	f003 fe15 	bl	80040a8 <sx126x_get_status>
         sx126x_get_lora_stats( &LoRa, &stats );
 800047e:	4a12      	ldr	r2, [pc, #72]	@ (80004c8 <main+0xc8>)
 8000480:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <main+0xb8>)
 8000482:	0011      	movs	r1, r2
 8000484:	0018      	movs	r0, r3
 8000486:	f003 fe73 	bl	8004170 <sx126x_get_lora_stats>
         sx126x_get_device_errors( &LoRa, &errors);
 800048a:	4a10      	ldr	r2, [pc, #64]	@ (80004cc <main+0xcc>)
 800048c:	4b0a      	ldr	r3, [pc, #40]	@ (80004b8 <main+0xb8>)
 800048e:	0011      	movs	r1, r2
 8000490:	0018      	movs	r0, r3
 8000492:	f003 febf 	bl	8004214 <sx126x_get_device_errors>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  apps_common_sx126x_irq_process(&LoRa);
 8000496:	4b08      	ldr	r3, [pc, #32]	@ (80004b8 <main+0xb8>)
 8000498:	0018      	movs	r0, r3
 800049a:	f000 fa41 	bl	8000920 <apps_common_sx126x_irq_process>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800049e:	23a0      	movs	r3, #160	@ 0xa0
 80004a0:	05db      	lsls	r3, r3, #23
 80004a2:	2120      	movs	r1, #32
 80004a4:	0018      	movs	r0, r3
 80004a6:	f001 f863 	bl	8001570 <HAL_GPIO_TogglePin>
	  	  HAL_Delay(250);
 80004aa:	20fa      	movs	r0, #250	@ 0xfa
 80004ac:	f000 fdc0 	bl	8001030 <HAL_Delay>
  {
 80004b0:	46c0      	nop			@ (mov r8, r8)
 80004b2:	e7f0      	b.n	8000496 <main+0x96>
 80004b4:	08005a18 	.word	0x08005a18
 80004b8:	20000088 	.word	0x20000088
 80004bc:	000043ff 	.word	0x000043ff
 80004c0:	200000c4 	.word	0x200000c4
 80004c4:	200000c8 	.word	0x200000c8
 80004c8:	200000cc 	.word	0x200000cc
 80004cc:	200000d2 	.word	0x200000d2

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	b093      	sub	sp, #76	@ 0x4c
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	2414      	movs	r4, #20
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	0018      	movs	r0, r3
 80004dc:	2334      	movs	r3, #52	@ 0x34
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f004 fa9b 	bl	8004a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	0018      	movs	r0, r3
 80004ea:	2310      	movs	r3, #16
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f004 fa94 	bl	8004a1c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004f4:	2380      	movs	r3, #128	@ 0x80
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	0018      	movs	r0, r3
 80004fa:	f001 f889 	bl	8001610 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2202      	movs	r2, #2
 8000502:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000504:	193b      	adds	r3, r7, r4
 8000506:	2280      	movs	r2, #128	@ 0x80
 8000508:	0052      	lsls	r2, r2, #1
 800050a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800050c:	0021      	movs	r1, r4
 800050e:	187b      	adds	r3, r7, r1
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2240      	movs	r2, #64	@ 0x40
 8000518:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2202      	movs	r2, #2
 800051e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2202      	movs	r2, #2
 8000524:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2200      	movs	r2, #0
 800052a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2208      	movs	r2, #8
 8000530:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2280      	movs	r2, #128	@ 0x80
 8000536:	0292      	lsls	r2, r2, #10
 8000538:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2280      	movs	r2, #128	@ 0x80
 800053e:	0592      	lsls	r2, r2, #22
 8000540:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000542:	187b      	adds	r3, r7, r1
 8000544:	0018      	movs	r0, r3
 8000546:	f001 f8af 	bl	80016a8 <HAL_RCC_OscConfig>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800054e:	f000 fb19 	bl	8000b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2207      	movs	r2, #7
 8000556:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2202      	movs	r2, #2
 800055c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2102      	movs	r1, #2
 800056e:	0018      	movs	r0, r3
 8000570:	f001 fbaa 	bl	8001cc8 <HAL_RCC_ClockConfig>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000578:	f000 fb04 	bl	8000b84 <Error_Handler>
  }
}
 800057c:	46c0      	nop			@ (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	b013      	add	sp, #76	@ 0x4c
 8000582:	bd90      	pop	{r4, r7, pc}

08000584 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000588:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <MX_SPI2_Init+0x74>)
 800058a:	4a1c      	ldr	r2, [pc, #112]	@ (80005fc <MX_SPI2_Init+0x78>)
 800058c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800058e:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <MX_SPI2_Init+0x74>)
 8000590:	2282      	movs	r2, #130	@ 0x82
 8000592:	0052      	lsls	r2, r2, #1
 8000594:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000596:	4b18      	ldr	r3, [pc, #96]	@ (80005f8 <MX_SPI2_Init+0x74>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800059c:	4b16      	ldr	r3, [pc, #88]	@ (80005f8 <MX_SPI2_Init+0x74>)
 800059e:	22e0      	movs	r2, #224	@ 0xe0
 80005a0:	00d2      	lsls	r2, r2, #3
 80005a2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005a4:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <MX_SPI2_Init+0x74>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005aa:	4b13      	ldr	r3, [pc, #76]	@ (80005f8 <MX_SPI2_Init+0x74>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005b0:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <MX_SPI2_Init+0x74>)
 80005b2:	2280      	movs	r2, #128	@ 0x80
 80005b4:	0092      	lsls	r2, r2, #2
 80005b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <MX_SPI2_Init+0x74>)
 80005ba:	2210      	movs	r2, #16
 80005bc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005be:	4b0e      	ldr	r3, [pc, #56]	@ (80005f8 <MX_SPI2_Init+0x74>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <MX_SPI2_Init+0x74>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005ca:	4b0b      	ldr	r3, [pc, #44]	@ (80005f8 <MX_SPI2_Init+0x74>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80005d0:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <MX_SPI2_Init+0x74>)
 80005d2:	2207      	movs	r2, #7
 80005d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005d6:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <MX_SPI2_Init+0x74>)
 80005d8:	2200      	movs	r2, #0
 80005da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005dc:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <MX_SPI2_Init+0x74>)
 80005de:	2208      	movs	r2, #8
 80005e0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80005e2:	4b05      	ldr	r3, [pc, #20]	@ (80005f8 <MX_SPI2_Init+0x74>)
 80005e4:	0018      	movs	r0, r3
 80005e6:	f001 fe4d 	bl	8002284 <HAL_SPI_Init>
 80005ea:	1e03      	subs	r3, r0, #0
 80005ec:	d001      	beq.n	80005f2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80005ee:	f000 fac9 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	200000d4 	.word	0x200000d4
 80005fc:	40003800 	.word	0x40003800

08000600 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000604:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <MX_USART2_UART_Init+0x94>)
 8000606:	4a24      	ldr	r2, [pc, #144]	@ (8000698 <MX_USART2_UART_Init+0x98>)
 8000608:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800060a:	4b22      	ldr	r3, [pc, #136]	@ (8000694 <MX_USART2_UART_Init+0x94>)
 800060c:	22e1      	movs	r2, #225	@ 0xe1
 800060e:	0252      	lsls	r2, r2, #9
 8000610:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000612:	4b20      	ldr	r3, [pc, #128]	@ (8000694 <MX_USART2_UART_Init+0x94>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b1e      	ldr	r3, [pc, #120]	@ (8000694 <MX_USART2_UART_Init+0x94>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061e:	4b1d      	ldr	r3, [pc, #116]	@ (8000694 <MX_USART2_UART_Init+0x94>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000624:	4b1b      	ldr	r3, [pc, #108]	@ (8000694 <MX_USART2_UART_Init+0x94>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062a:	4b1a      	ldr	r3, [pc, #104]	@ (8000694 <MX_USART2_UART_Init+0x94>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000630:	4b18      	ldr	r3, [pc, #96]	@ (8000694 <MX_USART2_UART_Init+0x94>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000636:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <MX_USART2_UART_Init+0x94>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800063c:	4b15      	ldr	r3, [pc, #84]	@ (8000694 <MX_USART2_UART_Init+0x94>)
 800063e:	2200      	movs	r2, #0
 8000640:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <MX_USART2_UART_Init+0x94>)
 8000644:	2200      	movs	r2, #0
 8000646:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000648:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <MX_USART2_UART_Init+0x94>)
 800064a:	0018      	movs	r0, r3
 800064c:	f002 fa2a 	bl	8002aa4 <HAL_UART_Init>
 8000650:	1e03      	subs	r3, r0, #0
 8000652:	d001      	beq.n	8000658 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000654:	f000 fa96 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000658:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_USART2_UART_Init+0x94>)
 800065a:	2100      	movs	r1, #0
 800065c:	0018      	movs	r0, r3
 800065e:	f002 ff2d 	bl	80034bc <HAL_UARTEx_SetTxFifoThreshold>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000666:	f000 fa8d 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800066a:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <MX_USART2_UART_Init+0x94>)
 800066c:	2100      	movs	r1, #0
 800066e:	0018      	movs	r0, r3
 8000670:	f002 ff64 	bl	800353c <HAL_UARTEx_SetRxFifoThreshold>
 8000674:	1e03      	subs	r3, r0, #0
 8000676:	d001      	beq.n	800067c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000678:	f000 fa84 	bl	8000b84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800067c:	4b05      	ldr	r3, [pc, #20]	@ (8000694 <MX_USART2_UART_Init+0x94>)
 800067e:	0018      	movs	r0, r3
 8000680:	f002 fee2 	bl	8003448 <HAL_UARTEx_DisableFifoMode>
 8000684:	1e03      	subs	r3, r0, #0
 8000686:	d001      	beq.n	800068c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000688:	f000 fa7c 	bl	8000b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068c:	46c0      	nop			@ (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			@ (mov r8, r8)
 8000694:	20000138 	.word	0x20000138
 8000698:	40004400 	.word	0x40004400

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b08b      	sub	sp, #44	@ 0x2c
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	2414      	movs	r4, #20
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	0018      	movs	r0, r3
 80006a8:	2314      	movs	r3, #20
 80006aa:	001a      	movs	r2, r3
 80006ac:	2100      	movs	r1, #0
 80006ae:	f004 f9b5 	bl	8004a1c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	4b5d      	ldr	r3, [pc, #372]	@ (8000828 <MX_GPIO_Init+0x18c>)
 80006b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006b6:	4b5c      	ldr	r3, [pc, #368]	@ (8000828 <MX_GPIO_Init+0x18c>)
 80006b8:	2104      	movs	r1, #4
 80006ba:	430a      	orrs	r2, r1
 80006bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80006be:	4b5a      	ldr	r3, [pc, #360]	@ (8000828 <MX_GPIO_Init+0x18c>)
 80006c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006c2:	2204      	movs	r2, #4
 80006c4:	4013      	ands	r3, r2
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ca:	4b57      	ldr	r3, [pc, #348]	@ (8000828 <MX_GPIO_Init+0x18c>)
 80006cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ce:	4b56      	ldr	r3, [pc, #344]	@ (8000828 <MX_GPIO_Init+0x18c>)
 80006d0:	2120      	movs	r1, #32
 80006d2:	430a      	orrs	r2, r1
 80006d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80006d6:	4b54      	ldr	r3, [pc, #336]	@ (8000828 <MX_GPIO_Init+0x18c>)
 80006d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006da:	2220      	movs	r2, #32
 80006dc:	4013      	ands	r3, r2
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b51      	ldr	r3, [pc, #324]	@ (8000828 <MX_GPIO_Init+0x18c>)
 80006e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006e6:	4b50      	ldr	r3, [pc, #320]	@ (8000828 <MX_GPIO_Init+0x18c>)
 80006e8:	2101      	movs	r1, #1
 80006ea:	430a      	orrs	r2, r1
 80006ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ee:	4b4e      	ldr	r3, [pc, #312]	@ (8000828 <MX_GPIO_Init+0x18c>)
 80006f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006f2:	2201      	movs	r2, #1
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b4b      	ldr	r3, [pc, #300]	@ (8000828 <MX_GPIO_Init+0x18c>)
 80006fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006fe:	4b4a      	ldr	r3, [pc, #296]	@ (8000828 <MX_GPIO_Init+0x18c>)
 8000700:	2102      	movs	r1, #2
 8000702:	430a      	orrs	r2, r1
 8000704:	635a      	str	r2, [r3, #52]	@ 0x34
 8000706:	4b48      	ldr	r3, [pc, #288]	@ (8000828 <MX_GPIO_Init+0x18c>)
 8000708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800070a:	2202      	movs	r2, #2
 800070c:	4013      	ands	r3, r2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000712:	23a0      	movs	r3, #160	@ 0xa0
 8000714:	05db      	lsls	r3, r3, #23
 8000716:	2200      	movs	r2, #0
 8000718:	2120      	movs	r1, #32
 800071a:	0018      	movs	r0, r3
 800071c:	f000 ff0b 	bl	8001536 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8000720:	4b42      	ldr	r3, [pc, #264]	@ (800082c <MX_GPIO_Init+0x190>)
 8000722:	2201      	movs	r2, #1
 8000724:	2101      	movs	r1, #1
 8000726:	0018      	movs	r0, r3
 8000728:	f000 ff05 	bl	8001536 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 800072c:	4b40      	ldr	r3, [pc, #256]	@ (8000830 <MX_GPIO_Init+0x194>)
 800072e:	2201      	movs	r2, #1
 8000730:	2180      	movs	r1, #128	@ 0x80
 8000732:	0018      	movs	r0, r3
 8000734:	f000 feff 	bl	8001536 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2280      	movs	r2, #128	@ 0x80
 800073c:	0192      	lsls	r2, r2, #6
 800073e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000740:	193b      	adds	r3, r7, r4
 8000742:	2288      	movs	r2, #136	@ 0x88
 8000744:	0352      	lsls	r2, r2, #13
 8000746:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800074e:	193b      	adds	r3, r7, r4
 8000750:	4a37      	ldr	r2, [pc, #220]	@ (8000830 <MX_GPIO_Init+0x194>)
 8000752:	0019      	movs	r1, r3
 8000754:	0010      	movs	r0, r2
 8000756:	f000 fd6d 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2220      	movs	r2, #32
 800075e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2201      	movs	r2, #1
 8000764:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	193b      	adds	r3, r7, r4
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2202      	movs	r2, #2
 8000770:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000772:	193a      	adds	r2, r7, r4
 8000774:	23a0      	movs	r3, #160	@ 0xa0
 8000776:	05db      	lsls	r3, r3, #23
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f000 fd5a 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2201      	movs	r2, #1
 8000784:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2201      	movs	r2, #1
 800078a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8000798:	193b      	adds	r3, r7, r4
 800079a:	4a24      	ldr	r2, [pc, #144]	@ (800082c <MX_GPIO_Init+0x190>)
 800079c:	0019      	movs	r1, r3
 800079e:	0010      	movs	r0, r2
 80007a0:	f000 fd48 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	2280      	movs	r2, #128	@ 0x80
 80007a8:	0052      	lsls	r2, r2, #1
 80007aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2200      	movs	r2, #0
 80007b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 80007b8:	193a      	adds	r2, r7, r4
 80007ba:	23a0      	movs	r3, #160	@ 0xa0
 80007bc:	05db      	lsls	r3, r3, #23
 80007be:	0011      	movs	r1, r2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fd37 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO1_Pin */
  GPIO_InitStruct.Pin = DIO1_Pin;
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	2280      	movs	r2, #128	@ 0x80
 80007ca:	0092      	lsls	r2, r2, #2
 80007cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	2288      	movs	r2, #136	@ 0x88
 80007d2:	0352      	lsls	r2, r2, #13
 80007d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIO1_GPIO_Port, &GPIO_InitStruct);
 80007dc:	193a      	adds	r2, r7, r4
 80007de:	23a0      	movs	r3, #160	@ 0xa0
 80007e0:	05db      	lsls	r3, r3, #23
 80007e2:	0011      	movs	r1, r2
 80007e4:	0018      	movs	r0, r3
 80007e6:	f000 fd25 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 80007ea:	0021      	movs	r1, r4
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2280      	movs	r2, #128	@ 0x80
 80007f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2201      	movs	r2, #1
 80007f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000804:	187b      	adds	r3, r7, r1
 8000806:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <MX_GPIO_Init+0x194>)
 8000808:	0019      	movs	r1, r3
 800080a:	0010      	movs	r0, r2
 800080c:	f000 fd12 	bl	8001234 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000810:	2200      	movs	r2, #0
 8000812:	2100      	movs	r1, #0
 8000814:	2007      	movs	r0, #7
 8000816:	f000 fcdb 	bl	80011d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800081a:	2007      	movs	r0, #7
 800081c:	f000 fced 	bl	80011fa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000820:	46c0      	nop			@ (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b00b      	add	sp, #44	@ 0x2c
 8000826:	bd90      	pop	{r4, r7, pc}
 8000828:	40021000 	.word	0x40021000
 800082c:	50000400 	.word	0x50000400
 8000830:	50000800 	.word	0x50000800

08000834 <init_LoRa_parm>:

/* USER CODE BEGIN 4 */
void init_LoRa_parm(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	txdata[0] = 'S';
 8000838:	4b18      	ldr	r3, [pc, #96]	@ (800089c <init_LoRa_parm+0x68>)
 800083a:	2253      	movs	r2, #83	@ 0x53
 800083c:	701a      	strb	r2, [r3, #0]
	txdata[1] = 'L';
 800083e:	4b17      	ldr	r3, [pc, #92]	@ (800089c <init_LoRa_parm+0x68>)
 8000840:	224c      	movs	r2, #76	@ 0x4c
 8000842:	705a      	strb	r2, [r3, #1]
	txdata[2] = 'o';
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <init_LoRa_parm+0x68>)
 8000846:	226f      	movs	r2, #111	@ 0x6f
 8000848:	709a      	strb	r2, [r3, #2]
	txdata[3] = 'R';
 800084a:	4b14      	ldr	r3, [pc, #80]	@ (800089c <init_LoRa_parm+0x68>)
 800084c:	2252      	movs	r2, #82	@ 0x52
 800084e:	70da      	strb	r2, [r3, #3]
	txdata[4] = 'a';
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <init_LoRa_parm+0x68>)
 8000852:	2261      	movs	r2, #97	@ 0x61
 8000854:	711a      	strb	r2, [r3, #4]

	LoRa.BUSY_port = BUSY_GPIO_Port;
 8000856:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <init_LoRa_parm+0x6c>)
 8000858:	22a0      	movs	r2, #160	@ 0xa0
 800085a:	05d2      	lsls	r2, r2, #23
 800085c:	619a      	str	r2, [r3, #24]
	LoRa.BUSY_pin  = BUSY_Pin;
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <init_LoRa_parm+0x6c>)
 8000860:	2280      	movs	r2, #128	@ 0x80
 8000862:	0052      	lsls	r2, r2, #1
 8000864:	839a      	strh	r2, [r3, #28]
	LoRa.NSS_port  = NSS_GPIO_Port;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <init_LoRa_parm+0x6c>)
 8000868:	4a0e      	ldr	r2, [pc, #56]	@ (80008a4 <init_LoRa_parm+0x70>)
 800086a:	601a      	str	r2, [r3, #0]
	LoRa.NSS_pin   = NSS_Pin;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <init_LoRa_parm+0x6c>)
 800086e:	2280      	movs	r2, #128	@ 0x80
 8000870:	809a      	strh	r2, [r3, #4]
	LoRa.RST_port  = RST_GPIO_Port;
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <init_LoRa_parm+0x6c>)
 8000874:	4a0c      	ldr	r2, [pc, #48]	@ (80008a8 <init_LoRa_parm+0x74>)
 8000876:	609a      	str	r2, [r3, #8]
	LoRa.RST_pin   = RST_Pin;
 8000878:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <init_LoRa_parm+0x6c>)
 800087a:	2201      	movs	r2, #1
 800087c:	819a      	strh	r2, [r3, #12]
	LoRa.DIO1_port = DIO1_GPIO_Port;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <init_LoRa_parm+0x6c>)
 8000880:	22a0      	movs	r2, #160	@ 0xa0
 8000882:	05d2      	lsls	r2, r2, #23
 8000884:	611a      	str	r2, [r3, #16]
	LoRa.DIO1_pin  = DIO1_Pin;
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <init_LoRa_parm+0x6c>)
 8000888:	2280      	movs	r2, #128	@ 0x80
 800088a:	0092      	lsls	r2, r2, #2
 800088c:	829a      	strh	r2, [r3, #20]

	LoRa.hSPIx     = &hspi2;
 800088e:	4b04      	ldr	r3, [pc, #16]	@ (80008a0 <init_LoRa_parm+0x6c>)
 8000890:	4a06      	ldr	r2, [pc, #24]	@ (80008ac <init_LoRa_parm+0x78>)
 8000892:	621a      	str	r2, [r3, #32]
}
 8000894:	46c0      	nop			@ (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	200000ac 	.word	0x200000ac
 80008a0:	20000088 	.word	0x20000088
 80008a4:	50000800 	.word	0x50000800
 80008a8:	50000400 	.word	0x50000400
 80008ac:	200000d4 	.word	0x200000d4

080008b0 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	0002      	movs	r2, r0
 80008b8:	1dbb      	adds	r3, r7, #6
 80008ba:	801a      	strh	r2, [r3, #0]
       if(GPIO_Pin == LoRa.DIO1_pin)
 80008bc:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <HAL_GPIO_EXTI_Rising_Callback+0x38>)
 80008be:	8a9b      	ldrh	r3, [r3, #20]
 80008c0:	1dba      	adds	r2, r7, #6
 80008c2:	8812      	ldrh	r2, [r2, #0]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d102      	bne.n	80008ce <HAL_GPIO_EXTI_Rising_Callback+0x1e>
       {
           irq_fired = true;
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <HAL_GPIO_EXTI_Rising_Callback+0x3c>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
       }
       if(GPIO_Pin == BTN_Pin)
 80008ce:	1dbb      	adds	r3, r7, #6
 80008d0:	881a      	ldrh	r2, [r3, #0]
 80008d2:	2380      	movs	r3, #128	@ 0x80
 80008d4:	019b      	lsls	r3, r3, #6
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d102      	bne.n	80008e0 <HAL_GPIO_EXTI_Rising_Callback+0x30>
       {
           btn_pressed = true;
 80008da:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 80008dc:	2201      	movs	r2, #1
 80008de:	701a      	strb	r2, [r3, #0]
       }
   }
 80008e0:	46c0      	nop			@ (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b002      	add	sp, #8
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000088 	.word	0x20000088
 80008ec:	200000c2 	.word	0x200000c2
 80008f0:	200000c3 	.word	0x200000c3

080008f4 <_write>:

int _write(int file, char *ptr, int len)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	60f8      	str	r0, [r7, #12]
 80008fc:	60b9      	str	r1, [r7, #8]
 80008fe:	607a      	str	r2, [r7, #4]
  (void)file;
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	b29a      	uxth	r2, r3
 8000904:	2301      	movs	r3, #1
 8000906:	425b      	negs	r3, r3
 8000908:	68b9      	ldr	r1, [r7, #8]
 800090a:	4804      	ldr	r0, [pc, #16]	@ (800091c <_write+0x28>)
 800090c:	f002 f920 	bl	8002b50 <HAL_UART_Transmit>
  return len;
 8000910:	687b      	ldr	r3, [r7, #4]
}
 8000912:	0018      	movs	r0, r3
 8000914:	46bd      	mov	sp, r7
 8000916:	b004      	add	sp, #16
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	20000138 	.word	0x20000138

08000920 <apps_common_sx126x_irq_process>:
void apps_common_sx126x_irq_process( const void* context )
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
    if( irq_fired == true )
 8000928:	4b51      	ldr	r3, [pc, #324]	@ (8000a70 <apps_common_sx126x_irq_process+0x150>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2b00      	cmp	r3, #0
 8000930:	d100      	bne.n	8000934 <apps_common_sx126x_irq_process+0x14>
 8000932:	e08e      	b.n	8000a52 <apps_common_sx126x_irq_process+0x132>
    {
        irq_fired = false;
 8000934:	4b4e      	ldr	r3, [pc, #312]	@ (8000a70 <apps_common_sx126x_irq_process+0x150>)
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]

        sx126x_irq_mask_t irq_regs;
        sx126x_get_and_clear_irq_status( context, &irq_regs );
 800093a:	240e      	movs	r4, #14
 800093c:	193a      	adds	r2, r7, r4
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f003 f9e0 	bl	8003d08 <sx126x_get_and_clear_irq_status>

        if( ( irq_regs & SX126X_IRQ_TX_DONE ) == SX126X_IRQ_TX_DONE )
 8000948:	193b      	adds	r3, r7, r4
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	001a      	movs	r2, r3
 800094e:	2301      	movs	r3, #1
 8000950:	4013      	ands	r3, r2
 8000952:	d003      	beq.n	800095c <apps_common_sx126x_irq_process+0x3c>
        {
            printf( "Tx done\n\r" );
 8000954:	4b47      	ldr	r3, [pc, #284]	@ (8000a74 <apps_common_sx126x_irq_process+0x154>)
 8000956:	0018      	movs	r0, r3
 8000958:	f003 ffd0 	bl	80048fc <iprintf>
            //on_tx_done( );
        }

        if( ( irq_regs & SX126X_IRQ_RX_DONE ) == SX126X_IRQ_RX_DONE )
 800095c:	230e      	movs	r3, #14
 800095e:	18fb      	adds	r3, r7, r3
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	001a      	movs	r2, r3
 8000964:	2302      	movs	r3, #2
 8000966:	4013      	ands	r3, r2
 8000968:	d009      	beq.n	800097e <apps_common_sx126x_irq_process+0x5e>
        {
        	printf( "Rx done\n\r" );
 800096a:	4b43      	ldr	r3, [pc, #268]	@ (8000a78 <apps_common_sx126x_irq_process+0x158>)
 800096c:	0018      	movs	r0, r3
 800096e:	f003 ffc5 	bl	80048fc <iprintf>
            sx126x_handle_rx_done( context );
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	0018      	movs	r0, r3
 8000976:	f003 fccb 	bl	8004310 <sx126x_handle_rx_done>
            on_rx_done( );
 800097a:	f000 f895 	bl	8000aa8 <on_rx_done>

        }

        if( ( irq_regs & SX126X_IRQ_PREAMBLE_DETECTED ) == SX126X_IRQ_PREAMBLE_DETECTED )
 800097e:	230e      	movs	r3, #14
 8000980:	18fb      	adds	r3, r7, r3
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	001a      	movs	r2, r3
 8000986:	2304      	movs	r3, #4
 8000988:	4013      	ands	r3, r2
 800098a:	d003      	beq.n	8000994 <apps_common_sx126x_irq_process+0x74>
        {
        	printf( "Preamble detected\n\r" );
 800098c:	4b3b      	ldr	r3, [pc, #236]	@ (8000a7c <apps_common_sx126x_irq_process+0x15c>)
 800098e:	0018      	movs	r0, r3
 8000990:	f003 ffb4 	bl	80048fc <iprintf>
            //on_preamble_detected( );
        }

        if( ( irq_regs & SX126X_IRQ_SYNC_WORD_VALID ) == SX126X_IRQ_SYNC_WORD_VALID )
 8000994:	230e      	movs	r3, #14
 8000996:	18fb      	adds	r3, r7, r3
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	001a      	movs	r2, r3
 800099c:	2308      	movs	r3, #8
 800099e:	4013      	ands	r3, r2
 80009a0:	d003      	beq.n	80009aa <apps_common_sx126x_irq_process+0x8a>
        {
        	printf( "Syncword valid\n\r" );
 80009a2:	4b37      	ldr	r3, [pc, #220]	@ (8000a80 <apps_common_sx126x_irq_process+0x160>)
 80009a4:	0018      	movs	r0, r3
 80009a6:	f003 ffa9 	bl	80048fc <iprintf>
            //on_syncword_valid( );
        }

        if( ( irq_regs & SX126X_IRQ_HEADER_VALID ) == SX126X_IRQ_HEADER_VALID )
 80009aa:	230e      	movs	r3, #14
 80009ac:	18fb      	adds	r3, r7, r3
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	001a      	movs	r2, r3
 80009b2:	2310      	movs	r3, #16
 80009b4:	4013      	ands	r3, r2
 80009b6:	d003      	beq.n	80009c0 <apps_common_sx126x_irq_process+0xa0>
        {
        	printf( "Header valid\n\r" );
 80009b8:	4b32      	ldr	r3, [pc, #200]	@ (8000a84 <apps_common_sx126x_irq_process+0x164>)
 80009ba:	0018      	movs	r0, r3
 80009bc:	f003 ff9e 	bl	80048fc <iprintf>
            //on_header_valid( );
        }

        if( ( irq_regs & SX126X_IRQ_HEADER_ERROR ) == SX126X_IRQ_HEADER_ERROR )
 80009c0:	230e      	movs	r3, #14
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	001a      	movs	r2, r3
 80009c8:	2320      	movs	r3, #32
 80009ca:	4013      	ands	r3, r2
 80009cc:	d003      	beq.n	80009d6 <apps_common_sx126x_irq_process+0xb6>
        {
        	printf( "Header error\n\r" );
 80009ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000a88 <apps_common_sx126x_irq_process+0x168>)
 80009d0:	0018      	movs	r0, r3
 80009d2:	f003 ff93 	bl	80048fc <iprintf>
            //on_header_error( );
        }

        if( ( irq_regs & SX126X_IRQ_CRC_ERROR ) == SX126X_IRQ_CRC_ERROR )
 80009d6:	230e      	movs	r3, #14
 80009d8:	18fb      	adds	r3, r7, r3
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	001a      	movs	r2, r3
 80009de:	2340      	movs	r3, #64	@ 0x40
 80009e0:	4013      	ands	r3, r2
 80009e2:	d003      	beq.n	80009ec <apps_common_sx126x_irq_process+0xcc>
        {
        	printf( "CRC error\n\r" );
 80009e4:	4b29      	ldr	r3, [pc, #164]	@ (8000a8c <apps_common_sx126x_irq_process+0x16c>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f003 ff88 	bl	80048fc <iprintf>
            //on_crc_error( );
        }

        if( ( irq_regs & SX126X_IRQ_CAD_DONE ) == SX126X_IRQ_CAD_DONE )
 80009ec:	240e      	movs	r4, #14
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	001a      	movs	r2, r3
 80009f4:	2380      	movs	r3, #128	@ 0x80
 80009f6:	4013      	ands	r3, r2
 80009f8:	d013      	beq.n	8000a22 <apps_common_sx126x_irq_process+0x102>
        {
        	printf( "CAD done\n\r" );
 80009fa:	4b25      	ldr	r3, [pc, #148]	@ (8000a90 <apps_common_sx126x_irq_process+0x170>)
 80009fc:	0018      	movs	r0, r3
 80009fe:	f003 ff7d 	bl	80048fc <iprintf>
            if( ( irq_regs & SX126X_IRQ_CAD_DETECTED ) == SX126X_IRQ_CAD_DETECTED )
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	001a      	movs	r2, r3
 8000a08:	2380      	movs	r3, #128	@ 0x80
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	d004      	beq.n	8000a1a <apps_common_sx126x_irq_process+0xfa>
            {
            	printf( "Channel activity detected\n\r" );
 8000a10:	4b20      	ldr	r3, [pc, #128]	@ (8000a94 <apps_common_sx126x_irq_process+0x174>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f003 ff72 	bl	80048fc <iprintf>
 8000a18:	e003      	b.n	8000a22 <apps_common_sx126x_irq_process+0x102>
                //on_cad_done_detected( );
            }
            else
            {
            	printf( "No channel activity detected\n\r" );
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <apps_common_sx126x_irq_process+0x178>)
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f003 ff6d 	bl	80048fc <iprintf>
                //on_cad_done_undetected( );
            }
        }

        if( ( irq_regs & SX126X_IRQ_TIMEOUT ) == SX126X_IRQ_TIMEOUT )
 8000a22:	230e      	movs	r3, #14
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	001a      	movs	r2, r3
 8000a2a:	2380      	movs	r3, #128	@ 0x80
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4013      	ands	r3, r2
 8000a30:	d003      	beq.n	8000a3a <apps_common_sx126x_irq_process+0x11a>
        {
        	printf( "Rx timeout\n\r" );
 8000a32:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <apps_common_sx126x_irq_process+0x17c>)
 8000a34:	0018      	movs	r0, r3
 8000a36:	f003 ff61 	bl	80048fc <iprintf>
            //on_rx_timeout( );
        }

        if( ( irq_regs & SX126X_IRQ_LR_FHSS_HOP ) == SX126X_IRQ_LR_FHSS_HOP )
 8000a3a:	230e      	movs	r3, #14
 8000a3c:	18fb      	adds	r3, r7, r3
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	001a      	movs	r2, r3
 8000a42:	2380      	movs	r3, #128	@ 0x80
 8000a44:	01db      	lsls	r3, r3, #7
 8000a46:	4013      	ands	r3, r2
 8000a48:	d003      	beq.n	8000a52 <apps_common_sx126x_irq_process+0x132>
        {
        	printf( "FHSS hop done\n\r" );
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <apps_common_sx126x_irq_process+0x180>)
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f003 ff55 	bl	80048fc <iprintf>
            //on_fhss_hop_done( );
        }
    }
    if(btn_pressed == true)
 8000a52:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <apps_common_sx126x_irq_process+0x184>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d004      	beq.n	8000a66 <apps_common_sx126x_irq_process+0x146>
    {
    	btn_pressed = false;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <apps_common_sx126x_irq_process+0x184>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	701a      	strb	r2, [r3, #0]
    	updateCount();
 8000a62:	f000 f84d 	bl	8000b00 <updateCount>
    }
}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b005      	add	sp, #20
 8000a6c:	bd90      	pop	{r4, r7, pc}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	200000c2 	.word	0x200000c2
 8000a74:	08005a2c 	.word	0x08005a2c
 8000a78:	08005a38 	.word	0x08005a38
 8000a7c:	08005a44 	.word	0x08005a44
 8000a80:	08005a58 	.word	0x08005a58
 8000a84:	08005a6c 	.word	0x08005a6c
 8000a88:	08005a7c 	.word	0x08005a7c
 8000a8c:	08005a8c 	.word	0x08005a8c
 8000a90:	08005a98 	.word	0x08005a98
 8000a94:	08005aa4 	.word	0x08005aa4
 8000a98:	08005ac0 	.word	0x08005ac0
 8000a9c:	08005ae0 	.word	0x08005ae0
 8000aa0:	08005af0 	.word	0x08005af0
 8000aa4:	200000c3 	.word	0x200000c3

08000aa8 <on_rx_done>:
void on_rx_done(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	sx126x_rx_buffer_status_t rx_buffer_status;

	sx126x_get_rx_buffer_status( &LoRa, &rx_buffer_status );
 8000aae:	1d3a      	adds	r2, r7, #4
 8000ab0:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <on_rx_done+0x4c>)
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f003 fb2f 	bl	8004118 <sx126x_get_rx_buffer_status>
	sx126x_read_buffer( &LoRa, 0, rxdata, rx_buffer_status.pld_len_in_bytes );
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	4a0e      	ldr	r2, [pc, #56]	@ (8000af8 <on_rx_done+0x50>)
 8000ac0:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <on_rx_done+0x4c>)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	f003 f850 	bl	8003b68 <sx126x_read_buffer>
	rxdata[rx_buffer_status.pld_len_in_bytes] = '\0';
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	001a      	movs	r2, r3
 8000ace:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <on_rx_done+0x50>)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	5499      	strb	r1, [r3, r2]
	printf("%s\n\r",rxdata);
 8000ad4:	4a08      	ldr	r2, [pc, #32]	@ (8000af8 <on_rx_done+0x50>)
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <on_rx_done+0x54>)
 8000ad8:	0011      	movs	r1, r2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f003 ff0e 	bl	80048fc <iprintf>
	sx126x_set_rx( &LoRa, 0);
 8000ae0:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <on_rx_done+0x4c>)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f002 fefa 	bl	80038de <sx126x_set_rx>

}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b002      	add	sp, #8
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	20000088 	.word	0x20000088
 8000af8:	200000b8 	.word	0x200000b8
 8000afc:	08005b00 	.word	0x08005b00

08000b00 <updateCount>:
void updateCount(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
    static int count = 0;
    char sendcmd[16];
    int len;

    count = (count + 1) % 4;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	@ (8000b70 <updateCount+0x70>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	4a19      	ldr	r2, [pc, #100]	@ (8000b74 <updateCount+0x74>)
 8000b0e:	4013      	ands	r3, r2
 8000b10:	d504      	bpl.n	8000b1c <updateCount+0x1c>
 8000b12:	3b01      	subs	r3, #1
 8000b14:	2204      	movs	r2, #4
 8000b16:	4252      	negs	r2, r2
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <updateCount+0x70>)
 8000b20:	601a      	str	r2, [r3, #0]
    len = snprintf(sendcmd + 1, sizeof(sendcmd) - 1, "LED-%d", count);
 8000b22:	1d38      	adds	r0, r7, #4
 8000b24:	3001      	adds	r0, #1
 8000b26:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <updateCount+0x70>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a13      	ldr	r2, [pc, #76]	@ (8000b78 <updateCount+0x78>)
 8000b2c:	210f      	movs	r1, #15
 8000b2e:	f003 fef5 	bl	800491c <sniprintf>
 8000b32:	0003      	movs	r3, r0
 8000b34:	617b      	str	r3, [r7, #20]
    sendcmd[0] = len;  // First byte is the length
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	701a      	strb	r2, [r3, #0]

    printf("TX: %s (%d bytes)\n\r", sendcmd + 1, len);
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	3301      	adds	r3, #1
 8000b42:	697a      	ldr	r2, [r7, #20]
 8000b44:	480d      	ldr	r0, [pc, #52]	@ (8000b7c <updateCount+0x7c>)
 8000b46:	0019      	movs	r1, r3
 8000b48:	f003 fed8 	bl	80048fc <iprintf>
    sx126x_write_buffer(&LoRa, 0, (uint8_t*)sendcmd, len + 1);
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	3301      	adds	r3, #1
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	1d3a      	adds	r2, r7, #4
 8000b56:	480a      	ldr	r0, [pc, #40]	@ (8000b80 <updateCount+0x80>)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f002 ffde 	bl	8003b1a <sx126x_write_buffer>
    sx126x_set_tx(&LoRa, 0);
 8000b5e:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <updateCount+0x80>)
 8000b60:	2100      	movs	r1, #0
 8000b62:	0018      	movs	r0, r3
 8000b64:	f002 fe7a 	bl	800385c <sx126x_set_tx>
}
 8000b68:	46c0      	nop			@ (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b006      	add	sp, #24
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200001cc 	.word	0x200001cc
 8000b74:	80000003 	.word	0x80000003
 8000b78:	08005b08 	.word	0x08005b08
 8000b7c:	08005b10 	.word	0x08005b10
 8000b80:	20000088 	.word	0x20000088

08000b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b8c:	46c0      	nop			@ (mov r8, r8)
 8000b8e:	e7fd      	b.n	8000b8c <Error_Handler+0x8>

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000b98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	4013      	ands	r3, r2
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000bb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bb2:	4b08      	ldr	r3, [pc, #32]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000bb4:	2180      	movs	r1, #128	@ 0x80
 8000bb6:	0549      	lsls	r1, r1, #21
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <HAL_MspInit+0x44>)
 8000bbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bc0:	2380      	movs	r3, #128	@ 0x80
 8000bc2:	055b      	lsls	r3, r3, #21
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			@ (mov r8, r8)
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b08b      	sub	sp, #44	@ 0x2c
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	2414      	movs	r4, #20
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	0018      	movs	r0, r3
 8000be6:	2314      	movs	r3, #20
 8000be8:	001a      	movs	r2, r3
 8000bea:	2100      	movs	r1, #0
 8000bec:	f003 ff16 	bl	8004a1c <memset>
  if(hspi->Instance==SPI2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a2c      	ldr	r2, [pc, #176]	@ (8000ca8 <HAL_SPI_MspInit+0xd0>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d151      	bne.n	8000c9e <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8000cac <HAL_SPI_MspInit+0xd4>)
 8000bfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8000cac <HAL_SPI_MspInit+0xd4>)
 8000c00:	2180      	movs	r1, #128	@ 0x80
 8000c02:	01c9      	lsls	r1, r1, #7
 8000c04:	430a      	orrs	r2, r1
 8000c06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c08:	4b28      	ldr	r3, [pc, #160]	@ (8000cac <HAL_SPI_MspInit+0xd4>)
 8000c0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c0c:	2380      	movs	r3, #128	@ 0x80
 8000c0e:	01db      	lsls	r3, r3, #7
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	4b25      	ldr	r3, [pc, #148]	@ (8000cac <HAL_SPI_MspInit+0xd4>)
 8000c18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c1a:	4b24      	ldr	r3, [pc, #144]	@ (8000cac <HAL_SPI_MspInit+0xd4>)
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c22:	4b22      	ldr	r3, [pc, #136]	@ (8000cac <HAL_SPI_MspInit+0xd4>)
 8000c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c26:	2204      	movs	r2, #4
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cac <HAL_SPI_MspInit+0xd4>)
 8000c30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c32:	4b1e      	ldr	r3, [pc, #120]	@ (8000cac <HAL_SPI_MspInit+0xd4>)
 8000c34:	2101      	movs	r1, #1
 8000c36:	430a      	orrs	r2, r1
 8000c38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <HAL_SPI_MspInit+0xd4>)
 8000c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4013      	ands	r3, r2
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PA0     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	220c      	movs	r2, #12
 8000c4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	193b      	adds	r3, r7, r4
 8000c4e:	2202      	movs	r2, #2
 8000c50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000c5e:	193b      	adds	r3, r7, r4
 8000c60:	2201      	movs	r2, #1
 8000c62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c64:	193b      	adds	r3, r7, r4
 8000c66:	4a12      	ldr	r2, [pc, #72]	@ (8000cb0 <HAL_SPI_MspInit+0xd8>)
 8000c68:	0019      	movs	r1, r3
 8000c6a:	0010      	movs	r0, r2
 8000c6c:	f000 fae2 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c70:	0021      	movs	r1, r4
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2201      	movs	r2, #1
 8000c76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	187a      	adds	r2, r7, r1
 8000c92:	23a0      	movs	r3, #160	@ 0xa0
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f000 facb 	bl	8001234 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b00b      	add	sp, #44	@ 0x2c
 8000ca4:	bd90      	pop	{r4, r7, pc}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	40003800 	.word	0x40003800
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	50000800 	.word	0x50000800

08000cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b091      	sub	sp, #68	@ 0x44
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	232c      	movs	r3, #44	@ 0x2c
 8000cbe:	18fb      	adds	r3, r7, r3
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	2314      	movs	r3, #20
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	f003 fea8 	bl	8004a1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ccc:	2410      	movs	r4, #16
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	231c      	movs	r3, #28
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	f003 fea0 	bl	8004a1c <memset>
  if(huart->Instance==USART2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a22      	ldr	r2, [pc, #136]	@ (8000d6c <HAL_UART_MspInit+0xb8>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d13e      	bne.n	8000d64 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	2202      	movs	r2, #2
 8000cea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f001 f991 	bl	800201c <HAL_RCCEx_PeriphCLKConfig>
 8000cfa:	1e03      	subs	r3, r0, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cfe:	f7ff ff41 	bl	8000b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d02:	4b1b      	ldr	r3, [pc, #108]	@ (8000d70 <HAL_UART_MspInit+0xbc>)
 8000d04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d06:	4b1a      	ldr	r3, [pc, #104]	@ (8000d70 <HAL_UART_MspInit+0xbc>)
 8000d08:	2180      	movs	r1, #128	@ 0x80
 8000d0a:	0289      	lsls	r1, r1, #10
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d10:	4b17      	ldr	r3, [pc, #92]	@ (8000d70 <HAL_UART_MspInit+0xbc>)
 8000d12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d14:	2380      	movs	r3, #128	@ 0x80
 8000d16:	029b      	lsls	r3, r3, #10
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b14      	ldr	r3, [pc, #80]	@ (8000d70 <HAL_UART_MspInit+0xbc>)
 8000d20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d22:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <HAL_UART_MspInit+0xbc>)
 8000d24:	2101      	movs	r1, #1
 8000d26:	430a      	orrs	r2, r1
 8000d28:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d2a:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <HAL_UART_MspInit+0xbc>)
 8000d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|GPIO_PIN_3;
 8000d36:	212c      	movs	r1, #44	@ 0x2c
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2202      	movs	r2, #2
 8000d42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2201      	movs	r2, #1
 8000d48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2201      	movs	r2, #1
 8000d54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	187a      	adds	r2, r7, r1
 8000d58:	23a0      	movs	r3, #160	@ 0xa0
 8000d5a:	05db      	lsls	r3, r3, #23
 8000d5c:	0011      	movs	r1, r2
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f000 fa68 	bl	8001234 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d64:	46c0      	nop			@ (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b011      	add	sp, #68	@ 0x44
 8000d6a:	bd90      	pop	{r4, r7, pc}
 8000d6c:	40004400 	.word	0x40004400
 8000d70:	40021000 	.word	0x40021000

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d78:	46c0      	nop			@ (mov r8, r8)
 8000d7a:	e7fd      	b.n	8000d78 <NMI_Handler+0x4>

08000d7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d80:	46c0      	nop			@ (mov r8, r8)
 8000d82:	e7fd      	b.n	8000d80 <HardFault_Handler+0x4>

08000d84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d88:	46c0      	nop			@ (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d92:	46c0      	nop			@ (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9c:	f000 f92c 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da0:	46c0      	nop			@ (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8000daa:	2380      	movs	r3, #128	@ 0x80
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 fbfa 	bl	80015a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	019b      	lsls	r3, r3, #6
 8000db8:	0018      	movs	r0, r3
 8000dba:	f000 fbf5 	bl	80015a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e00a      	b.n	8000dec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dd6:	e000      	b.n	8000dda <_read+0x16>
 8000dd8:	bf00      	nop
 8000dda:	0001      	movs	r1, r0
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	1c5a      	adds	r2, r3, #1
 8000de0:	60ba      	str	r2, [r7, #8]
 8000de2:	b2ca      	uxtb	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	dbf0      	blt.n	8000dd6 <_read+0x12>
  }

  return len;
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	0018      	movs	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	b006      	add	sp, #24
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <_close>:
  }
  return len;
}

int _close(int file)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e06:	2301      	movs	r3, #1
 8000e08:	425b      	negs	r3, r3
}
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b002      	add	sp, #8
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
 8000e1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	2280      	movs	r2, #128	@ 0x80
 8000e20:	0192      	lsls	r2, r2, #6
 8000e22:	605a      	str	r2, [r3, #4]
  return 0;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	0018      	movs	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <_isatty>:

int _isatty(int file)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	0018      	movs	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b002      	add	sp, #8
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	0018      	movs	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b004      	add	sp, #16
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	@ (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	@ (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	18d3      	adds	r3, r2, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e88:	f003 fe1e 	bl	8004ac8 <__errno>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	220c      	movs	r2, #12
 8000e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e92:	2301      	movs	r3, #1
 8000e94:	425b      	negs	r3, r3
 8000e96:	e009      	b.n	8000eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	18d2      	adds	r2, r2, r3
 8000ea6:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <_sbrk+0x64>)
 8000ea8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b006      	add	sp, #24
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20009000 	.word	0x20009000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	200001d0 	.word	0x200001d0
 8000ec0:	20000338 	.word	0x20000338

08000ec4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	46c0      	nop			@ (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ed0:	480d      	ldr	r0, [pc, #52]	@ (8000f08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ed2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ed4:	f7ff fff6 	bl	8000ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed8:	480c      	ldr	r0, [pc, #48]	@ (8000f0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000eda:	490d      	ldr	r1, [pc, #52]	@ (8000f10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000edc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f14 <LoopForever+0xe>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee0:	e002      	b.n	8000ee8 <LoopCopyDataInit>

08000ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee6:	3304      	adds	r3, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eec:	d3f9      	bcc.n	8000ee2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eee:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef0:	4c0a      	ldr	r4, [pc, #40]	@ (8000f1c <LoopForever+0x16>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef4:	e001      	b.n	8000efa <LoopFillZerobss>

08000ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef8:	3204      	adds	r2, #4

08000efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000efc:	d3fb      	bcc.n	8000ef6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000efe:	f003 fde9 	bl	8004ad4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000f02:	f7ff fa7d 	bl	8000400 <main>

08000f06 <LoopForever>:

LoopForever:
  b LoopForever
 8000f06:	e7fe      	b.n	8000f06 <LoopForever>
  ldr   r0, =_estack
 8000f08:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f10:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f14:	08005c1c 	.word	0x08005c1c
  ldr r2, =_sbss
 8000f18:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f1c:	20000338 	.word	0x20000338

08000f20 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC1_IRQHandler>
	...

08000f24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f30:	4b0b      	ldr	r3, [pc, #44]	@ (8000f60 <HAL_Init+0x3c>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_Init+0x3c>)
 8000f36:	2180      	movs	r1, #128	@ 0x80
 8000f38:	0049      	lsls	r1, r1, #1
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 f810 	bl	8000f64 <HAL_InitTick>
 8000f44:	1e03      	subs	r3, r0, #0
 8000f46:	d003      	beq.n	8000f50 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	e001      	b.n	8000f54 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fe1e 	bl	8000b90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	781b      	ldrb	r3, [r3, #0]
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b002      	add	sp, #8
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40022000 	.word	0x40022000

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	18fb      	adds	r3, r7, r3
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000f74:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <HAL_InitTick+0x88>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d02b      	beq.n	8000fd4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff0 <HAL_InitTick+0x8c>)
 8000f7e:	681c      	ldr	r4, [r3, #0]
 8000f80:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <HAL_InitTick+0x88>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	0019      	movs	r1, r3
 8000f86:	23fa      	movs	r3, #250	@ 0xfa
 8000f88:	0098      	lsls	r0, r3, #2
 8000f8a:	f7ff f8c3 	bl	8000114 <__udivsi3>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0019      	movs	r1, r3
 8000f92:	0020      	movs	r0, r4
 8000f94:	f7ff f8be 	bl	8000114 <__udivsi3>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f000 f93d 	bl	800121a <HAL_SYSTICK_Config>
 8000fa0:	1e03      	subs	r3, r0, #0
 8000fa2:	d112      	bne.n	8000fca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d80a      	bhi.n	8000fc0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000faa:	6879      	ldr	r1, [r7, #4]
 8000fac:	2301      	movs	r3, #1
 8000fae:	425b      	negs	r3, r3
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f000 f90c 	bl	80011d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff4 <HAL_InitTick+0x90>)
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	e00d      	b.n	8000fdc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	18fb      	adds	r3, r7, r3
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
 8000fc8:	e008      	b.n	8000fdc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fca:	230f      	movs	r3, #15
 8000fcc:	18fb      	adds	r3, r7, r3
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	e003      	b.n	8000fdc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000fdc:	230f      	movs	r3, #15
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	781b      	ldrb	r3, [r3, #0]
}
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b005      	add	sp, #20
 8000fe8:	bd90      	pop	{r4, r7, pc}
 8000fea:	46c0      	nop			@ (mov r8, r8)
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000004 	.word	0x20000004

08000ff8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <HAL_IncTick+0x1c>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	001a      	movs	r2, r3
 8001002:	4b05      	ldr	r3, [pc, #20]	@ (8001018 <HAL_IncTick+0x20>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	18d2      	adds	r2, r2, r3
 8001008:	4b03      	ldr	r3, [pc, #12]	@ (8001018 <HAL_IncTick+0x20>)
 800100a:	601a      	str	r2, [r3, #0]
}
 800100c:	46c0      	nop			@ (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	20000008 	.word	0x20000008
 8001018:	200001d4 	.word	0x200001d4

0800101c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b02      	ldr	r3, [pc, #8]	@ (800102c <HAL_GetTick+0x10>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	0018      	movs	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			@ (mov r8, r8)
 800102c:	200001d4 	.word	0x200001d4

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001038:	f7ff fff0 	bl	800101c <HAL_GetTick>
 800103c:	0003      	movs	r3, r0
 800103e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3301      	adds	r3, #1
 8001048:	d005      	beq.n	8001056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <HAL_Delay+0x44>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	001a      	movs	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	189b      	adds	r3, r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001056:	46c0      	nop			@ (mov r8, r8)
 8001058:	f7ff ffe0 	bl	800101c <HAL_GetTick>
 800105c:	0002      	movs	r2, r0
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	429a      	cmp	r2, r3
 8001066:	d8f7      	bhi.n	8001058 <HAL_Delay+0x28>
  {
  }
}
 8001068:	46c0      	nop			@ (mov r8, r8)
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b004      	add	sp, #16
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	20000008 	.word	0x20000008

08001078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	0002      	movs	r2, r0
 8001080:	1dfb      	adds	r3, r7, #7
 8001082:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b7f      	cmp	r3, #127	@ 0x7f
 800108a:	d809      	bhi.n	80010a0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108c:	1dfb      	adds	r3, r7, #7
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	001a      	movs	r2, r3
 8001092:	231f      	movs	r3, #31
 8001094:	401a      	ands	r2, r3
 8001096:	4b04      	ldr	r3, [pc, #16]	@ (80010a8 <__NVIC_EnableIRQ+0x30>)
 8001098:	2101      	movs	r1, #1
 800109a:	4091      	lsls	r1, r2
 800109c:	000a      	movs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b002      	add	sp, #8
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b590      	push	{r4, r7, lr}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	0002      	movs	r2, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	1dfb      	adds	r3, r7, #7
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b7f      	cmp	r3, #127	@ 0x7f
 80010c0:	d828      	bhi.n	8001114 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001180 <__NVIC_SetPriority+0xd4>)
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	33c0      	adds	r3, #192	@ 0xc0
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	589b      	ldr	r3, [r3, r2]
 80010d2:	1dfa      	adds	r2, r7, #7
 80010d4:	7812      	ldrb	r2, [r2, #0]
 80010d6:	0011      	movs	r1, r2
 80010d8:	2203      	movs	r2, #3
 80010da:	400a      	ands	r2, r1
 80010dc:	00d2      	lsls	r2, r2, #3
 80010de:	21ff      	movs	r1, #255	@ 0xff
 80010e0:	4091      	lsls	r1, r2
 80010e2:	000a      	movs	r2, r1
 80010e4:	43d2      	mvns	r2, r2
 80010e6:	401a      	ands	r2, r3
 80010e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	019b      	lsls	r3, r3, #6
 80010ee:	22ff      	movs	r2, #255	@ 0xff
 80010f0:	401a      	ands	r2, r3
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	0018      	movs	r0, r3
 80010f8:	2303      	movs	r3, #3
 80010fa:	4003      	ands	r3, r0
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001100:	481f      	ldr	r0, [pc, #124]	@ (8001180 <__NVIC_SetPriority+0xd4>)
 8001102:	1dfb      	adds	r3, r7, #7
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b25b      	sxtb	r3, r3
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	430a      	orrs	r2, r1
 800110c:	33c0      	adds	r3, #192	@ 0xc0
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001112:	e031      	b.n	8001178 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001114:	4a1b      	ldr	r2, [pc, #108]	@ (8001184 <__NVIC_SetPriority+0xd8>)
 8001116:	1dfb      	adds	r3, r7, #7
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	0019      	movs	r1, r3
 800111c:	230f      	movs	r3, #15
 800111e:	400b      	ands	r3, r1
 8001120:	3b08      	subs	r3, #8
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	3306      	adds	r3, #6
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	18d3      	adds	r3, r2, r3
 800112a:	3304      	adds	r3, #4
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	1dfa      	adds	r2, r7, #7
 8001130:	7812      	ldrb	r2, [r2, #0]
 8001132:	0011      	movs	r1, r2
 8001134:	2203      	movs	r2, #3
 8001136:	400a      	ands	r2, r1
 8001138:	00d2      	lsls	r2, r2, #3
 800113a:	21ff      	movs	r1, #255	@ 0xff
 800113c:	4091      	lsls	r1, r2
 800113e:	000a      	movs	r2, r1
 8001140:	43d2      	mvns	r2, r2
 8001142:	401a      	ands	r2, r3
 8001144:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	019b      	lsls	r3, r3, #6
 800114a:	22ff      	movs	r2, #255	@ 0xff
 800114c:	401a      	ands	r2, r3
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	0018      	movs	r0, r3
 8001154:	2303      	movs	r3, #3
 8001156:	4003      	ands	r3, r0
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800115c:	4809      	ldr	r0, [pc, #36]	@ (8001184 <__NVIC_SetPriority+0xd8>)
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	001c      	movs	r4, r3
 8001164:	230f      	movs	r3, #15
 8001166:	4023      	ands	r3, r4
 8001168:	3b08      	subs	r3, #8
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	430a      	orrs	r2, r1
 800116e:	3306      	adds	r3, #6
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	18c3      	adds	r3, r0, r3
 8001174:	3304      	adds	r3, #4
 8001176:	601a      	str	r2, [r3, #0]
}
 8001178:	46c0      	nop			@ (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	b003      	add	sp, #12
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	1e5a      	subs	r2, r3, #1
 8001194:	2380      	movs	r3, #128	@ 0x80
 8001196:	045b      	lsls	r3, r3, #17
 8001198:	429a      	cmp	r2, r3
 800119a:	d301      	bcc.n	80011a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119c:	2301      	movs	r3, #1
 800119e:	e010      	b.n	80011c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011a0:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <SysTick_Config+0x44>)
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	3a01      	subs	r2, #1
 80011a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a8:	2301      	movs	r3, #1
 80011aa:	425b      	negs	r3, r3
 80011ac:	2103      	movs	r1, #3
 80011ae:	0018      	movs	r0, r3
 80011b0:	f7ff ff7c 	bl	80010ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b4:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <SysTick_Config+0x44>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ba:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <SysTick_Config+0x44>)
 80011bc:	2207      	movs	r2, #7
 80011be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b002      	add	sp, #8
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	e000e010 	.word	0xe000e010

080011d0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	210f      	movs	r1, #15
 80011dc:	187b      	adds	r3, r7, r1
 80011de:	1c02      	adds	r2, r0, #0
 80011e0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	187b      	adds	r3, r7, r1
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	0011      	movs	r1, r2
 80011ec:	0018      	movs	r0, r3
 80011ee:	f7ff ff5d 	bl	80010ac <__NVIC_SetPriority>
}
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	46bd      	mov	sp, r7
 80011f6:	b004      	add	sp, #16
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	0002      	movs	r2, r0
 8001202:	1dfb      	adds	r3, r7, #7
 8001204:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	b25b      	sxtb	r3, r3
 800120c:	0018      	movs	r0, r3
 800120e:	f7ff ff33 	bl	8001078 <__NVIC_EnableIRQ>
}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	0018      	movs	r0, r3
 8001226:	f7ff ffaf 	bl	8001188 <SysTick_Config>
 800122a:	0003      	movs	r3, r0
}
 800122c:	0018      	movs	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	b002      	add	sp, #8
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001242:	e147      	b.n	80014d4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2101      	movs	r1, #1
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	4091      	lsls	r1, r2
 800124e:	000a      	movs	r2, r1
 8001250:	4013      	ands	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d100      	bne.n	800125c <HAL_GPIO_Init+0x28>
 800125a:	e138      	b.n	80014ce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2203      	movs	r2, #3
 8001262:	4013      	ands	r3, r2
 8001264:	2b01      	cmp	r3, #1
 8001266:	d005      	beq.n	8001274 <HAL_GPIO_Init+0x40>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2203      	movs	r2, #3
 800126e:	4013      	ands	r3, r2
 8001270:	2b02      	cmp	r3, #2
 8001272:	d130      	bne.n	80012d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	409a      	lsls	r2, r3
 8001282:	0013      	movs	r3, r2
 8001284:	43da      	mvns	r2, r3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	409a      	lsls	r2, r3
 8001296:	0013      	movs	r3, r2
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012aa:	2201      	movs	r2, #1
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	409a      	lsls	r2, r3
 80012b0:	0013      	movs	r3, r2
 80012b2:	43da      	mvns	r2, r3
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	2201      	movs	r2, #1
 80012c2:	401a      	ands	r2, r3
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	409a      	lsls	r2, r3
 80012c8:	0013      	movs	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2203      	movs	r2, #3
 80012dc:	4013      	ands	r3, r2
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d017      	beq.n	8001312 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	409a      	lsls	r2, r3
 80012f0:	0013      	movs	r3, r2
 80012f2:	43da      	mvns	r2, r3
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	409a      	lsls	r2, r3
 8001304:	0013      	movs	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2203      	movs	r2, #3
 8001318:	4013      	ands	r3, r2
 800131a:	2b02      	cmp	r3, #2
 800131c:	d123      	bne.n	8001366 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	58d3      	ldr	r3, [r2, r3]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	2207      	movs	r2, #7
 8001330:	4013      	ands	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	409a      	lsls	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	43da      	mvns	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	691a      	ldr	r2, [r3, #16]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	2107      	movs	r1, #7
 800134a:	400b      	ands	r3, r1
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	08da      	lsrs	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3208      	adds	r2, #8
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	6939      	ldr	r1, [r7, #16]
 8001364:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2203      	movs	r2, #3
 8001372:	409a      	lsls	r2, r3
 8001374:	0013      	movs	r3, r2
 8001376:	43da      	mvns	r2, r3
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2203      	movs	r2, #3
 8001384:	401a      	ands	r2, r3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	409a      	lsls	r2, r3
 800138c:	0013      	movs	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	23c0      	movs	r3, #192	@ 0xc0
 80013a0:	029b      	lsls	r3, r3, #10
 80013a2:	4013      	ands	r3, r2
 80013a4:	d100      	bne.n	80013a8 <HAL_GPIO_Init+0x174>
 80013a6:	e092      	b.n	80014ce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80013a8:	4a50      	ldr	r2, [pc, #320]	@ (80014ec <HAL_GPIO_Init+0x2b8>)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3318      	adds	r3, #24
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	589b      	ldr	r3, [r3, r2]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	2203      	movs	r2, #3
 80013ba:	4013      	ands	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	220f      	movs	r2, #15
 80013c0:	409a      	lsls	r2, r3
 80013c2:	0013      	movs	r3, r2
 80013c4:	43da      	mvns	r2, r3
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	23a0      	movs	r3, #160	@ 0xa0
 80013d0:	05db      	lsls	r3, r3, #23
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d013      	beq.n	80013fe <HAL_GPIO_Init+0x1ca>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a45      	ldr	r2, [pc, #276]	@ (80014f0 <HAL_GPIO_Init+0x2bc>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d00d      	beq.n	80013fa <HAL_GPIO_Init+0x1c6>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a44      	ldr	r2, [pc, #272]	@ (80014f4 <HAL_GPIO_Init+0x2c0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d007      	beq.n	80013f6 <HAL_GPIO_Init+0x1c2>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a43      	ldr	r2, [pc, #268]	@ (80014f8 <HAL_GPIO_Init+0x2c4>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d101      	bne.n	80013f2 <HAL_GPIO_Init+0x1be>
 80013ee:	2303      	movs	r3, #3
 80013f0:	e006      	b.n	8001400 <HAL_GPIO_Init+0x1cc>
 80013f2:	2305      	movs	r3, #5
 80013f4:	e004      	b.n	8001400 <HAL_GPIO_Init+0x1cc>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e002      	b.n	8001400 <HAL_GPIO_Init+0x1cc>
 80013fa:	2301      	movs	r3, #1
 80013fc:	e000      	b.n	8001400 <HAL_GPIO_Init+0x1cc>
 80013fe:	2300      	movs	r3, #0
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	2103      	movs	r1, #3
 8001404:	400a      	ands	r2, r1
 8001406:	00d2      	lsls	r2, r2, #3
 8001408:	4093      	lsls	r3, r2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001410:	4936      	ldr	r1, [pc, #216]	@ (80014ec <HAL_GPIO_Init+0x2b8>)
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	3318      	adds	r3, #24
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800141e:	4b33      	ldr	r3, [pc, #204]	@ (80014ec <HAL_GPIO_Init+0x2b8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	43da      	mvns	r2, r3
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	2380      	movs	r3, #128	@ 0x80
 8001434:	035b      	lsls	r3, r3, #13
 8001436:	4013      	ands	r3, r2
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001442:	4b2a      	ldr	r3, [pc, #168]	@ (80014ec <HAL_GPIO_Init+0x2b8>)
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001448:	4b28      	ldr	r3, [pc, #160]	@ (80014ec <HAL_GPIO_Init+0x2b8>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	43da      	mvns	r2, r3
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	2380      	movs	r3, #128	@ 0x80
 800145e:	039b      	lsls	r3, r3, #14
 8001460:	4013      	ands	r3, r2
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800146c:	4b1f      	ldr	r3, [pc, #124]	@ (80014ec <HAL_GPIO_Init+0x2b8>)
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001472:	4a1e      	ldr	r2, [pc, #120]	@ (80014ec <HAL_GPIO_Init+0x2b8>)
 8001474:	2384      	movs	r3, #132	@ 0x84
 8001476:	58d3      	ldr	r3, [r2, r3]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	43da      	mvns	r2, r3
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	2380      	movs	r3, #128	@ 0x80
 800148a:	029b      	lsls	r3, r3, #10
 800148c:	4013      	ands	r3, r2
 800148e:	d003      	beq.n	8001498 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001498:	4914      	ldr	r1, [pc, #80]	@ (80014ec <HAL_GPIO_Init+0x2b8>)
 800149a:	2284      	movs	r2, #132	@ 0x84
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80014a0:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <HAL_GPIO_Init+0x2b8>)
 80014a2:	2380      	movs	r3, #128	@ 0x80
 80014a4:	58d3      	ldr	r3, [r2, r3]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	43da      	mvns	r2, r3
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	2380      	movs	r3, #128	@ 0x80
 80014b8:	025b      	lsls	r3, r3, #9
 80014ba:	4013      	ands	r3, r2
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014c6:	4909      	ldr	r1, [pc, #36]	@ (80014ec <HAL_GPIO_Init+0x2b8>)
 80014c8:	2280      	movs	r2, #128	@ 0x80
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	40da      	lsrs	r2, r3
 80014dc:	1e13      	subs	r3, r2, #0
 80014de:	d000      	beq.n	80014e2 <HAL_GPIO_Init+0x2ae>
 80014e0:	e6b0      	b.n	8001244 <HAL_GPIO_Init+0x10>
  }
}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	46c0      	nop			@ (mov r8, r8)
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b006      	add	sp, #24
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021800 	.word	0x40021800
 80014f0:	50000400 	.word	0x50000400
 80014f4:	50000800 	.word	0x50000800
 80014f8:	50000c00 	.word	0x50000c00

080014fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	000a      	movs	r2, r1
 8001506:	1cbb      	adds	r3, r7, #2
 8001508:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	1cba      	adds	r2, r7, #2
 8001510:	8812      	ldrh	r2, [r2, #0]
 8001512:	4013      	ands	r3, r2
 8001514:	d004      	beq.n	8001520 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001516:	230f      	movs	r3, #15
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	2201      	movs	r2, #1
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	e003      	b.n	8001528 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001520:	230f      	movs	r3, #15
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001528:	230f      	movs	r3, #15
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	781b      	ldrb	r3, [r3, #0]
}
 800152e:	0018      	movs	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	b004      	add	sp, #16
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	0008      	movs	r0, r1
 8001540:	0011      	movs	r1, r2
 8001542:	1cbb      	adds	r3, r7, #2
 8001544:	1c02      	adds	r2, r0, #0
 8001546:	801a      	strh	r2, [r3, #0]
 8001548:	1c7b      	adds	r3, r7, #1
 800154a:	1c0a      	adds	r2, r1, #0
 800154c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800154e:	1c7b      	adds	r3, r7, #1
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d004      	beq.n	8001560 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001556:	1cbb      	adds	r3, r7, #2
 8001558:	881a      	ldrh	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800155e:	e003      	b.n	8001568 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001560:	1cbb      	adds	r3, r7, #2
 8001562:	881a      	ldrh	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001568:	46c0      	nop			@ (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	b002      	add	sp, #8
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	000a      	movs	r2, r1
 800157a:	1cbb      	adds	r3, r7, #2
 800157c:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001584:	1cbb      	adds	r3, r7, #2
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	4013      	ands	r3, r2
 800158c:	041a      	lsls	r2, r3, #16
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43db      	mvns	r3, r3
 8001592:	1cb9      	adds	r1, r7, #2
 8001594:	8809      	ldrh	r1, [r1, #0]
 8001596:	400b      	ands	r3, r1
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	619a      	str	r2, [r3, #24]
}
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b004      	add	sp, #16
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	0002      	movs	r2, r0
 80015b0:	1dbb      	adds	r3, r7, #6
 80015b2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80015b4:	4b10      	ldr	r3, [pc, #64]	@ (80015f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	1dba      	adds	r2, r7, #6
 80015ba:	8812      	ldrh	r2, [r2, #0]
 80015bc:	4013      	ands	r3, r2
 80015be:	d008      	beq.n	80015d2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80015c0:	4b0d      	ldr	r3, [pc, #52]	@ (80015f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015c2:	1dba      	adds	r2, r7, #6
 80015c4:	8812      	ldrh	r2, [r2, #0]
 80015c6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80015c8:	1dbb      	adds	r3, r7, #6
 80015ca:	881b      	ldrh	r3, [r3, #0]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff f96f 	bl	80008b0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	1dba      	adds	r2, r7, #6
 80015d8:	8812      	ldrh	r2, [r2, #0]
 80015da:	4013      	ands	r3, r2
 80015dc:	d008      	beq.n	80015f0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80015e0:	1dba      	adds	r2, r7, #6
 80015e2:	8812      	ldrh	r2, [r2, #0]
 80015e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80015e6:	1dbb      	adds	r3, r7, #6
 80015e8:	881b      	ldrh	r3, [r3, #0]
 80015ea:	0018      	movs	r0, r3
 80015ec:	f000 f806 	bl	80015fc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80015f0:	46c0      	nop			@ (mov r8, r8)
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b002      	add	sp, #8
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021800 	.word	0x40021800

080015fc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	0002      	movs	r2, r0
 8001604:	1dbb      	adds	r3, r7, #6
 8001606:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001608:	46c0      	nop			@ (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	b002      	add	sp, #8
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001618:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a19      	ldr	r2, [pc, #100]	@ (8001684 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800161e:	4013      	ands	r3, r2
 8001620:	0019      	movs	r1, r3
 8001622:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	430a      	orrs	r2, r1
 8001628:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	2380      	movs	r3, #128	@ 0x80
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	429a      	cmp	r2, r3
 8001632:	d11f      	bne.n	8001674 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001634:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	0013      	movs	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	189b      	adds	r3, r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4912      	ldr	r1, [pc, #72]	@ (800168c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001642:	0018      	movs	r0, r3
 8001644:	f7fe fd66 	bl	8000114 <__udivsi3>
 8001648:	0003      	movs	r3, r0
 800164a:	3301      	adds	r3, #1
 800164c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800164e:	e008      	b.n	8001662 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	3b01      	subs	r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	e001      	b.n	8001662 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e009      	b.n	8001676 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001664:	695a      	ldr	r2, [r3, #20]
 8001666:	2380      	movs	r3, #128	@ 0x80
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	401a      	ands	r2, r3
 800166c:	2380      	movs	r3, #128	@ 0x80
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	429a      	cmp	r2, r3
 8001672:	d0ed      	beq.n	8001650 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	0018      	movs	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	b004      	add	sp, #16
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	40007000 	.word	0x40007000
 8001684:	fffff9ff 	.word	0xfffff9ff
 8001688:	20000000 	.word	0x20000000
 800168c:	000f4240 	.word	0x000f4240

08001690 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001694:	4b03      	ldr	r3, [pc, #12]	@ (80016a4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	23e0      	movs	r3, #224	@ 0xe0
 800169a:	01db      	lsls	r3, r3, #7
 800169c:	4013      	ands	r3, r2
}
 800169e:	0018      	movs	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000

080016a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e2f3      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2201      	movs	r2, #1
 80016c0:	4013      	ands	r3, r2
 80016c2:	d100      	bne.n	80016c6 <HAL_RCC_OscConfig+0x1e>
 80016c4:	e07c      	b.n	80017c0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016c6:	4bc3      	ldr	r3, [pc, #780]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	2238      	movs	r2, #56	@ 0x38
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016d0:	4bc0      	ldr	r3, [pc, #768]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2203      	movs	r2, #3
 80016d6:	4013      	ands	r3, r2
 80016d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	2b10      	cmp	r3, #16
 80016de:	d102      	bne.n	80016e6 <HAL_RCC_OscConfig+0x3e>
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d002      	beq.n	80016ec <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	2b08      	cmp	r3, #8
 80016ea:	d10b      	bne.n	8001704 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ec:	4bb9      	ldr	r3, [pc, #740]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	029b      	lsls	r3, r3, #10
 80016f4:	4013      	ands	r3, r2
 80016f6:	d062      	beq.n	80017be <HAL_RCC_OscConfig+0x116>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d15e      	bne.n	80017be <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e2ce      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	2380      	movs	r3, #128	@ 0x80
 800170a:	025b      	lsls	r3, r3, #9
 800170c:	429a      	cmp	r2, r3
 800170e:	d107      	bne.n	8001720 <HAL_RCC_OscConfig+0x78>
 8001710:	4bb0      	ldr	r3, [pc, #704]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4baf      	ldr	r3, [pc, #700]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001716:	2180      	movs	r1, #128	@ 0x80
 8001718:	0249      	lsls	r1, r1, #9
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e020      	b.n	8001762 <HAL_RCC_OscConfig+0xba>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	23a0      	movs	r3, #160	@ 0xa0
 8001726:	02db      	lsls	r3, r3, #11
 8001728:	429a      	cmp	r2, r3
 800172a:	d10e      	bne.n	800174a <HAL_RCC_OscConfig+0xa2>
 800172c:	4ba9      	ldr	r3, [pc, #676]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4ba8      	ldr	r3, [pc, #672]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001732:	2180      	movs	r1, #128	@ 0x80
 8001734:	02c9      	lsls	r1, r1, #11
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	4ba6      	ldr	r3, [pc, #664]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4ba5      	ldr	r3, [pc, #660]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001740:	2180      	movs	r1, #128	@ 0x80
 8001742:	0249      	lsls	r1, r1, #9
 8001744:	430a      	orrs	r2, r1
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	e00b      	b.n	8001762 <HAL_RCC_OscConfig+0xba>
 800174a:	4ba2      	ldr	r3, [pc, #648]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4ba1      	ldr	r3, [pc, #644]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001750:	49a1      	ldr	r1, [pc, #644]	@ (80019d8 <HAL_RCC_OscConfig+0x330>)
 8001752:	400a      	ands	r2, r1
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	4b9f      	ldr	r3, [pc, #636]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4b9e      	ldr	r3, [pc, #632]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800175c:	499f      	ldr	r1, [pc, #636]	@ (80019dc <HAL_RCC_OscConfig+0x334>)
 800175e:	400a      	ands	r2, r1
 8001760:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d014      	beq.n	8001794 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff fc57 	bl	800101c <HAL_GetTick>
 800176e:	0003      	movs	r3, r0
 8001770:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001774:	f7ff fc52 	bl	800101c <HAL_GetTick>
 8001778:	0002      	movs	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b64      	cmp	r3, #100	@ 0x64
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e28d      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001786:	4b93      	ldr	r3, [pc, #588]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	2380      	movs	r3, #128	@ 0x80
 800178c:	029b      	lsls	r3, r3, #10
 800178e:	4013      	ands	r3, r2
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0xcc>
 8001792:	e015      	b.n	80017c0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fc42 	bl	800101c <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179e:	f7ff fc3d 	bl	800101c <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b64      	cmp	r3, #100	@ 0x64
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e278      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017b0:	4b88      	ldr	r3, [pc, #544]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2380      	movs	r3, #128	@ 0x80
 80017b6:	029b      	lsls	r3, r3, #10
 80017b8:	4013      	ands	r3, r2
 80017ba:	d1f0      	bne.n	800179e <HAL_RCC_OscConfig+0xf6>
 80017bc:	e000      	b.n	80017c0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017be:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2202      	movs	r2, #2
 80017c6:	4013      	ands	r3, r2
 80017c8:	d100      	bne.n	80017cc <HAL_RCC_OscConfig+0x124>
 80017ca:	e099      	b.n	8001900 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017cc:	4b81      	ldr	r3, [pc, #516]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2238      	movs	r2, #56	@ 0x38
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017d6:	4b7f      	ldr	r3, [pc, #508]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2203      	movs	r2, #3
 80017dc:	4013      	ands	r3, r2
 80017de:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	2b10      	cmp	r3, #16
 80017e4:	d102      	bne.n	80017ec <HAL_RCC_OscConfig+0x144>
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d002      	beq.n	80017f2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d135      	bne.n	800185e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f2:	4b78      	ldr	r3, [pc, #480]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	2380      	movs	r3, #128	@ 0x80
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4013      	ands	r3, r2
 80017fc:	d005      	beq.n	800180a <HAL_RCC_OscConfig+0x162>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e24b      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180a:	4b72      	ldr	r3, [pc, #456]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4a74      	ldr	r2, [pc, #464]	@ (80019e0 <HAL_RCC_OscConfig+0x338>)
 8001810:	4013      	ands	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	021a      	lsls	r2, r3, #8
 800181a:	4b6e      	ldr	r3, [pc, #440]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800181c:	430a      	orrs	r2, r1
 800181e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d112      	bne.n	800184c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001826:	4b6b      	ldr	r3, [pc, #428]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a6e      	ldr	r2, [pc, #440]	@ (80019e4 <HAL_RCC_OscConfig+0x33c>)
 800182c:	4013      	ands	r3, r2
 800182e:	0019      	movs	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	4b67      	ldr	r3, [pc, #412]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001836:	430a      	orrs	r2, r1
 8001838:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800183a:	4b66      	ldr	r3, [pc, #408]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	0adb      	lsrs	r3, r3, #11
 8001840:	2207      	movs	r2, #7
 8001842:	4013      	ands	r3, r2
 8001844:	4a68      	ldr	r2, [pc, #416]	@ (80019e8 <HAL_RCC_OscConfig+0x340>)
 8001846:	40da      	lsrs	r2, r3
 8001848:	4b68      	ldr	r3, [pc, #416]	@ (80019ec <HAL_RCC_OscConfig+0x344>)
 800184a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800184c:	4b68      	ldr	r3, [pc, #416]	@ (80019f0 <HAL_RCC_OscConfig+0x348>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	0018      	movs	r0, r3
 8001852:	f7ff fb87 	bl	8000f64 <HAL_InitTick>
 8001856:	1e03      	subs	r3, r0, #0
 8001858:	d051      	beq.n	80018fe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e221      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d030      	beq.n	80018c8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001866:	4b5b      	ldr	r3, [pc, #364]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a5e      	ldr	r2, [pc, #376]	@ (80019e4 <HAL_RCC_OscConfig+0x33c>)
 800186c:	4013      	ands	r3, r2
 800186e:	0019      	movs	r1, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	4b57      	ldr	r3, [pc, #348]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800187a:	4b56      	ldr	r3, [pc, #344]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b55      	ldr	r3, [pc, #340]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001880:	2180      	movs	r1, #128	@ 0x80
 8001882:	0049      	lsls	r1, r1, #1
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001888:	f7ff fbc8 	bl	800101c <HAL_GetTick>
 800188c:	0003      	movs	r3, r0
 800188e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001892:	f7ff fbc3 	bl	800101c <HAL_GetTick>
 8001896:	0002      	movs	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e1fe      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018a4:	4b4b      	ldr	r3, [pc, #300]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	2380      	movs	r3, #128	@ 0x80
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	4013      	ands	r3, r2
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b0:	4b48      	ldr	r3, [pc, #288]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4a4a      	ldr	r2, [pc, #296]	@ (80019e0 <HAL_RCC_OscConfig+0x338>)
 80018b6:	4013      	ands	r3, r2
 80018b8:	0019      	movs	r1, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	021a      	lsls	r2, r3, #8
 80018c0:	4b44      	ldr	r3, [pc, #272]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80018c2:	430a      	orrs	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	e01b      	b.n	8001900 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80018c8:	4b42      	ldr	r3, [pc, #264]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b41      	ldr	r3, [pc, #260]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80018ce:	4949      	ldr	r1, [pc, #292]	@ (80019f4 <HAL_RCC_OscConfig+0x34c>)
 80018d0:	400a      	ands	r2, r1
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff fba2 	bl	800101c <HAL_GetTick>
 80018d8:	0003      	movs	r3, r0
 80018da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018de:	f7ff fb9d 	bl	800101c <HAL_GetTick>
 80018e2:	0002      	movs	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e1d8      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f0:	4b38      	ldr	r3, [pc, #224]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2380      	movs	r3, #128	@ 0x80
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4013      	ands	r3, r2
 80018fa:	d1f0      	bne.n	80018de <HAL_RCC_OscConfig+0x236>
 80018fc:	e000      	b.n	8001900 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018fe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2208      	movs	r2, #8
 8001906:	4013      	ands	r3, r2
 8001908:	d047      	beq.n	800199a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800190a:	4b32      	ldr	r3, [pc, #200]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2238      	movs	r2, #56	@ 0x38
 8001910:	4013      	ands	r3, r2
 8001912:	2b18      	cmp	r3, #24
 8001914:	d10a      	bne.n	800192c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001916:	4b2f      	ldr	r3, [pc, #188]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800191a:	2202      	movs	r2, #2
 800191c:	4013      	ands	r3, r2
 800191e:	d03c      	beq.n	800199a <HAL_RCC_OscConfig+0x2f2>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d138      	bne.n	800199a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e1ba      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d019      	beq.n	8001968 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001934:	4b27      	ldr	r3, [pc, #156]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001936:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001938:	4b26      	ldr	r3, [pc, #152]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800193a:	2101      	movs	r1, #1
 800193c:	430a      	orrs	r2, r1
 800193e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff fb6c 	bl	800101c <HAL_GetTick>
 8001944:	0003      	movs	r3, r0
 8001946:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194a:	f7ff fb67 	bl	800101c <HAL_GetTick>
 800194e:	0002      	movs	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e1a2      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800195c:	4b1d      	ldr	r3, [pc, #116]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800195e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001960:	2202      	movs	r2, #2
 8001962:	4013      	ands	r3, r2
 8001964:	d0f1      	beq.n	800194a <HAL_RCC_OscConfig+0x2a2>
 8001966:	e018      	b.n	800199a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001968:	4b1a      	ldr	r3, [pc, #104]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800196a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800196c:	4b19      	ldr	r3, [pc, #100]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 800196e:	2101      	movs	r1, #1
 8001970:	438a      	bics	r2, r1
 8001972:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff fb52 	bl	800101c <HAL_GetTick>
 8001978:	0003      	movs	r3, r0
 800197a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197e:	f7ff fb4d 	bl	800101c <HAL_GetTick>
 8001982:	0002      	movs	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e188      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001990:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 8001992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001994:	2202      	movs	r2, #2
 8001996:	4013      	ands	r3, r2
 8001998:	d1f1      	bne.n	800197e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2204      	movs	r2, #4
 80019a0:	4013      	ands	r3, r2
 80019a2:	d100      	bne.n	80019a6 <HAL_RCC_OscConfig+0x2fe>
 80019a4:	e0c6      	b.n	8001b34 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a6:	231f      	movs	r3, #31
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019ae:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2238      	movs	r2, #56	@ 0x38
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b20      	cmp	r3, #32
 80019b8:	d11e      	bne.n	80019f8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80019ba:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_RCC_OscConfig+0x32c>)
 80019bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019be:	2202      	movs	r2, #2
 80019c0:	4013      	ands	r3, r2
 80019c2:	d100      	bne.n	80019c6 <HAL_RCC_OscConfig+0x31e>
 80019c4:	e0b6      	b.n	8001b34 <HAL_RCC_OscConfig+0x48c>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d000      	beq.n	80019d0 <HAL_RCC_OscConfig+0x328>
 80019ce:	e0b1      	b.n	8001b34 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e166      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
 80019d4:	40021000 	.word	0x40021000
 80019d8:	fffeffff 	.word	0xfffeffff
 80019dc:	fffbffff 	.word	0xfffbffff
 80019e0:	ffff80ff 	.word	0xffff80ff
 80019e4:	ffffc7ff 	.word	0xffffc7ff
 80019e8:	00f42400 	.word	0x00f42400
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000004 	.word	0x20000004
 80019f4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019f8:	4bac      	ldr	r3, [pc, #688]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 80019fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	055b      	lsls	r3, r3, #21
 8001a00:	4013      	ands	r3, r2
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_OscConfig+0x360>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <HAL_RCC_OscConfig+0x362>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d011      	beq.n	8001a32 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	4ba7      	ldr	r3, [pc, #668]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001a10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a12:	4ba6      	ldr	r3, [pc, #664]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001a14:	2180      	movs	r1, #128	@ 0x80
 8001a16:	0549      	lsls	r1, r1, #21
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a1c:	4ba3      	ldr	r3, [pc, #652]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001a1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a20:	2380      	movs	r3, #128	@ 0x80
 8001a22:	055b      	lsls	r3, r3, #21
 8001a24:	4013      	ands	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a2a:	231f      	movs	r3, #31
 8001a2c:	18fb      	adds	r3, r7, r3
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a32:	4b9f      	ldr	r3, [pc, #636]	@ (8001cb0 <HAL_RCC_OscConfig+0x608>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	2380      	movs	r3, #128	@ 0x80
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d11a      	bne.n	8001a74 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a3e:	4b9c      	ldr	r3, [pc, #624]	@ (8001cb0 <HAL_RCC_OscConfig+0x608>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4b9b      	ldr	r3, [pc, #620]	@ (8001cb0 <HAL_RCC_OscConfig+0x608>)
 8001a44:	2180      	movs	r1, #128	@ 0x80
 8001a46:	0049      	lsls	r1, r1, #1
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fae6 	bl	800101c <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a56:	f7ff fae1 	bl	800101c <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e11c      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a68:	4b91      	ldr	r3, [pc, #580]	@ (8001cb0 <HAL_RCC_OscConfig+0x608>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2380      	movs	r3, #128	@ 0x80
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4013      	ands	r3, r2
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d106      	bne.n	8001a8a <HAL_RCC_OscConfig+0x3e2>
 8001a7c:	4b8b      	ldr	r3, [pc, #556]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001a7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a80:	4b8a      	ldr	r3, [pc, #552]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001a82:	2101      	movs	r1, #1
 8001a84:	430a      	orrs	r2, r1
 8001a86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a88:	e01c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x41c>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b05      	cmp	r3, #5
 8001a90:	d10c      	bne.n	8001aac <HAL_RCC_OscConfig+0x404>
 8001a92:	4b86      	ldr	r3, [pc, #536]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001a94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a96:	4b85      	ldr	r3, [pc, #532]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001a98:	2104      	movs	r1, #4
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a9e:	4b83      	ldr	r3, [pc, #524]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001aa0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001aa2:	4b82      	ldr	r3, [pc, #520]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001aaa:	e00b      	b.n	8001ac4 <HAL_RCC_OscConfig+0x41c>
 8001aac:	4b7f      	ldr	r3, [pc, #508]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001aae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ab0:	4b7e      	ldr	r3, [pc, #504]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	438a      	bics	r2, r1
 8001ab6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ab8:	4b7c      	ldr	r3, [pc, #496]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001aba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001abc:	4b7b      	ldr	r3, [pc, #492]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001abe:	2104      	movs	r1, #4
 8001ac0:	438a      	bics	r2, r1
 8001ac2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d014      	beq.n	8001af6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001acc:	f7ff faa6 	bl	800101c <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad4:	e009      	b.n	8001aea <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad6:	f7ff faa1 	bl	800101c <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	4a74      	ldr	r2, [pc, #464]	@ (8001cb4 <HAL_RCC_OscConfig+0x60c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e0db      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aea:	4b70      	ldr	r3, [pc, #448]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aee:	2202      	movs	r2, #2
 8001af0:	4013      	ands	r3, r2
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x42e>
 8001af4:	e013      	b.n	8001b1e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff fa91 	bl	800101c <HAL_GetTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001afe:	e009      	b.n	8001b14 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b00:	f7ff fa8c 	bl	800101c <HAL_GetTick>
 8001b04:	0002      	movs	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	4a6a      	ldr	r2, [pc, #424]	@ (8001cb4 <HAL_RCC_OscConfig+0x60c>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e0c6      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b14:	4b65      	ldr	r3, [pc, #404]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b18:	2202      	movs	r2, #2
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d1f0      	bne.n	8001b00 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b1e:	231f      	movs	r3, #31
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d105      	bne.n	8001b34 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b28:	4b60      	ldr	r3, [pc, #384]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001b2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b2c:	4b5f      	ldr	r3, [pc, #380]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001b2e:	4962      	ldr	r1, [pc, #392]	@ (8001cb8 <HAL_RCC_OscConfig+0x610>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d100      	bne.n	8001b3e <HAL_RCC_OscConfig+0x496>
 8001b3c:	e0b0      	b.n	8001ca0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2238      	movs	r2, #56	@ 0x38
 8001b44:	4013      	ands	r3, r2
 8001b46:	2b10      	cmp	r3, #16
 8001b48:	d100      	bne.n	8001b4c <HAL_RCC_OscConfig+0x4a4>
 8001b4a:	e078      	b.n	8001c3e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	69db      	ldr	r3, [r3, #28]
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d153      	bne.n	8001bfc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b54:	4b55      	ldr	r3, [pc, #340]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b54      	ldr	r3, [pc, #336]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001b5a:	4958      	ldr	r1, [pc, #352]	@ (8001cbc <HAL_RCC_OscConfig+0x614>)
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7ff fa5c 	bl	800101c <HAL_GetTick>
 8001b64:	0003      	movs	r3, r0
 8001b66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7ff fa57 	bl	800101c <HAL_GetTick>
 8001b6e:	0002      	movs	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e092      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	2380      	movs	r3, #128	@ 0x80
 8001b82:	049b      	lsls	r3, r3, #18
 8001b84:	4013      	ands	r3, r2
 8001b86:	d1f0      	bne.n	8001b6a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b88:	4b48      	ldr	r3, [pc, #288]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4a4c      	ldr	r2, [pc, #304]	@ (8001cc0 <HAL_RCC_OscConfig+0x618>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1a      	ldr	r2, [r3, #32]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba8:	431a      	orrs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	4b3e      	ldr	r3, [pc, #248]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb6:	4b3d      	ldr	r3, [pc, #244]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b3c      	ldr	r3, [pc, #240]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001bbc:	2180      	movs	r1, #128	@ 0x80
 8001bbe:	0449      	lsls	r1, r1, #17
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001bc4:	4b39      	ldr	r3, [pc, #228]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	4b38      	ldr	r3, [pc, #224]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001bca:	2180      	movs	r1, #128	@ 0x80
 8001bcc:	0549      	lsls	r1, r1, #21
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff fa23 	bl	800101c <HAL_GetTick>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff fa1e 	bl	800101c <HAL_GetTick>
 8001be0:	0002      	movs	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e059      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bee:	4b2f      	ldr	r3, [pc, #188]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	2380      	movs	r3, #128	@ 0x80
 8001bf4:	049b      	lsls	r3, r3, #18
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x534>
 8001bfa:	e051      	b.n	8001ca0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfc:	4b2b      	ldr	r3, [pc, #172]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b2a      	ldr	r3, [pc, #168]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001c02:	492e      	ldr	r1, [pc, #184]	@ (8001cbc <HAL_RCC_OscConfig+0x614>)
 8001c04:	400a      	ands	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff fa08 	bl	800101c <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c12:	f7ff fa03 	bl	800101c <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e03e      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c24:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	@ 0x80
 8001c2a:	049b      	lsls	r3, r3, #18
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d1f0      	bne.n	8001c12 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001c30:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001c36:	4923      	ldr	r1, [pc, #140]	@ (8001cc4 <HAL_RCC_OscConfig+0x61c>)
 8001c38:	400a      	ands	r2, r1
 8001c3a:	60da      	str	r2, [r3, #12]
 8001c3c:	e030      	b.n	8001ca0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e02b      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001c4a:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <HAL_RCC_OscConfig+0x604>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2203      	movs	r2, #3
 8001c54:	401a      	ands	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d11e      	bne.n	8001c9c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	2270      	movs	r2, #112	@ 0x70
 8001c62:	401a      	ands	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d117      	bne.n	8001c9c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	23fe      	movs	r3, #254	@ 0xfe
 8001c70:	01db      	lsls	r3, r3, #7
 8001c72:	401a      	ands	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c78:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d10e      	bne.n	8001c9c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	23f8      	movs	r3, #248	@ 0xf8
 8001c82:	039b      	lsls	r3, r3, #14
 8001c84:	401a      	ands	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d106      	bne.n	8001c9c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	0f5b      	lsrs	r3, r3, #29
 8001c92:	075a      	lsls	r2, r3, #29
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b008      	add	sp, #32
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			@ (mov r8, r8)
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	00001388 	.word	0x00001388
 8001cb8:	efffffff 	.word	0xefffffff
 8001cbc:	feffffff 	.word	0xfeffffff
 8001cc0:	1fc1808c 	.word	0x1fc1808c
 8001cc4:	effefffc 	.word	0xeffefffc

08001cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0e9      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b76      	ldr	r3, [pc, #472]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2207      	movs	r2, #7
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d91e      	bls.n	8001d28 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b73      	ldr	r3, [pc, #460]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2207      	movs	r2, #7
 8001cf0:	4393      	bics	r3, r2
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	4b70      	ldr	r3, [pc, #448]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cfc:	f7ff f98e 	bl	800101c <HAL_GetTick>
 8001d00:	0003      	movs	r3, r0
 8001d02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d04:	e009      	b.n	8001d1a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d06:	f7ff f989 	bl	800101c <HAL_GetTick>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	4a6a      	ldr	r2, [pc, #424]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e0ca      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d1a:	4b67      	ldr	r3, [pc, #412]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2207      	movs	r2, #7
 8001d20:	4013      	ands	r3, r2
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d1ee      	bne.n	8001d06 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d015      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2204      	movs	r2, #4
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d006      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d3c:	4b60      	ldr	r3, [pc, #384]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	4b5f      	ldr	r3, [pc, #380]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d42:	21e0      	movs	r1, #224	@ 0xe0
 8001d44:	01c9      	lsls	r1, r1, #7
 8001d46:	430a      	orrs	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	4a5d      	ldr	r2, [pc, #372]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1fc>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	4b59      	ldr	r3, [pc, #356]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2201      	movs	r2, #1
 8001d64:	4013      	ands	r3, r2
 8001d66:	d057      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d107      	bne.n	8001d80 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d70:	4b53      	ldr	r3, [pc, #332]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2380      	movs	r3, #128	@ 0x80
 8001d76:	029b      	lsls	r3, r3, #10
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d12b      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e097      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d107      	bne.n	8001d98 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d88:	4b4d      	ldr	r3, [pc, #308]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	@ 0x80
 8001d8e:	049b      	lsls	r3, r3, #18
 8001d90:	4013      	ands	r3, r2
 8001d92:	d11f      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e08b      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d107      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001da0:	4b47      	ldr	r3, [pc, #284]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2380      	movs	r3, #128	@ 0x80
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4013      	ands	r3, r2
 8001daa:	d113      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e07f      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d106      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001db8:	4b41      	ldr	r3, [pc, #260]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d108      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e074      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dca:	2202      	movs	r2, #2
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e06d      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2207      	movs	r2, #7
 8001dda:	4393      	bics	r3, r2
 8001ddc:	0019      	movs	r1, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	4b37      	ldr	r3, [pc, #220]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001de4:	430a      	orrs	r2, r1
 8001de6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de8:	f7ff f918 	bl	800101c <HAL_GetTick>
 8001dec:	0003      	movs	r3, r0
 8001dee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df0:	e009      	b.n	8001e06 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df2:	f7ff f913 	bl	800101c <HAL_GetTick>
 8001df6:	0002      	movs	r2, r0
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	4a2f      	ldr	r2, [pc, #188]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f4>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e054      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2238      	movs	r2, #56	@ 0x38
 8001e0c:	401a      	ands	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d1ec      	bne.n	8001df2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e18:	4b27      	ldr	r3, [pc, #156]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	4013      	ands	r3, r2
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d21e      	bcs.n	8001e64 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b24      	ldr	r3, [pc, #144]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2207      	movs	r2, #7
 8001e2c:	4393      	bics	r3, r2
 8001e2e:	0019      	movs	r1, r3
 8001e30:	4b21      	ldr	r3, [pc, #132]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e38:	f7ff f8f0 	bl	800101c <HAL_GetTick>
 8001e3c:	0003      	movs	r3, r0
 8001e3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e40:	e009      	b.n	8001e56 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e42:	f7ff f8eb 	bl	800101c <HAL_GetTick>
 8001e46:	0002      	movs	r2, r0
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ebc <HAL_RCC_ClockConfig+0x1f4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e02c      	b.n	8001eb0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e56:	4b18      	ldr	r3, [pc, #96]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d1ee      	bne.n	8001e42 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e6e:	4b14      	ldr	r3, [pc, #80]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	4a15      	ldr	r2, [pc, #84]	@ (8001ec8 <HAL_RCC_ClockConfig+0x200>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	0019      	movs	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e82:	f000 f829 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8001e86:	0001      	movs	r1, r0
 8001e88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	220f      	movs	r2, #15
 8001e90:	401a      	ands	r2, r3
 8001e92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ecc <HAL_RCC_ClockConfig+0x204>)
 8001e94:	0092      	lsls	r2, r2, #2
 8001e96:	58d3      	ldr	r3, [r2, r3]
 8001e98:	221f      	movs	r2, #31
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	000a      	movs	r2, r1
 8001e9e:	40da      	lsrs	r2, r3
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed0 <HAL_RCC_ClockConfig+0x208>)
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed4 <HAL_RCC_ClockConfig+0x20c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f7ff f85b 	bl	8000f64 <HAL_InitTick>
 8001eae:	0003      	movs	r3, r0
}
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b004      	add	sp, #16
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40022000 	.word	0x40022000
 8001ebc:	00001388 	.word	0x00001388
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	fffff0ff 	.word	0xfffff0ff
 8001ec8:	ffff8fff 	.word	0xffff8fff
 8001ecc:	08005b58 	.word	0x08005b58
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000004 	.word	0x20000004

08001ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ede:	4b3c      	ldr	r3, [pc, #240]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2238      	movs	r2, #56	@ 0x38
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d10f      	bne.n	8001f08 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001ee8:	4b39      	ldr	r3, [pc, #228]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	0adb      	lsrs	r3, r3, #11
 8001eee:	2207      	movs	r2, #7
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	0013      	movs	r3, r2
 8001ef8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001efa:	6839      	ldr	r1, [r7, #0]
 8001efc:	4835      	ldr	r0, [pc, #212]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001efe:	f7fe f909 	bl	8000114 <__udivsi3>
 8001f02:	0003      	movs	r3, r0
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	e05d      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f08:	4b31      	ldr	r3, [pc, #196]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2238      	movs	r2, #56	@ 0x38
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d102      	bne.n	8001f1a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f14:	4b30      	ldr	r3, [pc, #192]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	e054      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2238      	movs	r2, #56	@ 0x38
 8001f20:	4013      	ands	r3, r2
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d138      	bne.n	8001f98 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f26:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f30:	4b27      	ldr	r3, [pc, #156]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	2207      	movs	r2, #7
 8001f38:	4013      	ands	r3, r2
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d10d      	bne.n	8001f60 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	4824      	ldr	r0, [pc, #144]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f48:	f7fe f8e4 	bl	8000114 <__udivsi3>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	0019      	movs	r1, r3
 8001f50:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	227f      	movs	r2, #127	@ 0x7f
 8001f58:	4013      	ands	r3, r2
 8001f5a:	434b      	muls	r3, r1
 8001f5c:	617b      	str	r3, [r7, #20]
        break;
 8001f5e:	e00d      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	481c      	ldr	r0, [pc, #112]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f64:	f7fe f8d6 	bl	8000114 <__udivsi3>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	4b18      	ldr	r3, [pc, #96]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	227f      	movs	r2, #127	@ 0x7f
 8001f74:	4013      	ands	r3, r2
 8001f76:	434b      	muls	r3, r1
 8001f78:	617b      	str	r3, [r7, #20]
        break;
 8001f7a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f7c:	4b14      	ldr	r3, [pc, #80]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0f5b      	lsrs	r3, r3, #29
 8001f82:	2207      	movs	r2, #7
 8001f84:	4013      	ands	r3, r2
 8001f86:	3301      	adds	r3, #1
 8001f88:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	6978      	ldr	r0, [r7, #20]
 8001f8e:	f7fe f8c1 	bl	8000114 <__udivsi3>
 8001f92:	0003      	movs	r3, r0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	e015      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f98:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2238      	movs	r2, #56	@ 0x38
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b20      	cmp	r3, #32
 8001fa2:	d103      	bne.n	8001fac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001fa4:	2380      	movs	r3, #128	@ 0x80
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	e00b      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001fac:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2238      	movs	r2, #56	@ 0x38
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b18      	cmp	r3, #24
 8001fb6:	d103      	bne.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001fb8:	23fa      	movs	r3, #250	@ 0xfa
 8001fba:	01db      	lsls	r3, r3, #7
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	e001      	b.n	8001fc4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001fc4:	693b      	ldr	r3, [r7, #16]
}
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b006      	add	sp, #24
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	00f42400 	.word	0x00f42400
 8001fd8:	007a1200 	.word	0x007a1200

08001fdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe0:	4b02      	ldr	r3, [pc, #8]	@ (8001fec <HAL_RCC_GetHCLKFreq+0x10>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	20000000 	.word	0x20000000

08001ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff0:	b5b0      	push	{r4, r5, r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ff4:	f7ff fff2 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8001ff8:	0004      	movs	r4, r0
 8001ffa:	f7ff fb49 	bl	8001690 <LL_RCC_GetAPB1Prescaler>
 8001ffe:	0003      	movs	r3, r0
 8002000:	0b1a      	lsrs	r2, r3, #12
 8002002:	4b05      	ldr	r3, [pc, #20]	@ (8002018 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002004:	0092      	lsls	r2, r2, #2
 8002006:	58d3      	ldr	r3, [r2, r3]
 8002008:	221f      	movs	r2, #31
 800200a:	4013      	ands	r3, r2
 800200c:	40dc      	lsrs	r4, r3
 800200e:	0023      	movs	r3, r4
}
 8002010:	0018      	movs	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	bdb0      	pop	{r4, r5, r7, pc}
 8002016:	46c0      	nop			@ (mov r8, r8)
 8002018:	08005b98 	.word	0x08005b98

0800201c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002024:	2313      	movs	r3, #19
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800202c:	2312      	movs	r3, #18
 800202e:	18fb      	adds	r3, r7, r3
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	2380      	movs	r3, #128	@ 0x80
 800203a:	029b      	lsls	r3, r3, #10
 800203c:	4013      	ands	r3, r2
 800203e:	d100      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002040:	e0a3      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002042:	2011      	movs	r0, #17
 8002044:	183b      	adds	r3, r7, r0
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204a:	4b86      	ldr	r3, [pc, #536]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800204c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800204e:	2380      	movs	r3, #128	@ 0x80
 8002050:	055b      	lsls	r3, r3, #21
 8002052:	4013      	ands	r3, r2
 8002054:	d110      	bne.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002056:	4b83      	ldr	r3, [pc, #524]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002058:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800205a:	4b82      	ldr	r3, [pc, #520]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800205c:	2180      	movs	r1, #128	@ 0x80
 800205e:	0549      	lsls	r1, r1, #21
 8002060:	430a      	orrs	r2, r1
 8002062:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002064:	4b7f      	ldr	r3, [pc, #508]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002066:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002068:	2380      	movs	r3, #128	@ 0x80
 800206a:	055b      	lsls	r3, r3, #21
 800206c:	4013      	ands	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002072:	183b      	adds	r3, r7, r0
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002078:	4b7b      	ldr	r3, [pc, #492]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b7a      	ldr	r3, [pc, #488]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800207e:	2180      	movs	r1, #128	@ 0x80
 8002080:	0049      	lsls	r1, r1, #1
 8002082:	430a      	orrs	r2, r1
 8002084:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002086:	f7fe ffc9 	bl	800101c <HAL_GetTick>
 800208a:	0003      	movs	r3, r0
 800208c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800208e:	e00b      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002090:	f7fe ffc4 	bl	800101c <HAL_GetTick>
 8002094:	0002      	movs	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d904      	bls.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800209e:	2313      	movs	r3, #19
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	2203      	movs	r2, #3
 80020a4:	701a      	strb	r2, [r3, #0]
        break;
 80020a6:	e005      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	2380      	movs	r3, #128	@ 0x80
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4013      	ands	r3, r2
 80020b2:	d0ed      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80020b4:	2313      	movs	r3, #19
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d154      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020be:	4b69      	ldr	r3, [pc, #420]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020c0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020c2:	23c0      	movs	r3, #192	@ 0xc0
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4013      	ands	r3, r2
 80020c8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d019      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d014      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020da:	4b62      	ldr	r3, [pc, #392]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020de:	4a63      	ldr	r2, [pc, #396]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80020e0:	4013      	ands	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020e4:	4b5f      	ldr	r3, [pc, #380]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020e8:	4b5e      	ldr	r3, [pc, #376]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020ea:	2180      	movs	r1, #128	@ 0x80
 80020ec:	0249      	lsls	r1, r1, #9
 80020ee:	430a      	orrs	r2, r1
 80020f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80020f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80020f8:	495d      	ldr	r1, [pc, #372]	@ (8002270 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80020fa:	400a      	ands	r2, r1
 80020fc:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020fe:	4b59      	ldr	r3, [pc, #356]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	2201      	movs	r2, #1
 8002108:	4013      	ands	r3, r2
 800210a:	d016      	beq.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7fe ff86 	bl	800101c <HAL_GetTick>
 8002110:	0003      	movs	r3, r0
 8002112:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002114:	e00c      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002116:	f7fe ff81 	bl	800101c <HAL_GetTick>
 800211a:	0002      	movs	r2, r0
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	4a54      	ldr	r2, [pc, #336]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d904      	bls.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002126:	2313      	movs	r3, #19
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	2203      	movs	r2, #3
 800212c:	701a      	strb	r2, [r3, #0]
            break;
 800212e:	e004      	b.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002130:	4b4c      	ldr	r3, [pc, #304]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002134:	2202      	movs	r2, #2
 8002136:	4013      	ands	r3, r2
 8002138:	d0ed      	beq.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800213a:	2313      	movs	r3, #19
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10a      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002144:	4b47      	ldr	r3, [pc, #284]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002148:	4a48      	ldr	r2, [pc, #288]	@ (800226c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800214a:	4013      	ands	r3, r2
 800214c:	0019      	movs	r1, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699a      	ldr	r2, [r3, #24]
 8002152:	4b44      	ldr	r3, [pc, #272]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002154:	430a      	orrs	r2, r1
 8002156:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002158:	e00c      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800215a:	2312      	movs	r3, #18
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	2213      	movs	r2, #19
 8002160:	18ba      	adds	r2, r7, r2
 8002162:	7812      	ldrb	r2, [r2, #0]
 8002164:	701a      	strb	r2, [r3, #0]
 8002166:	e005      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002168:	2312      	movs	r3, #18
 800216a:	18fb      	adds	r3, r7, r3
 800216c:	2213      	movs	r2, #19
 800216e:	18ba      	adds	r2, r7, r2
 8002170:	7812      	ldrb	r2, [r2, #0]
 8002172:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002174:	2311      	movs	r3, #17
 8002176:	18fb      	adds	r3, r7, r3
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d105      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217e:	4b39      	ldr	r3, [pc, #228]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002180:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002182:	4b38      	ldr	r3, [pc, #224]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002184:	493c      	ldr	r1, [pc, #240]	@ (8002278 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002186:	400a      	ands	r2, r1
 8002188:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2201      	movs	r2, #1
 8002190:	4013      	ands	r3, r2
 8002192:	d009      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002194:	4b33      	ldr	r3, [pc, #204]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002198:	2203      	movs	r2, #3
 800219a:	4393      	bics	r3, r2
 800219c:	0019      	movs	r1, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	4b30      	ldr	r3, [pc, #192]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021a4:	430a      	orrs	r2, r1
 80021a6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2202      	movs	r2, #2
 80021ae:	4013      	ands	r3, r2
 80021b0:	d009      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b6:	220c      	movs	r2, #12
 80021b8:	4393      	bics	r3, r2
 80021ba:	0019      	movs	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	4b28      	ldr	r3, [pc, #160]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021c2:	430a      	orrs	r2, r1
 80021c4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2220      	movs	r2, #32
 80021cc:	4013      	ands	r3, r2
 80021ce:	d009      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021d0:	4b24      	ldr	r3, [pc, #144]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d4:	4a29      	ldr	r2, [pc, #164]	@ (800227c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	0019      	movs	r1, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	4b21      	ldr	r3, [pc, #132]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021e0:	430a      	orrs	r2, r1
 80021e2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	2380      	movs	r3, #128	@ 0x80
 80021ea:	01db      	lsls	r3, r3, #7
 80021ec:	4013      	ands	r3, r2
 80021ee:	d015      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	0899      	lsrs	r1, r3, #2
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	695a      	ldr	r2, [r3, #20]
 80021fc:	4b19      	ldr	r3, [pc, #100]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80021fe:	430a      	orrs	r2, r1
 8002200:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	2380      	movs	r3, #128	@ 0x80
 8002208:	05db      	lsls	r3, r3, #23
 800220a:	429a      	cmp	r2, r3
 800220c:	d106      	bne.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800220e:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	4b14      	ldr	r3, [pc, #80]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002214:	2180      	movs	r1, #128	@ 0x80
 8002216:	0249      	lsls	r1, r1, #9
 8002218:	430a      	orrs	r2, r1
 800221a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	2380      	movs	r3, #128	@ 0x80
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	4013      	ands	r3, r2
 8002226:	d016      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002228:	4b0e      	ldr	r3, [pc, #56]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800222a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800222c:	4a14      	ldr	r2, [pc, #80]	@ (8002280 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800222e:	4013      	ands	r3, r2
 8002230:	0019      	movs	r1, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002238:	430a      	orrs	r2, r1
 800223a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	2380      	movs	r3, #128	@ 0x80
 8002242:	01db      	lsls	r3, r3, #7
 8002244:	429a      	cmp	r2, r3
 8002246:	d106      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	4b05      	ldr	r3, [pc, #20]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800224e:	2180      	movs	r1, #128	@ 0x80
 8002250:	0249      	lsls	r1, r1, #9
 8002252:	430a      	orrs	r2, r1
 8002254:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002256:	2312      	movs	r3, #18
 8002258:	18fb      	adds	r3, r7, r3
 800225a:	781b      	ldrb	r3, [r3, #0]
}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	b006      	add	sp, #24
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	40007000 	.word	0x40007000
 800226c:	fffffcff 	.word	0xfffffcff
 8002270:	fffeffff 	.word	0xfffeffff
 8002274:	00001388 	.word	0x00001388
 8002278:	efffffff 	.word	0xefffffff
 800227c:	ffffcfff 	.word	0xffffcfff
 8002280:	ffff3fff 	.word	0xffff3fff

08002284 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0a8      	b.n	80023e8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	2382      	movs	r3, #130	@ 0x82
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d009      	beq.n	80022be <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	61da      	str	r2, [r3, #28]
 80022b0:	e005      	b.n	80022be <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	225d      	movs	r2, #93	@ 0x5d
 80022c8:	5c9b      	ldrb	r3, [r3, r2]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d107      	bne.n	80022e0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	225c      	movs	r2, #92	@ 0x5c
 80022d4:	2100      	movs	r1, #0
 80022d6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	0018      	movs	r0, r3
 80022dc:	f7fe fc7c 	bl	8000bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	225d      	movs	r2, #93	@ 0x5d
 80022e4:	2102      	movs	r1, #2
 80022e6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2140      	movs	r1, #64	@ 0x40
 80022f4:	438a      	bics	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	23e0      	movs	r3, #224	@ 0xe0
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	429a      	cmp	r2, r3
 8002302:	d902      	bls.n	800230a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	e002      	b.n	8002310 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800230a:	2380      	movs	r3, #128	@ 0x80
 800230c:	015b      	lsls	r3, r3, #5
 800230e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	23f0      	movs	r3, #240	@ 0xf0
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	429a      	cmp	r2, r3
 800231a:	d008      	beq.n	800232e <HAL_SPI_Init+0xaa>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	23e0      	movs	r3, #224	@ 0xe0
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	429a      	cmp	r2, r3
 8002326:	d002      	beq.n	800232e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	2382      	movs	r3, #130	@ 0x82
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	401a      	ands	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6899      	ldr	r1, [r3, #8]
 800233c:	2384      	movs	r3, #132	@ 0x84
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	400b      	ands	r3, r1
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	2102      	movs	r1, #2
 800234a:	400b      	ands	r3, r1
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	2101      	movs	r1, #1
 8002354:	400b      	ands	r3, r1
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6999      	ldr	r1, [r3, #24]
 800235c:	2380      	movs	r3, #128	@ 0x80
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	400b      	ands	r3, r1
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	2138      	movs	r1, #56	@ 0x38
 800236a:	400b      	ands	r3, r1
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	2180      	movs	r1, #128	@ 0x80
 8002374:	400b      	ands	r3, r1
 8002376:	431a      	orrs	r2, r3
 8002378:	0011      	movs	r1, r2
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800237e:	2380      	movs	r3, #128	@ 0x80
 8002380:	019b      	lsls	r3, r3, #6
 8002382:	401a      	ands	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	0c1b      	lsrs	r3, r3, #16
 8002392:	2204      	movs	r2, #4
 8002394:	401a      	ands	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	2110      	movs	r1, #16
 800239c:	400b      	ands	r3, r1
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a4:	2108      	movs	r1, #8
 80023a6:	400b      	ands	r3, r1
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68d9      	ldr	r1, [r3, #12]
 80023ae:	23f0      	movs	r3, #240	@ 0xf0
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	400b      	ands	r3, r1
 80023b4:	431a      	orrs	r2, r3
 80023b6:	0011      	movs	r1, r2
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	2380      	movs	r3, #128	@ 0x80
 80023bc:	015b      	lsls	r3, r3, #5
 80023be:	401a      	ands	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	69da      	ldr	r2, [r3, #28]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4907      	ldr	r1, [pc, #28]	@ (80023f0 <HAL_SPI_Init+0x16c>)
 80023d4:	400a      	ands	r2, r1
 80023d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	225d      	movs	r2, #93	@ 0x5d
 80023e2:	2101      	movs	r1, #1
 80023e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b004      	add	sp, #16
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	fffff7ff 	.word	0xfffff7ff

080023f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	@ 0x28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
 8002400:	001a      	movs	r2, r3
 8002402:	1cbb      	adds	r3, r7, #2
 8002404:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002406:	2301      	movs	r3, #1
 8002408:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800240a:	2323      	movs	r3, #35	@ 0x23
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	225c      	movs	r2, #92	@ 0x5c
 8002416:	5c9b      	ldrb	r3, [r3, r2]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_SPI_TransmitReceive+0x2c>
 800241c:	2302      	movs	r3, #2
 800241e:	e1c4      	b.n	80027aa <HAL_SPI_TransmitReceive+0x3b6>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	225c      	movs	r2, #92	@ 0x5c
 8002424:	2101      	movs	r1, #1
 8002426:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002428:	f7fe fdf8 	bl	800101c <HAL_GetTick>
 800242c:	0003      	movs	r3, r0
 800242e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002430:	201b      	movs	r0, #27
 8002432:	183b      	adds	r3, r7, r0
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	215d      	movs	r1, #93	@ 0x5d
 8002438:	5c52      	ldrb	r2, [r2, r1]
 800243a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002442:	2312      	movs	r3, #18
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	1cba      	adds	r2, r7, #2
 8002448:	8812      	ldrh	r2, [r2, #0]
 800244a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800244c:	183b      	adds	r3, r7, r0
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d011      	beq.n	8002478 <HAL_SPI_TransmitReceive+0x84>
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	2382      	movs	r3, #130	@ 0x82
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	429a      	cmp	r2, r3
 800245c:	d107      	bne.n	800246e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <HAL_SPI_TransmitReceive+0x7a>
 8002466:	183b      	adds	r3, r7, r0
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b04      	cmp	r3, #4
 800246c:	d004      	beq.n	8002478 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800246e:	2323      	movs	r3, #35	@ 0x23
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	2202      	movs	r2, #2
 8002474:	701a      	strb	r2, [r3, #0]
    goto error;
 8002476:	e191      	b.n	800279c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d006      	beq.n	800248c <HAL_SPI_TransmitReceive+0x98>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_SPI_TransmitReceive+0x98>
 8002484:	1cbb      	adds	r3, r7, #2
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d104      	bne.n	8002496 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800248c:	2323      	movs	r3, #35	@ 0x23
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
    goto error;
 8002494:	e182      	b.n	800279c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	225d      	movs	r2, #93	@ 0x5d
 800249a:	5c9b      	ldrb	r3, [r3, r2]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d003      	beq.n	80024aa <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	225d      	movs	r2, #93	@ 0x5d
 80024a6:	2105      	movs	r1, #5
 80024a8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1cba      	adds	r2, r7, #2
 80024ba:	2146      	movs	r1, #70	@ 0x46
 80024bc:	8812      	ldrh	r2, [r2, #0]
 80024be:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1cba      	adds	r2, r7, #2
 80024c4:	2144      	movs	r1, #68	@ 0x44
 80024c6:	8812      	ldrh	r2, [r2, #0]
 80024c8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1cba      	adds	r2, r7, #2
 80024d4:	8812      	ldrh	r2, [r2, #0]
 80024d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1cba      	adds	r2, r7, #2
 80024dc:	8812      	ldrh	r2, [r2, #0]
 80024de:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	23e0      	movs	r3, #224	@ 0xe0
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d908      	bls.n	800250a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	49ac      	ldr	r1, [pc, #688]	@ (80027b4 <HAL_SPI_TransmitReceive+0x3c0>)
 8002504:	400a      	ands	r2, r1
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	e008      	b.n	800251c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2180      	movs	r1, #128	@ 0x80
 8002516:	0149      	lsls	r1, r1, #5
 8002518:	430a      	orrs	r2, r1
 800251a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2240      	movs	r2, #64	@ 0x40
 8002524:	4013      	ands	r3, r2
 8002526:	2b40      	cmp	r3, #64	@ 0x40
 8002528:	d007      	beq.n	800253a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2140      	movs	r1, #64	@ 0x40
 8002536:	430a      	orrs	r2, r1
 8002538:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	23e0      	movs	r3, #224	@ 0xe0
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	429a      	cmp	r2, r3
 8002544:	d800      	bhi.n	8002548 <HAL_SPI_TransmitReceive+0x154>
 8002546:	e083      	b.n	8002650 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d005      	beq.n	800255c <HAL_SPI_TransmitReceive+0x168>
 8002550:	2312      	movs	r3, #18
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d000      	beq.n	800255c <HAL_SPI_TransmitReceive+0x168>
 800255a:	e06d      	b.n	8002638 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002560:	881a      	ldrh	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800256c:	1c9a      	adds	r2, r3, #2
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002580:	e05a      	b.n	8002638 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2202      	movs	r2, #2
 800258a:	4013      	ands	r3, r2
 800258c:	2b02      	cmp	r3, #2
 800258e:	d11b      	bne.n	80025c8 <HAL_SPI_TransmitReceive+0x1d4>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d016      	beq.n	80025c8 <HAL_SPI_TransmitReceive+0x1d4>
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	2b01      	cmp	r3, #1
 800259e:	d113      	bne.n	80025c8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a4:	881a      	ldrh	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b0:	1c9a      	adds	r2, r3, #2
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2201      	movs	r2, #1
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d11c      	bne.n	8002610 <HAL_SPI_TransmitReceive+0x21c>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2246      	movs	r2, #70	@ 0x46
 80025da:	5a9b      	ldrh	r3, [r3, r2]
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d016      	beq.n	8002610 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ec:	b292      	uxth	r2, r2
 80025ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	1c9a      	adds	r2, r3, #2
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2246      	movs	r2, #70	@ 0x46
 80025fe:	5a9b      	ldrh	r3, [r3, r2]
 8002600:	b29b      	uxth	r3, r3
 8002602:	3b01      	subs	r3, #1
 8002604:	b299      	uxth	r1, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2246      	movs	r2, #70	@ 0x46
 800260a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800260c:	2301      	movs	r3, #1
 800260e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002610:	f7fe fd04 	bl	800101c <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800261c:	429a      	cmp	r2, r3
 800261e:	d80b      	bhi.n	8002638 <HAL_SPI_TransmitReceive+0x244>
 8002620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002622:	3301      	adds	r3, #1
 8002624:	d008      	beq.n	8002638 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8002626:	2323      	movs	r3, #35	@ 0x23
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2203      	movs	r2, #3
 800262c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	225d      	movs	r2, #93	@ 0x5d
 8002632:	2101      	movs	r1, #1
 8002634:	5499      	strb	r1, [r3, r2]
        goto error;
 8002636:	e0b1      	b.n	800279c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d19f      	bne.n	8002582 <HAL_SPI_TransmitReceive+0x18e>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2246      	movs	r2, #70	@ 0x46
 8002646:	5a9b      	ldrh	r3, [r3, r2]
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d199      	bne.n	8002582 <HAL_SPI_TransmitReceive+0x18e>
 800264e:	e089      	b.n	8002764 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_SPI_TransmitReceive+0x270>
 8002658:	2312      	movs	r3, #18
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d000      	beq.n	8002664 <HAL_SPI_TransmitReceive+0x270>
 8002662:	e074      	b.n	800274e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	330c      	adds	r3, #12
 800266e:	7812      	ldrb	r2, [r2, #0]
 8002670:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002680:	b29b      	uxth	r3, r3
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800268a:	e060      	b.n	800274e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2202      	movs	r2, #2
 8002694:	4013      	ands	r3, r2
 8002696:	2b02      	cmp	r3, #2
 8002698:	d11c      	bne.n	80026d4 <HAL_SPI_TransmitReceive+0x2e0>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d017      	beq.n	80026d4 <HAL_SPI_TransmitReceive+0x2e0>
 80026a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d114      	bne.n	80026d4 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	330c      	adds	r3, #12
 80026b4:	7812      	ldrb	r2, [r2, #0]
 80026b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	2201      	movs	r2, #1
 80026dc:	4013      	ands	r3, r2
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d11e      	bne.n	8002720 <HAL_SPI_TransmitReceive+0x32c>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2246      	movs	r2, #70	@ 0x46
 80026e6:	5a9b      	ldrh	r3, [r3, r2]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d018      	beq.n	8002720 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	330c      	adds	r3, #12
 80026f4:	001a      	movs	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	7812      	ldrb	r2, [r2, #0]
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2246      	movs	r2, #70	@ 0x46
 800270e:	5a9b      	ldrh	r3, [r3, r2]
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b299      	uxth	r1, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2246      	movs	r2, #70	@ 0x46
 800271a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800271c:	2301      	movs	r3, #1
 800271e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002720:	f7fe fc7c 	bl	800101c <HAL_GetTick>
 8002724:	0002      	movs	r2, r0
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800272c:	429a      	cmp	r2, r3
 800272e:	d802      	bhi.n	8002736 <HAL_SPI_TransmitReceive+0x342>
 8002730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002732:	3301      	adds	r3, #1
 8002734:	d102      	bne.n	800273c <HAL_SPI_TransmitReceive+0x348>
 8002736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002738:	2b00      	cmp	r3, #0
 800273a:	d108      	bne.n	800274e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800273c:	2323      	movs	r3, #35	@ 0x23
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	2203      	movs	r2, #3
 8002742:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	225d      	movs	r2, #93	@ 0x5d
 8002748:	2101      	movs	r1, #1
 800274a:	5499      	strb	r1, [r3, r2]
        goto error;
 800274c:	e026      	b.n	800279c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d199      	bne.n	800268c <HAL_SPI_TransmitReceive+0x298>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2246      	movs	r2, #70	@ 0x46
 800275c:	5a9b      	ldrh	r3, [r3, r2]
 800275e:	b29b      	uxth	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d193      	bne.n	800268c <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	0018      	movs	r0, r3
 800276c:	f000 f954 	bl	8002a18 <SPI_EndRxTxTransaction>
 8002770:	1e03      	subs	r3, r0, #0
 8002772:	d006      	beq.n	8002782 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8002774:	2323      	movs	r3, #35	@ 0x23
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2220      	movs	r2, #32
 8002780:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002786:	2b00      	cmp	r3, #0
 8002788:	d004      	beq.n	8002794 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800278a:	2323      	movs	r3, #35	@ 0x23
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	2201      	movs	r2, #1
 8002790:	701a      	strb	r2, [r3, #0]
 8002792:	e003      	b.n	800279c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	225d      	movs	r2, #93	@ 0x5d
 8002798:	2101      	movs	r1, #1
 800279a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	225c      	movs	r2, #92	@ 0x5c
 80027a0:	2100      	movs	r1, #0
 80027a2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80027a4:	2323      	movs	r3, #35	@ 0x23
 80027a6:	18fb      	adds	r3, r7, r3
 80027a8:	781b      	ldrb	r3, [r3, #0]
}
 80027aa:	0018      	movs	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b00a      	add	sp, #40	@ 0x28
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	46c0      	nop			@ (mov r8, r8)
 80027b4:	ffffefff 	.word	0xffffefff

080027b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	1dfb      	adds	r3, r7, #7
 80027c6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80027c8:	f7fe fc28 	bl	800101c <HAL_GetTick>
 80027cc:	0002      	movs	r2, r0
 80027ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	18d3      	adds	r3, r2, r3
 80027d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80027d8:	f7fe fc20 	bl	800101c <HAL_GetTick>
 80027dc:	0003      	movs	r3, r0
 80027de:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80027e0:	4b3a      	ldr	r3, [pc, #232]	@ (80028cc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	015b      	lsls	r3, r3, #5
 80027e6:	0d1b      	lsrs	r3, r3, #20
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	4353      	muls	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027ee:	e058      	b.n	80028a2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	3301      	adds	r3, #1
 80027f4:	d055      	beq.n	80028a2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80027f6:	f7fe fc11 	bl	800101c <HAL_GetTick>
 80027fa:	0002      	movs	r2, r0
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	429a      	cmp	r2, r3
 8002804:	d902      	bls.n	800280c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d142      	bne.n	8002892 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	21e0      	movs	r1, #224	@ 0xe0
 8002818:	438a      	bics	r2, r1
 800281a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	2382      	movs	r3, #130	@ 0x82
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	429a      	cmp	r2, r3
 8002826:	d113      	bne.n	8002850 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	2380      	movs	r3, #128	@ 0x80
 800282e:	021b      	lsls	r3, r3, #8
 8002830:	429a      	cmp	r2, r3
 8002832:	d005      	beq.n	8002840 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	2380      	movs	r3, #128	@ 0x80
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	429a      	cmp	r2, r3
 800283e:	d107      	bne.n	8002850 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2140      	movs	r1, #64	@ 0x40
 800284c:	438a      	bics	r2, r1
 800284e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002854:	2380      	movs	r3, #128	@ 0x80
 8002856:	019b      	lsls	r3, r3, #6
 8002858:	429a      	cmp	r2, r3
 800285a:	d110      	bne.n	800287e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	491a      	ldr	r1, [pc, #104]	@ (80028d0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002868:	400a      	ands	r2, r1
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2180      	movs	r1, #128	@ 0x80
 8002878:	0189      	lsls	r1, r1, #6
 800287a:	430a      	orrs	r2, r1
 800287c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	225d      	movs	r2, #93	@ 0x5d
 8002882:	2101      	movs	r1, #1
 8002884:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	225c      	movs	r2, #92	@ 0x5c
 800288a:	2100      	movs	r1, #0
 800288c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e017      	b.n	80028c2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	3b01      	subs	r3, #1
 80028a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	4013      	ands	r3, r2
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	425a      	negs	r2, r3
 80028b2:	4153      	adcs	r3, r2
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	001a      	movs	r2, r3
 80028b8:	1dfb      	adds	r3, r7, #7
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d197      	bne.n	80027f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	0018      	movs	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	b008      	add	sp, #32
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	46c0      	nop			@ (mov r8, r8)
 80028cc:	20000000 	.word	0x20000000
 80028d0:	ffffdfff 	.word	0xffffdfff

080028d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	@ 0x28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80028e2:	2317      	movs	r3, #23
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80028ea:	f7fe fb97 	bl	800101c <HAL_GetTick>
 80028ee:	0002      	movs	r2, r0
 80028f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	18d3      	adds	r3, r2, r3
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80028fa:	f7fe fb8f 	bl	800101c <HAL_GetTick>
 80028fe:	0003      	movs	r3, r0
 8002900:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	330c      	adds	r3, #12
 8002908:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800290a:	4b41      	ldr	r3, [pc, #260]	@ (8002a10 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	0013      	movs	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	189b      	adds	r3, r3, r2
 8002914:	00da      	lsls	r2, r3, #3
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	0d1b      	lsrs	r3, r3, #20
 800291a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800291c:	4353      	muls	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002920:	e068      	b.n	80029f4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	23c0      	movs	r3, #192	@ 0xc0
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	429a      	cmp	r2, r3
 800292a:	d10a      	bne.n	8002942 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d107      	bne.n	8002942 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	b2da      	uxtb	r2, r3
 8002938:	2117      	movs	r1, #23
 800293a:	187b      	adds	r3, r7, r1
 800293c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800293e:	187b      	adds	r3, r7, r1
 8002940:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	d055      	beq.n	80029f4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002948:	f7fe fb68 	bl	800101c <HAL_GetTick>
 800294c:	0002      	movs	r2, r0
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002954:	429a      	cmp	r2, r3
 8002956:	d902      	bls.n	800295e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	2b00      	cmp	r3, #0
 800295c:	d142      	bne.n	80029e4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	21e0      	movs	r1, #224	@ 0xe0
 800296a:	438a      	bics	r2, r1
 800296c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	2382      	movs	r3, #130	@ 0x82
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	429a      	cmp	r2, r3
 8002978:	d113      	bne.n	80029a2 <SPI_WaitFifoStateUntilTimeout+0xce>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	429a      	cmp	r2, r3
 8002984:	d005      	beq.n	8002992 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	2380      	movs	r3, #128	@ 0x80
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	429a      	cmp	r2, r3
 8002990:	d107      	bne.n	80029a2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2140      	movs	r1, #64	@ 0x40
 800299e:	438a      	bics	r2, r1
 80029a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029a6:	2380      	movs	r3, #128	@ 0x80
 80029a8:	019b      	lsls	r3, r3, #6
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d110      	bne.n	80029d0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4916      	ldr	r1, [pc, #88]	@ (8002a14 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80029ba:	400a      	ands	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2180      	movs	r1, #128	@ 0x80
 80029ca:	0189      	lsls	r1, r1, #6
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	225d      	movs	r2, #93	@ 0x5d
 80029d4:	2101      	movs	r1, #1
 80029d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	225c      	movs	r2, #92	@ 0x5c
 80029dc:	2100      	movs	r1, #0
 80029de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e010      	b.n	8002a06 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d101      	bne.n	80029ee <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	3b01      	subs	r3, #1
 80029f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	4013      	ands	r3, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d18e      	bne.n	8002922 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	0018      	movs	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b00a      	add	sp, #40	@ 0x28
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	46c0      	nop			@ (mov r8, r8)
 8002a10:	20000000 	.word	0x20000000
 8002a14:	ffffdfff 	.word	0xffffdfff

08002a18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	23c0      	movs	r3, #192	@ 0xc0
 8002a28:	0159      	lsls	r1, r3, #5
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	0013      	movs	r3, r2
 8002a32:	2200      	movs	r2, #0
 8002a34:	f7ff ff4e 	bl	80028d4 <SPI_WaitFifoStateUntilTimeout>
 8002a38:	1e03      	subs	r3, r0, #0
 8002a3a:	d007      	beq.n	8002a4c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a40:	2220      	movs	r2, #32
 8002a42:	431a      	orrs	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e027      	b.n	8002a9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	0013      	movs	r3, r2
 8002a56:	2200      	movs	r2, #0
 8002a58:	2180      	movs	r1, #128	@ 0x80
 8002a5a:	f7ff fead 	bl	80027b8 <SPI_WaitFlagStateUntilTimeout>
 8002a5e:	1e03      	subs	r3, r0, #0
 8002a60:	d007      	beq.n	8002a72 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a66:	2220      	movs	r2, #32
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e014      	b.n	8002a9c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	23c0      	movs	r3, #192	@ 0xc0
 8002a76:	00d9      	lsls	r1, r3, #3
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	0013      	movs	r3, r2
 8002a80:	2200      	movs	r2, #0
 8002a82:	f7ff ff27 	bl	80028d4 <SPI_WaitFifoStateUntilTimeout>
 8002a86:	1e03      	subs	r3, r0, #0
 8002a88:	d007      	beq.n	8002a9a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a8e:	2220      	movs	r2, #32
 8002a90:	431a      	orrs	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e000      	b.n	8002a9c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b004      	add	sp, #16
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e046      	b.n	8002b44 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2288      	movs	r2, #136	@ 0x88
 8002aba:	589b      	ldr	r3, [r3, r2]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d107      	bne.n	8002ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2284      	movs	r2, #132	@ 0x84
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	0018      	movs	r0, r3
 8002acc:	f7fe f8f2 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2288      	movs	r2, #136	@ 0x88
 8002ad4:	2124      	movs	r1, #36	@ 0x24
 8002ad6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	438a      	bics	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	0018      	movs	r0, r3
 8002af4:	f000 fa74 	bl	8002fe0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	0018      	movs	r0, r3
 8002afc:	f000 f8cc 	bl	8002c98 <UART_SetConfig>
 8002b00:	0003      	movs	r3, r0
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e01c      	b.n	8002b44 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	490d      	ldr	r1, [pc, #52]	@ (8002b4c <HAL_UART_Init+0xa8>)
 8002b16:	400a      	ands	r2, r1
 8002b18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	212a      	movs	r1, #42	@ 0x2a
 8002b26:	438a      	bics	r2, r1
 8002b28:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2101      	movs	r1, #1
 8002b36:	430a      	orrs	r2, r1
 8002b38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f000 fb03 	bl	8003148 <UART_CheckIdleState>
 8002b42:	0003      	movs	r3, r0
}
 8002b44:	0018      	movs	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b002      	add	sp, #8
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	ffffb7ff 	.word	0xffffb7ff

08002b50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	@ 0x28
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	1dbb      	adds	r3, r7, #6
 8002b5e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2288      	movs	r2, #136	@ 0x88
 8002b64:	589b      	ldr	r3, [r3, r2]
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	d000      	beq.n	8002b6c <HAL_UART_Transmit+0x1c>
 8002b6a:	e090      	b.n	8002c8e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_UART_Transmit+0x2a>
 8002b72:	1dbb      	adds	r3, r7, #6
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e088      	b.n	8002c90 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	2380      	movs	r3, #128	@ 0x80
 8002b84:	015b      	lsls	r3, r3, #5
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d109      	bne.n	8002b9e <HAL_UART_Transmit+0x4e>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d105      	bne.n	8002b9e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2201      	movs	r2, #1
 8002b96:	4013      	ands	r3, r2
 8002b98:	d001      	beq.n	8002b9e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e078      	b.n	8002c90 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2290      	movs	r2, #144	@ 0x90
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2288      	movs	r2, #136	@ 0x88
 8002baa:	2121      	movs	r1, #33	@ 0x21
 8002bac:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bae:	f7fe fa35 	bl	800101c <HAL_GetTick>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	1dba      	adds	r2, r7, #6
 8002bba:	2154      	movs	r1, #84	@ 0x54
 8002bbc:	8812      	ldrh	r2, [r2, #0]
 8002bbe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1dba      	adds	r2, r7, #6
 8002bc4:	2156      	movs	r1, #86	@ 0x56
 8002bc6:	8812      	ldrh	r2, [r2, #0]
 8002bc8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	2380      	movs	r3, #128	@ 0x80
 8002bd0:	015b      	lsls	r3, r3, #5
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d108      	bne.n	8002be8 <HAL_UART_Transmit+0x98>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d104      	bne.n	8002be8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	e003      	b.n	8002bf0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bf0:	e030      	b.n	8002c54 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	0013      	movs	r3, r2
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2180      	movs	r1, #128	@ 0x80
 8002c00:	f000 fb4c 	bl	800329c <UART_WaitOnFlagUntilTimeout>
 8002c04:	1e03      	subs	r3, r0, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2288      	movs	r2, #136	@ 0x88
 8002c0c:	2120      	movs	r1, #32
 8002c0e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e03d      	b.n	8002c90 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10b      	bne.n	8002c32 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	881b      	ldrh	r3, [r3, #0]
 8002c1e:	001a      	movs	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	05d2      	lsls	r2, r2, #23
 8002c26:	0dd2      	lsrs	r2, r2, #23
 8002c28:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	61bb      	str	r3, [r7, #24]
 8002c30:	e007      	b.n	8002c42 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	781a      	ldrb	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2256      	movs	r2, #86	@ 0x56
 8002c46:	5a9b      	ldrh	r3, [r3, r2]
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b299      	uxth	r1, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2256      	movs	r2, #86	@ 0x56
 8002c52:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2256      	movs	r2, #86	@ 0x56
 8002c58:	5a9b      	ldrh	r3, [r3, r2]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1c8      	bne.n	8002bf2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	0013      	movs	r3, r2
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2140      	movs	r1, #64	@ 0x40
 8002c6e:	f000 fb15 	bl	800329c <UART_WaitOnFlagUntilTimeout>
 8002c72:	1e03      	subs	r3, r0, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2288      	movs	r2, #136	@ 0x88
 8002c7a:	2120      	movs	r1, #32
 8002c7c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e006      	b.n	8002c90 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2288      	movs	r2, #136	@ 0x88
 8002c86:	2120      	movs	r1, #32
 8002c88:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	e000      	b.n	8002c90 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002c8e:	2302      	movs	r3, #2
  }
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b008      	add	sp, #32
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ca0:	231a      	movs	r3, #26
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	691b      	ldr	r3, [r3, #16]
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4abc      	ldr	r2, [pc, #752]	@ (8002fb8 <UART_SetConfig+0x320>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	0019      	movs	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69fa      	ldr	r2, [r7, #28]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4ab7      	ldr	r2, [pc, #732]	@ (8002fbc <UART_SetConfig+0x324>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	0019      	movs	r1, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	4aae      	ldr	r2, [pc, #696]	@ (8002fc0 <UART_SetConfig+0x328>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	0019      	movs	r1, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1a:	220f      	movs	r2, #15
 8002d1c:	4393      	bics	r3, r2
 8002d1e:	0019      	movs	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4aa4      	ldr	r2, [pc, #656]	@ (8002fc4 <UART_SetConfig+0x32c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d127      	bne.n	8002d86 <UART_SetConfig+0xee>
 8002d36:	4ba4      	ldr	r3, [pc, #656]	@ (8002fc8 <UART_SetConfig+0x330>)
 8002d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	d017      	beq.n	8002d72 <UART_SetConfig+0xda>
 8002d42:	d81b      	bhi.n	8002d7c <UART_SetConfig+0xe4>
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d00a      	beq.n	8002d5e <UART_SetConfig+0xc6>
 8002d48:	d818      	bhi.n	8002d7c <UART_SetConfig+0xe4>
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <UART_SetConfig+0xbc>
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d00a      	beq.n	8002d68 <UART_SetConfig+0xd0>
 8002d52:	e013      	b.n	8002d7c <UART_SetConfig+0xe4>
 8002d54:	231b      	movs	r3, #27
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
 8002d5c:	e058      	b.n	8002e10 <UART_SetConfig+0x178>
 8002d5e:	231b      	movs	r3, #27
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	2202      	movs	r2, #2
 8002d64:	701a      	strb	r2, [r3, #0]
 8002d66:	e053      	b.n	8002e10 <UART_SetConfig+0x178>
 8002d68:	231b      	movs	r3, #27
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	701a      	strb	r2, [r3, #0]
 8002d70:	e04e      	b.n	8002e10 <UART_SetConfig+0x178>
 8002d72:	231b      	movs	r3, #27
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	2208      	movs	r2, #8
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	e049      	b.n	8002e10 <UART_SetConfig+0x178>
 8002d7c:	231b      	movs	r3, #27
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	2210      	movs	r2, #16
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	e044      	b.n	8002e10 <UART_SetConfig+0x178>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a90      	ldr	r2, [pc, #576]	@ (8002fcc <UART_SetConfig+0x334>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d127      	bne.n	8002de0 <UART_SetConfig+0x148>
 8002d90:	4b8d      	ldr	r3, [pc, #564]	@ (8002fc8 <UART_SetConfig+0x330>)
 8002d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d94:	220c      	movs	r2, #12
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b0c      	cmp	r3, #12
 8002d9a:	d017      	beq.n	8002dcc <UART_SetConfig+0x134>
 8002d9c:	d81b      	bhi.n	8002dd6 <UART_SetConfig+0x13e>
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d00a      	beq.n	8002db8 <UART_SetConfig+0x120>
 8002da2:	d818      	bhi.n	8002dd6 <UART_SetConfig+0x13e>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <UART_SetConfig+0x116>
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d00a      	beq.n	8002dc2 <UART_SetConfig+0x12a>
 8002dac:	e013      	b.n	8002dd6 <UART_SetConfig+0x13e>
 8002dae:	231b      	movs	r3, #27
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
 8002db6:	e02b      	b.n	8002e10 <UART_SetConfig+0x178>
 8002db8:	231b      	movs	r3, #27
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	e026      	b.n	8002e10 <UART_SetConfig+0x178>
 8002dc2:	231b      	movs	r3, #27
 8002dc4:	18fb      	adds	r3, r7, r3
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	e021      	b.n	8002e10 <UART_SetConfig+0x178>
 8002dcc:	231b      	movs	r3, #27
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	e01c      	b.n	8002e10 <UART_SetConfig+0x178>
 8002dd6:	231b      	movs	r3, #27
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	2210      	movs	r2, #16
 8002ddc:	701a      	strb	r2, [r3, #0]
 8002dde:	e017      	b.n	8002e10 <UART_SetConfig+0x178>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a7a      	ldr	r2, [pc, #488]	@ (8002fd0 <UART_SetConfig+0x338>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d104      	bne.n	8002df4 <UART_SetConfig+0x15c>
 8002dea:	231b      	movs	r3, #27
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	2200      	movs	r2, #0
 8002df0:	701a      	strb	r2, [r3, #0]
 8002df2:	e00d      	b.n	8002e10 <UART_SetConfig+0x178>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a76      	ldr	r2, [pc, #472]	@ (8002fd4 <UART_SetConfig+0x33c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d104      	bne.n	8002e08 <UART_SetConfig+0x170>
 8002dfe:	231b      	movs	r3, #27
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]
 8002e06:	e003      	b.n	8002e10 <UART_SetConfig+0x178>
 8002e08:	231b      	movs	r3, #27
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	2210      	movs	r2, #16
 8002e0e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69da      	ldr	r2, [r3, #28]
 8002e14:	2380      	movs	r3, #128	@ 0x80
 8002e16:	021b      	lsls	r3, r3, #8
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d000      	beq.n	8002e1e <UART_SetConfig+0x186>
 8002e1c:	e065      	b.n	8002eea <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002e1e:	231b      	movs	r3, #27
 8002e20:	18fb      	adds	r3, r7, r3
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d015      	beq.n	8002e54 <UART_SetConfig+0x1bc>
 8002e28:	dc18      	bgt.n	8002e5c <UART_SetConfig+0x1c4>
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d00d      	beq.n	8002e4a <UART_SetConfig+0x1b2>
 8002e2e:	dc15      	bgt.n	8002e5c <UART_SetConfig+0x1c4>
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <UART_SetConfig+0x1a2>
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d005      	beq.n	8002e44 <UART_SetConfig+0x1ac>
 8002e38:	e010      	b.n	8002e5c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e3a:	f7ff f8d9 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8002e3e:	0003      	movs	r3, r0
 8002e40:	617b      	str	r3, [r7, #20]
        break;
 8002e42:	e012      	b.n	8002e6a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e44:	4b64      	ldr	r3, [pc, #400]	@ (8002fd8 <UART_SetConfig+0x340>)
 8002e46:	617b      	str	r3, [r7, #20]
        break;
 8002e48:	e00f      	b.n	8002e6a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e4a:	f7ff f845 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8002e4e:	0003      	movs	r3, r0
 8002e50:	617b      	str	r3, [r7, #20]
        break;
 8002e52:	e00a      	b.n	8002e6a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e54:	2380      	movs	r3, #128	@ 0x80
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	617b      	str	r3, [r7, #20]
        break;
 8002e5a:	e006      	b.n	8002e6a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e60:	231a      	movs	r3, #26
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	2201      	movs	r2, #1
 8002e66:	701a      	strb	r2, [r3, #0]
        break;
 8002e68:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d100      	bne.n	8002e72 <UART_SetConfig+0x1da>
 8002e70:	e08d      	b.n	8002f8e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e76:	4b59      	ldr	r3, [pc, #356]	@ (8002fdc <UART_SetConfig+0x344>)
 8002e78:	0052      	lsls	r2, r2, #1
 8002e7a:	5ad3      	ldrh	r3, [r2, r3]
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	6978      	ldr	r0, [r7, #20]
 8002e80:	f7fd f948 	bl	8000114 <__udivsi3>
 8002e84:	0003      	movs	r3, r0
 8002e86:	005a      	lsls	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	085b      	lsrs	r3, r3, #1
 8002e8e:	18d2      	adds	r2, r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	0019      	movs	r1, r3
 8002e96:	0010      	movs	r0, r2
 8002e98:	f7fd f93c 	bl	8000114 <__udivsi3>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	2b0f      	cmp	r3, #15
 8002ea4:	d91c      	bls.n	8002ee0 <UART_SetConfig+0x248>
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	2380      	movs	r3, #128	@ 0x80
 8002eaa:	025b      	lsls	r3, r3, #9
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d217      	bcs.n	8002ee0 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	200e      	movs	r0, #14
 8002eb6:	183b      	adds	r3, r7, r0
 8002eb8:	210f      	movs	r1, #15
 8002eba:	438a      	bics	r2, r1
 8002ebc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	085b      	lsrs	r3, r3, #1
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2207      	movs	r2, #7
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	b299      	uxth	r1, r3
 8002eca:	183b      	adds	r3, r7, r0
 8002ecc:	183a      	adds	r2, r7, r0
 8002ece:	8812      	ldrh	r2, [r2, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	183a      	adds	r2, r7, r0
 8002eda:	8812      	ldrh	r2, [r2, #0]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	e056      	b.n	8002f8e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002ee0:	231a      	movs	r3, #26
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	e051      	b.n	8002f8e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002eea:	231b      	movs	r3, #27
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d015      	beq.n	8002f20 <UART_SetConfig+0x288>
 8002ef4:	dc18      	bgt.n	8002f28 <UART_SetConfig+0x290>
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d00d      	beq.n	8002f16 <UART_SetConfig+0x27e>
 8002efa:	dc15      	bgt.n	8002f28 <UART_SetConfig+0x290>
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <UART_SetConfig+0x26e>
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d005      	beq.n	8002f10 <UART_SetConfig+0x278>
 8002f04:	e010      	b.n	8002f28 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f06:	f7ff f873 	bl	8001ff0 <HAL_RCC_GetPCLK1Freq>
 8002f0a:	0003      	movs	r3, r0
 8002f0c:	617b      	str	r3, [r7, #20]
        break;
 8002f0e:	e012      	b.n	8002f36 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f10:	4b31      	ldr	r3, [pc, #196]	@ (8002fd8 <UART_SetConfig+0x340>)
 8002f12:	617b      	str	r3, [r7, #20]
        break;
 8002f14:	e00f      	b.n	8002f36 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f16:	f7fe ffdf 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	617b      	str	r3, [r7, #20]
        break;
 8002f1e:	e00a      	b.n	8002f36 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f20:	2380      	movs	r3, #128	@ 0x80
 8002f22:	021b      	lsls	r3, r3, #8
 8002f24:	617b      	str	r3, [r7, #20]
        break;
 8002f26:	e006      	b.n	8002f36 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002f2c:	231a      	movs	r3, #26
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]
        break;
 8002f34:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d028      	beq.n	8002f8e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f40:	4b26      	ldr	r3, [pc, #152]	@ (8002fdc <UART_SetConfig+0x344>)
 8002f42:	0052      	lsls	r2, r2, #1
 8002f44:	5ad3      	ldrh	r3, [r2, r3]
 8002f46:	0019      	movs	r1, r3
 8002f48:	6978      	ldr	r0, [r7, #20]
 8002f4a:	f7fd f8e3 	bl	8000114 <__udivsi3>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	001a      	movs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	085b      	lsrs	r3, r3, #1
 8002f58:	18d2      	adds	r2, r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	0019      	movs	r1, r3
 8002f60:	0010      	movs	r0, r2
 8002f62:	f7fd f8d7 	bl	8000114 <__udivsi3>
 8002f66:	0003      	movs	r3, r0
 8002f68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	2b0f      	cmp	r3, #15
 8002f6e:	d90a      	bls.n	8002f86 <UART_SetConfig+0x2ee>
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	2380      	movs	r3, #128	@ 0x80
 8002f74:	025b      	lsls	r3, r3, #9
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d205      	bcs.n	8002f86 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60da      	str	r2, [r3, #12]
 8002f84:	e003      	b.n	8002f8e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002f86:	231a      	movs	r3, #26
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	226a      	movs	r2, #106	@ 0x6a
 8002f92:	2101      	movs	r1, #1
 8002f94:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2268      	movs	r2, #104	@ 0x68
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002faa:	231a      	movs	r3, #26
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	781b      	ldrb	r3, [r3, #0]
}
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b008      	add	sp, #32
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	cfff69f3 	.word	0xcfff69f3
 8002fbc:	ffffcfff 	.word	0xffffcfff
 8002fc0:	11fff4ff 	.word	0x11fff4ff
 8002fc4:	40013800 	.word	0x40013800
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	40004400 	.word	0x40004400
 8002fd0:	40004800 	.word	0x40004800
 8002fd4:	40004c00 	.word	0x40004c00
 8002fd8:	00f42400 	.word	0x00f42400
 8002fdc:	08005bb8 	.word	0x08005bb8

08002fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fec:	2208      	movs	r2, #8
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d00b      	beq.n	800300a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	4a4a      	ldr	r2, [pc, #296]	@ (8003124 <UART_AdvFeatureConfig+0x144>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800300e:	2201      	movs	r2, #1
 8003010:	4013      	ands	r3, r2
 8003012:	d00b      	beq.n	800302c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4a43      	ldr	r2, [pc, #268]	@ (8003128 <UART_AdvFeatureConfig+0x148>)
 800301c:	4013      	ands	r3, r2
 800301e:	0019      	movs	r1, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003030:	2202      	movs	r2, #2
 8003032:	4013      	ands	r3, r2
 8003034:	d00b      	beq.n	800304e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4a3b      	ldr	r2, [pc, #236]	@ (800312c <UART_AdvFeatureConfig+0x14c>)
 800303e:	4013      	ands	r3, r2
 8003040:	0019      	movs	r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003052:	2204      	movs	r2, #4
 8003054:	4013      	ands	r3, r2
 8003056:	d00b      	beq.n	8003070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	4a34      	ldr	r2, [pc, #208]	@ (8003130 <UART_AdvFeatureConfig+0x150>)
 8003060:	4013      	ands	r3, r2
 8003062:	0019      	movs	r1, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003074:	2210      	movs	r2, #16
 8003076:	4013      	ands	r3, r2
 8003078:	d00b      	beq.n	8003092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	4a2c      	ldr	r2, [pc, #176]	@ (8003134 <UART_AdvFeatureConfig+0x154>)
 8003082:	4013      	ands	r3, r2
 8003084:	0019      	movs	r1, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003096:	2220      	movs	r2, #32
 8003098:	4013      	ands	r3, r2
 800309a:	d00b      	beq.n	80030b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	4a25      	ldr	r2, [pc, #148]	@ (8003138 <UART_AdvFeatureConfig+0x158>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	0019      	movs	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b8:	2240      	movs	r2, #64	@ 0x40
 80030ba:	4013      	ands	r3, r2
 80030bc:	d01d      	beq.n	80030fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a1d      	ldr	r2, [pc, #116]	@ (800313c <UART_AdvFeatureConfig+0x15c>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030da:	2380      	movs	r3, #128	@ 0x80
 80030dc:	035b      	lsls	r3, r3, #13
 80030de:	429a      	cmp	r2, r3
 80030e0:	d10b      	bne.n	80030fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4a15      	ldr	r2, [pc, #84]	@ (8003140 <UART_AdvFeatureConfig+0x160>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	0019      	movs	r1, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fe:	2280      	movs	r2, #128	@ 0x80
 8003100:	4013      	ands	r3, r2
 8003102:	d00b      	beq.n	800311c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4a0e      	ldr	r2, [pc, #56]	@ (8003144 <UART_AdvFeatureConfig+0x164>)
 800310c:	4013      	ands	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	430a      	orrs	r2, r1
 800311a:	605a      	str	r2, [r3, #4]
  }
}
 800311c:	46c0      	nop			@ (mov r8, r8)
 800311e:	46bd      	mov	sp, r7
 8003120:	b002      	add	sp, #8
 8003122:	bd80      	pop	{r7, pc}
 8003124:	ffff7fff 	.word	0xffff7fff
 8003128:	fffdffff 	.word	0xfffdffff
 800312c:	fffeffff 	.word	0xfffeffff
 8003130:	fffbffff 	.word	0xfffbffff
 8003134:	ffffefff 	.word	0xffffefff
 8003138:	ffffdfff 	.word	0xffffdfff
 800313c:	ffefffff 	.word	0xffefffff
 8003140:	ff9fffff 	.word	0xff9fffff
 8003144:	fff7ffff 	.word	0xfff7ffff

08003148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b092      	sub	sp, #72	@ 0x48
 800314c:	af02      	add	r7, sp, #8
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2290      	movs	r2, #144	@ 0x90
 8003154:	2100      	movs	r1, #0
 8003156:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003158:	f7fd ff60 	bl	800101c <HAL_GetTick>
 800315c:	0003      	movs	r3, r0
 800315e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2208      	movs	r2, #8
 8003168:	4013      	ands	r3, r2
 800316a:	2b08      	cmp	r3, #8
 800316c:	d12d      	bne.n	80031ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800316e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003170:	2280      	movs	r2, #128	@ 0x80
 8003172:	0391      	lsls	r1, r2, #14
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4a47      	ldr	r2, [pc, #284]	@ (8003294 <UART_CheckIdleState+0x14c>)
 8003178:	9200      	str	r2, [sp, #0]
 800317a:	2200      	movs	r2, #0
 800317c:	f000 f88e 	bl	800329c <UART_WaitOnFlagUntilTimeout>
 8003180:	1e03      	subs	r3, r0, #0
 8003182:	d022      	beq.n	80031ca <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003184:	f3ef 8310 	mrs	r3, PRIMASK
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800318c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800318e:	2301      	movs	r3, #1
 8003190:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003194:	f383 8810 	msr	PRIMASK, r3
}
 8003198:	46c0      	nop			@ (mov r8, r8)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2180      	movs	r1, #128	@ 0x80
 80031a6:	438a      	bics	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b0:	f383 8810 	msr	PRIMASK, r3
}
 80031b4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2288      	movs	r2, #136	@ 0x88
 80031ba:	2120      	movs	r1, #32
 80031bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2284      	movs	r2, #132	@ 0x84
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e060      	b.n	800328c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2204      	movs	r2, #4
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d146      	bne.n	8003266 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031da:	2280      	movs	r2, #128	@ 0x80
 80031dc:	03d1      	lsls	r1, r2, #15
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	4a2c      	ldr	r2, [pc, #176]	@ (8003294 <UART_CheckIdleState+0x14c>)
 80031e2:	9200      	str	r2, [sp, #0]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f000 f859 	bl	800329c <UART_WaitOnFlagUntilTimeout>
 80031ea:	1e03      	subs	r3, r0, #0
 80031ec:	d03b      	beq.n	8003266 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ee:	f3ef 8310 	mrs	r3, PRIMASK
 80031f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80031f4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80031f8:	2301      	movs	r3, #1
 80031fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f383 8810 	msr	PRIMASK, r3
}
 8003202:	46c0      	nop			@ (mov r8, r8)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4922      	ldr	r1, [pc, #136]	@ (8003298 <UART_CheckIdleState+0x150>)
 8003210:	400a      	ands	r2, r1
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003216:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f383 8810 	msr	PRIMASK, r3
}
 800321e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003220:	f3ef 8310 	mrs	r3, PRIMASK
 8003224:	61bb      	str	r3, [r7, #24]
  return(result);
 8003226:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003228:	633b      	str	r3, [r7, #48]	@ 0x30
 800322a:	2301      	movs	r3, #1
 800322c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f383 8810 	msr	PRIMASK, r3
}
 8003234:	46c0      	nop			@ (mov r8, r8)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2101      	movs	r1, #1
 8003242:	438a      	bics	r2, r1
 8003244:	609a      	str	r2, [r3, #8]
 8003246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003248:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	f383 8810 	msr	PRIMASK, r3
}
 8003250:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	228c      	movs	r2, #140	@ 0x8c
 8003256:	2120      	movs	r1, #32
 8003258:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2284      	movs	r2, #132	@ 0x84
 800325e:	2100      	movs	r1, #0
 8003260:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e012      	b.n	800328c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2288      	movs	r2, #136	@ 0x88
 800326a:	2120      	movs	r1, #32
 800326c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	228c      	movs	r2, #140	@ 0x8c
 8003272:	2120      	movs	r1, #32
 8003274:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2284      	movs	r2, #132	@ 0x84
 8003286:	2100      	movs	r1, #0
 8003288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	0018      	movs	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	b010      	add	sp, #64	@ 0x40
 8003292:	bd80      	pop	{r7, pc}
 8003294:	01ffffff 	.word	0x01ffffff
 8003298:	fffffedf 	.word	0xfffffedf

0800329c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	1dfb      	adds	r3, r7, #7
 80032aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ac:	e051      	b.n	8003352 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	3301      	adds	r3, #1
 80032b2:	d04e      	beq.n	8003352 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b4:	f7fd feb2 	bl	800101c <HAL_GetTick>
 80032b8:	0002      	movs	r2, r0
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d302      	bcc.n	80032ca <UART_WaitOnFlagUntilTimeout+0x2e>
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e051      	b.n	8003372 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2204      	movs	r2, #4
 80032d6:	4013      	ands	r3, r2
 80032d8:	d03b      	beq.n	8003352 <UART_WaitOnFlagUntilTimeout+0xb6>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b80      	cmp	r3, #128	@ 0x80
 80032de:	d038      	beq.n	8003352 <UART_WaitOnFlagUntilTimeout+0xb6>
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2b40      	cmp	r3, #64	@ 0x40
 80032e4:	d035      	beq.n	8003352 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	2208      	movs	r2, #8
 80032ee:	4013      	ands	r3, r2
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d111      	bne.n	8003318 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2208      	movs	r2, #8
 80032fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	0018      	movs	r0, r3
 8003300:	f000 f83c 	bl	800337c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2290      	movs	r2, #144	@ 0x90
 8003308:	2108      	movs	r1, #8
 800330a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2284      	movs	r2, #132	@ 0x84
 8003310:	2100      	movs	r1, #0
 8003312:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e02c      	b.n	8003372 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	69da      	ldr	r2, [r3, #28]
 800331e:	2380      	movs	r3, #128	@ 0x80
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	401a      	ands	r2, r3
 8003324:	2380      	movs	r3, #128	@ 0x80
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	429a      	cmp	r2, r3
 800332a:	d112      	bne.n	8003352 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2280      	movs	r2, #128	@ 0x80
 8003332:	0112      	lsls	r2, r2, #4
 8003334:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	0018      	movs	r0, r3
 800333a:	f000 f81f 	bl	800337c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2290      	movs	r2, #144	@ 0x90
 8003342:	2120      	movs	r1, #32
 8003344:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2284      	movs	r2, #132	@ 0x84
 800334a:	2100      	movs	r1, #0
 800334c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e00f      	b.n	8003372 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	4013      	ands	r3, r2
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	425a      	negs	r2, r3
 8003362:	4153      	adcs	r3, r2
 8003364:	b2db      	uxtb	r3, r3
 8003366:	001a      	movs	r2, r3
 8003368:	1dfb      	adds	r3, r7, #7
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	429a      	cmp	r2, r3
 800336e:	d09e      	beq.n	80032ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	0018      	movs	r0, r3
 8003374:	46bd      	mov	sp, r7
 8003376:	b004      	add	sp, #16
 8003378:	bd80      	pop	{r7, pc}
	...

0800337c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08e      	sub	sp, #56	@ 0x38
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003384:	f3ef 8310 	mrs	r3, PRIMASK
 8003388:	617b      	str	r3, [r7, #20]
  return(result);
 800338a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800338c:	637b      	str	r3, [r7, #52]	@ 0x34
 800338e:	2301      	movs	r3, #1
 8003390:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	f383 8810 	msr	PRIMASK, r3
}
 8003398:	46c0      	nop			@ (mov r8, r8)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4926      	ldr	r1, [pc, #152]	@ (8003440 <UART_EndRxTransfer+0xc4>)
 80033a6:	400a      	ands	r2, r1
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f383 8810 	msr	PRIMASK, r3
}
 80033b4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033b6:	f3ef 8310 	mrs	r3, PRIMASK
 80033ba:	623b      	str	r3, [r7, #32]
  return(result);
 80033bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033be:	633b      	str	r3, [r7, #48]	@ 0x30
 80033c0:	2301      	movs	r3, #1
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	f383 8810 	msr	PRIMASK, r3
}
 80033ca:	46c0      	nop			@ (mov r8, r8)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	491b      	ldr	r1, [pc, #108]	@ (8003444 <UART_EndRxTransfer+0xc8>)
 80033d8:	400a      	ands	r2, r1
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033de:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e2:	f383 8810 	msr	PRIMASK, r3
}
 80033e6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d118      	bne.n	8003422 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f0:	f3ef 8310 	mrs	r3, PRIMASK
 80033f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80033f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033fa:	2301      	movs	r3, #1
 80033fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f383 8810 	msr	PRIMASK, r3
}
 8003404:	46c0      	nop			@ (mov r8, r8)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2110      	movs	r1, #16
 8003412:	438a      	bics	r2, r1
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003418:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f383 8810 	msr	PRIMASK, r3
}
 8003420:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	228c      	movs	r2, #140	@ 0x8c
 8003426:	2120      	movs	r1, #32
 8003428:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003436:	46c0      	nop			@ (mov r8, r8)
 8003438:	46bd      	mov	sp, r7
 800343a:	b00e      	add	sp, #56	@ 0x38
 800343c:	bd80      	pop	{r7, pc}
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	fffffedf 	.word	0xfffffedf
 8003444:	effffffe 	.word	0xeffffffe

08003448 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2284      	movs	r2, #132	@ 0x84
 8003454:	5c9b      	ldrb	r3, [r3, r2]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_UARTEx_DisableFifoMode+0x16>
 800345a:	2302      	movs	r3, #2
 800345c:	e027      	b.n	80034ae <HAL_UARTEx_DisableFifoMode+0x66>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2284      	movs	r2, #132	@ 0x84
 8003462:	2101      	movs	r1, #1
 8003464:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2288      	movs	r2, #136	@ 0x88
 800346a:	2124      	movs	r1, #36	@ 0x24
 800346c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2101      	movs	r1, #1
 8003482:	438a      	bics	r2, r1
 8003484:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4a0b      	ldr	r2, [pc, #44]	@ (80034b8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800348a:	4013      	ands	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2288      	movs	r2, #136	@ 0x88
 80034a0:	2120      	movs	r1, #32
 80034a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2284      	movs	r2, #132	@ 0x84
 80034a8:	2100      	movs	r1, #0
 80034aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b004      	add	sp, #16
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			@ (mov r8, r8)
 80034b8:	dfffffff 	.word	0xdfffffff

080034bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2284      	movs	r2, #132	@ 0x84
 80034ca:	5c9b      	ldrb	r3, [r3, r2]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e02e      	b.n	8003532 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2284      	movs	r2, #132	@ 0x84
 80034d8:	2101      	movs	r1, #1
 80034da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2288      	movs	r2, #136	@ 0x88
 80034e0:	2124      	movs	r1, #36	@ 0x24
 80034e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2101      	movs	r1, #1
 80034f8:	438a      	bics	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	08d9      	lsrs	r1, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	0018      	movs	r0, r3
 8003514:	f000 f854 	bl	80035c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2288      	movs	r2, #136	@ 0x88
 8003524:	2120      	movs	r1, #32
 8003526:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2284      	movs	r2, #132	@ 0x84
 800352c:	2100      	movs	r1, #0
 800352e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	0018      	movs	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	b004      	add	sp, #16
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2284      	movs	r2, #132	@ 0x84
 800354a:	5c9b      	ldrb	r3, [r3, r2]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003550:	2302      	movs	r3, #2
 8003552:	e02f      	b.n	80035b4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2284      	movs	r2, #132	@ 0x84
 8003558:	2101      	movs	r1, #1
 800355a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2288      	movs	r2, #136	@ 0x88
 8003560:	2124      	movs	r1, #36	@ 0x24
 8003562:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2101      	movs	r1, #1
 8003578:	438a      	bics	r2, r1
 800357a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	4a0e      	ldr	r2, [pc, #56]	@ (80035bc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003584:	4013      	ands	r3, r2
 8003586:	0019      	movs	r1, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	0018      	movs	r0, r3
 8003596:	f000 f813 	bl	80035c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2288      	movs	r2, #136	@ 0x88
 80035a6:	2120      	movs	r1, #32
 80035a8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2284      	movs	r2, #132	@ 0x84
 80035ae:	2100      	movs	r1, #0
 80035b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	0018      	movs	r0, r3
 80035b6:	46bd      	mov	sp, r7
 80035b8:	b004      	add	sp, #16
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	f1ffffff 	.word	0xf1ffffff

080035c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80035c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d108      	bne.n	80035e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	226a      	movs	r2, #106	@ 0x6a
 80035d4:	2101      	movs	r1, #1
 80035d6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2268      	movs	r2, #104	@ 0x68
 80035dc:	2101      	movs	r1, #1
 80035de:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80035e0:	e043      	b.n	800366a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80035e2:	260f      	movs	r6, #15
 80035e4:	19bb      	adds	r3, r7, r6
 80035e6:	2208      	movs	r2, #8
 80035e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80035ea:	200e      	movs	r0, #14
 80035ec:	183b      	adds	r3, r7, r0
 80035ee:	2208      	movs	r2, #8
 80035f0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	0e5b      	lsrs	r3, r3, #25
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	240d      	movs	r4, #13
 80035fe:	193b      	adds	r3, r7, r4
 8003600:	2107      	movs	r1, #7
 8003602:	400a      	ands	r2, r1
 8003604:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	0f5b      	lsrs	r3, r3, #29
 800360e:	b2da      	uxtb	r2, r3
 8003610:	250c      	movs	r5, #12
 8003612:	197b      	adds	r3, r7, r5
 8003614:	2107      	movs	r1, #7
 8003616:	400a      	ands	r2, r1
 8003618:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800361a:	183b      	adds	r3, r7, r0
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	197a      	adds	r2, r7, r5
 8003620:	7812      	ldrb	r2, [r2, #0]
 8003622:	4914      	ldr	r1, [pc, #80]	@ (8003674 <UARTEx_SetNbDataToProcess+0xb4>)
 8003624:	5c8a      	ldrb	r2, [r1, r2]
 8003626:	435a      	muls	r2, r3
 8003628:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800362a:	197b      	adds	r3, r7, r5
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	4a12      	ldr	r2, [pc, #72]	@ (8003678 <UARTEx_SetNbDataToProcess+0xb8>)
 8003630:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003632:	0019      	movs	r1, r3
 8003634:	f7fc fdf8 	bl	8000228 <__divsi3>
 8003638:	0003      	movs	r3, r0
 800363a:	b299      	uxth	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	226a      	movs	r2, #106	@ 0x6a
 8003640:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003642:	19bb      	adds	r3, r7, r6
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	193a      	adds	r2, r7, r4
 8003648:	7812      	ldrb	r2, [r2, #0]
 800364a:	490a      	ldr	r1, [pc, #40]	@ (8003674 <UARTEx_SetNbDataToProcess+0xb4>)
 800364c:	5c8a      	ldrb	r2, [r1, r2]
 800364e:	435a      	muls	r2, r3
 8003650:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003652:	193b      	adds	r3, r7, r4
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	4a08      	ldr	r2, [pc, #32]	@ (8003678 <UARTEx_SetNbDataToProcess+0xb8>)
 8003658:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800365a:	0019      	movs	r1, r3
 800365c:	f7fc fde4 	bl	8000228 <__divsi3>
 8003660:	0003      	movs	r3, r0
 8003662:	b299      	uxth	r1, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2268      	movs	r2, #104	@ 0x68
 8003668:	5299      	strh	r1, [r3, r2]
}
 800366a:	46c0      	nop			@ (mov r8, r8)
 800366c:	46bd      	mov	sp, r7
 800366e:	b005      	add	sp, #20
 8003670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	08005bd0 	.word	0x08005bd0
 8003678:	08005bd8 	.word	0x08005bd8

0800367c <sx126x_init>:
 * @returns Operation status
 *
 */

sx126x_hal_status_t sx126x_init(const void* context)
{
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
    static sx126x_chip_status_t radio_status;
    sx126x_hal_status_t status = SX126X_HAL_STATUS_CFG_FAULT;
 8003684:	230f      	movs	r3, #15
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	2202      	movs	r2, #2
 800368a:	701a      	strb	r2, [r3, #0]
    uint8_t successcount = 0;
 800368c:	240e      	movs	r4, #14
 800368e:	193b      	adds	r3, r7, r4
 8003690:	2200      	movs	r2, #0
 8003692:	701a      	strb	r2, [r3, #0]

    if(sx126x_reset(context) == SX126X_STATUS_OK)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	0018      	movs	r0, r3
 8003698:	f000 fdaf 	bl	80041fa <sx126x_reset>
 800369c:	1e03      	subs	r3, r0, #0
 800369e:	d104      	bne.n	80036aa <sx126x_init+0x2e>
    {
        successcount++;
 80036a0:	193b      	adds	r3, r7, r4
 80036a2:	781a      	ldrb	r2, [r3, #0]
 80036a4:	193b      	adds	r3, r7, r4
 80036a6:	3201      	adds	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(10);
 80036aa:	200a      	movs	r0, #10
 80036ac:	f7fd fcc0 	bl	8001030 <HAL_Delay>

    if(sx126x_set_standby(context, SX126X_STANDBY_CFG_RC) == SX126X_STATUS_OK)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2100      	movs	r1, #0
 80036b4:	0018      	movs	r0, r3
 80036b6:	f000 f8b5 	bl	8003824 <sx126x_set_standby>
 80036ba:	1e03      	subs	r3, r0, #0
 80036bc:	d105      	bne.n	80036ca <sx126x_init+0x4e>
    {
        successcount++;
 80036be:	210e      	movs	r1, #14
 80036c0:	187b      	adds	r3, r7, r1
 80036c2:	781a      	ldrb	r2, [r3, #0]
 80036c4:	187b      	adds	r3, r7, r1
 80036c6:	3201      	adds	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]
    }

    if(sx126x_set_dio3_as_tcxo_ctrl(context, SX126X_TCXO_CTRL_1_8V, 5000) == SX126X_STATUS_OK)
 80036ca:	4a27      	ldr	r2, [pc, #156]	@ (8003768 <sx126x_init+0xec>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2102      	movs	r1, #2
 80036d0:	0018      	movs	r0, r3
 80036d2:	f000 fb70 	bl	8003db6 <sx126x_set_dio3_as_tcxo_ctrl>
 80036d6:	1e03      	subs	r3, r0, #0
 80036d8:	d105      	bne.n	80036e6 <sx126x_init+0x6a>
    {
        successcount++;
 80036da:	210e      	movs	r1, #14
 80036dc:	187b      	adds	r3, r7, r1
 80036de:	781a      	ldrb	r2, [r3, #0]
 80036e0:	187b      	adds	r3, r7, r1
 80036e2:	3201      	adds	r2, #1
 80036e4:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(100); // Longer delay for TCXO
 80036e6:	2064      	movs	r0, #100	@ 0x64
 80036e8:	f7fd fca2 	bl	8001030 <HAL_Delay>

    // Clear the error before proceeding
    sx126x_clear_device_errors(context);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	0018      	movs	r0, r3
 80036f0:	f000 fdbe 	bl	8004270 <sx126x_clear_device_errors>

    if(sx126x_set_reg_mode(context, SX126X_REG_MODE_LDO) == SX126X_STATUS_OK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2100      	movs	r1, #0
 80036f8:	0018      	movs	r0, r3
 80036fa:	f000 f931 	bl	8003960 <sx126x_set_reg_mode>
 80036fe:	1e03      	subs	r3, r0, #0
 8003700:	d105      	bne.n	800370e <sx126x_init+0x92>
    {
        successcount++;
 8003702:	210e      	movs	r1, #14
 8003704:	187b      	adds	r3, r7, r1
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	187b      	adds	r3, r7, r1
 800370a:	3201      	adds	r2, #1
 800370c:	701a      	strb	r2, [r3, #0]
    }

    if(sx126x_set_dio2_as_rf_sw_ctrl(context, true) == SX126X_STATUS_OK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2101      	movs	r1, #1
 8003712:	0018      	movs	r0, r3
 8003714:	f000 fb32 	bl	8003d7c <sx126x_set_dio2_as_rf_sw_ctrl>
 8003718:	1e03      	subs	r3, r0, #0
 800371a:	d105      	bne.n	8003728 <sx126x_init+0xac>
    {
        successcount++;
 800371c:	210e      	movs	r1, #14
 800371e:	187b      	adds	r3, r7, r1
 8003720:	781a      	ldrb	r2, [r3, #0]
 8003722:	187b      	adds	r3, r7, r1
 8003724:	3201      	adds	r2, #1
 8003726:	701a      	strb	r2, [r3, #0]
    }

    // Try calibration without checking chip mode
    if(sx126x_cal(context, SX126X_CAL_ALL) == SX126X_STATUS_OK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	217f      	movs	r1, #127	@ 0x7f
 800372c:	0018      	movs	r0, r3
 800372e:	f000 f933 	bl	8003998 <sx126x_cal>
 8003732:	1e03      	subs	r3, r0, #0
 8003734:	d105      	bne.n	8003742 <sx126x_init+0xc6>
    {
        successcount++;
 8003736:	210e      	movs	r1, #14
 8003738:	187b      	adds	r3, r7, r1
 800373a:	781a      	ldrb	r2, [r3, #0]
 800373c:	187b      	adds	r3, r7, r1
 800373e:	3201      	adds	r2, #1
 8003740:	701a      	strb	r2, [r3, #0]
    }

    HAL_Delay(10);
 8003742:	200a      	movs	r0, #10
 8003744:	f7fd fc74 	bl	8001030 <HAL_Delay>

    if(successcount >= 5) // At least 5 out of 6 operations succeeded
 8003748:	230e      	movs	r3, #14
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b04      	cmp	r3, #4
 8003750:	d903      	bls.n	800375a <sx126x_init+0xde>
    {
        status = SX126X_HAL_STATUS_OK;
 8003752:	230f      	movs	r3, #15
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	2200      	movs	r2, #0
 8003758:	701a      	strb	r2, [r3, #0]
    }
    return status;
 800375a:	230f      	movs	r3, #15
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	781b      	ldrb	r3, [r3, #0]
}
 8003760:	0018      	movs	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	b005      	add	sp, #20
 8003766:	bd90      	pop	{r4, r7, pc}
 8003768:	00001388 	.word	0x00001388

0800376c <Radio_init>:
 *
 * @returns Operation status
 *
 */
void Radio_init(const void* context)
{
 800376c:	b5b0      	push	{r4, r5, r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
		    .bw   = SX126X_LORA_BW_125,
		    .cr   = SX126X_LORA_CR_4_5,
		    .ldro = 0,  // Will be initialized during radio init
		};

		const sx126x_pkt_params_lora_t lora_pkt_params = {
 8003774:	250c      	movs	r5, #12
 8003776:	197b      	adds	r3, r7, r5
 8003778:	4a27      	ldr	r2, [pc, #156]	@ (8003818 <Radio_init+0xac>)
 800377a:	6811      	ldr	r1, [r2, #0]
 800377c:	6019      	str	r1, [r3, #0]
 800377e:	8892      	ldrh	r2, [r2, #4]
 8003780:	809a      	strh	r2, [r3, #4]
 * 	Mode 	*	OutputPower	*	paDutyCycle	*	hpMax	*	deviceSel 	*	paLut 	*	Value inSetTxParams1
 *  ***********************************************************************************************************
 *	SX1262	*  	+17dBm 		*		0x02 	*	0x03 	*	 0x00 		*    0x01 	*	 +22 dBm
	***********************************************************************************************************
*/
		pa_cfg.device_sel 		= 0x00;
 8003782:	2414      	movs	r4, #20
 8003784:	193b      	adds	r3, r7, r4
 8003786:	2200      	movs	r2, #0
 8003788:	709a      	strb	r2, [r3, #2]
		pa_cfg.pa_lut 			= 0x01;
 800378a:	193b      	adds	r3, r7, r4
 800378c:	2201      	movs	r2, #1
 800378e:	70da      	strb	r2, [r3, #3]
		pa_cfg.pa_duty_cycle 	= 0x02;
 8003790:	193b      	adds	r3, r7, r4
 8003792:	2202      	movs	r2, #2
 8003794:	701a      	strb	r2, [r3, #0]
		pa_cfg.hp_max 			= 0x03;
 8003796:	193b      	adds	r3, r7, r4
 8003798:	2203      	movs	r2, #3
 800379a:	705a      	strb	r2, [r3, #1]





	  sx126x_set_standby( context, SX126X_STANDBY_CFG_RC);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2100      	movs	r1, #0
 80037a0:	0018      	movs	r0, r3
 80037a2:	f000 f83f 	bl	8003824 <sx126x_set_standby>
	  sx126x_set_pkt_type( context, SX126X_PKT_TYPE_LORA );
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2101      	movs	r1, #1
 80037aa:	0018      	movs	r0, r3
 80037ac:	f000 fb6e 	bl	8003e8c <sx126x_set_pkt_type>
	  sx126x_set_rf_freq( context, RF_FREQ_IN_HZ );
 80037b0:	4a1a      	ldr	r2, [pc, #104]	@ (800381c <Radio_init+0xb0>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	0011      	movs	r1, r2
 80037b6:	0018      	movs	r0, r3
 80037b8:	f000 fb29 	bl	8003e0e <sx126x_set_rf_freq>

	  sx126x_set_pa_cfg( context, &pa_cfg);
 80037bc:	193a      	adds	r2, r7, r4
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	0011      	movs	r1, r2
 80037c2:	0018      	movs	r0, r3
 80037c4:	f000 f904 	bl	80039d0 <sx126x_set_pa_cfg>
	  sx126x_set_tx_params( context, TX_OUTPUT_POWER_DBM, PA_RAMP_TIME );
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	2116      	movs	r1, #22
 80037ce:	0018      	movs	r0, r3
 80037d0:	f000 fb8e 	bl	8003ef0 <sx126x_set_tx_params>

	  sx126x_set_rx_tx_fallback_mode( context, FALLBACK_MODE );
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2120      	movs	r1, #32
 80037d8:	0018      	movs	r0, r3
 80037da:	f000 f91f 	bl	8003a1c <sx126x_set_rx_tx_fallback_mode>
	  sx126x_cfg_rx_boosted( context, ENABLE_RX_BOOST_MODE );
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2100      	movs	r1, #0
 80037e2:	0018      	movs	r0, r3
 80037e4:	f000 fda2 	bl	800432c <sx126x_cfg_rx_boosted>

	  //For LORA
	  lora_mod_params.ldro = 1;
 80037e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003820 <Radio_init+0xb4>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	70da      	strb	r2, [r3, #3]
	  sx126x_set_lora_mod_params( context, &lora_mod_params );
 80037ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003820 <Radio_init+0xb4>)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	0011      	movs	r1, r2
 80037f4:	0018      	movs	r0, r3
 80037f6:	f000 fba0 	bl	8003f3a <sx126x_set_lora_mod_params>
	  sx126x_set_lora_pkt_params( context, &lora_pkt_params );
 80037fa:	197a      	adds	r2, r7, r5
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	0011      	movs	r1, r2
 8003800:	0018      	movs	r0, r3
 8003802:	f000 fbd7 	bl	8003fb4 <sx126x_set_lora_pkt_params>
	  sx126x_set_lora_sync_word( context, LORA_SYNCWORD );
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2112      	movs	r1, #18
 800380a:	0018      	movs	r0, r3
 800380c:	f000 fdb6 	bl	800437c <sx126x_set_lora_sync_word>
}
 8003810:	46c0      	nop			@ (mov r8, r8)
 8003812:	46bd      	mov	sp, r7
 8003814:	b006      	add	sp, #24
 8003816:	bdb0      	pop	{r4, r5, r7, pc}
 8003818:	08005b24 	.word	0x08005b24
 800381c:	33bca100 	.word	0x33bca100
 8003820:	2000000c 	.word	0x2000000c

08003824 <sx126x_set_standby>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_SLEEP, 0, 0 );
}

sx126x_status_t sx126x_set_standby( const void* context, const sx126x_standby_cfg_t cfg )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af02      	add	r7, sp, #8
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	000a      	movs	r2, r1
 800382e:	1cfb      	adds	r3, r7, #3
 8003830:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_STANDBY] = {
 8003832:	210c      	movs	r1, #12
 8003834:	187b      	adds	r3, r7, r1
 8003836:	2280      	movs	r2, #128	@ 0x80
 8003838:	701a      	strb	r2, [r3, #0]
 800383a:	187b      	adds	r3, r7, r1
 800383c:	1cfa      	adds	r2, r7, #3
 800383e:	7812      	ldrb	r2, [r2, #0]
 8003840:	705a      	strb	r2, [r3, #1]
        SX126X_SET_STANDBY,
        ( uint8_t ) cfg,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_STANDBY, 0, 0 );
 8003842:	1879      	adds	r1, r7, r1
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	2300      	movs	r3, #0
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	2300      	movs	r3, #0
 800384c:	2202      	movs	r2, #2
 800384e:	f000 fe75 	bl	800453c <sx126x_hal_write>
 8003852:	0003      	movs	r3, r0
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	b004      	add	sp, #16
 800385a:	bd80      	pop	{r7, pc}

0800385c <sx126x_set_tx>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_FS, 0, 0 );
}

sx126x_status_t sx126x_set_tx( const void* context, const uint32_t timeout_in_ms )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	2380      	movs	r3, #128	@ 0x80
 800386a:	02db      	lsls	r3, r3, #11
 800386c:	429a      	cmp	r2, r3
 800386e:	d301      	bcc.n	8003874 <sx126x_set_tx+0x18>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 8003870:	2302      	movs	r3, #2
 8003872:	e00c      	b.n	800388e <sx126x_set_tx+0x32>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	0018      	movs	r0, r3
 8003878:	f000 fd40 	bl	80042fc <sx126x_convert_timeout_in_ms_to_rtc_step>
 800387c:	0003      	movs	r3, r0
 800387e:	60fb      	str	r3, [r7, #12]

    return sx126x_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	0011      	movs	r1, r2
 8003886:	0018      	movs	r0, r3
 8003888:	f000 f805 	bl	8003896 <sx126x_set_tx_with_timeout_in_rtc_step>
 800388c:	0003      	movs	r3, r0
}
 800388e:	0018      	movs	r0, r3
 8003890:	46bd      	mov	sp, r7
 8003892:	b004      	add	sp, #16
 8003894:	bd80      	pop	{r7, pc}

08003896 <sx126x_set_tx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 8003896:	b580      	push	{r7, lr}
 8003898:	b086      	sub	sp, #24
 800389a:	af02      	add	r7, sp, #8
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 80038a0:	210c      	movs	r1, #12
 80038a2:	187b      	adds	r3, r7, r1
 80038a4:	2283      	movs	r2, #131	@ 0x83
 80038a6:	701a      	strb	r2, [r3, #0]
        SX126X_SET_TX,
        ( uint8_t )( timeout_in_rtc_step >> 16 ),
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	0c1b      	lsrs	r3, r3, #16
 80038ac:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 80038ae:	187b      	adds	r3, r7, r1
 80038b0:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( timeout_in_rtc_step >> 8 ),
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	0a1b      	lsrs	r3, r3, #8
 80038b6:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 80038b8:	187b      	adds	r3, r7, r1
 80038ba:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( timeout_in_rtc_step >> 0 ),
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_TX] = {
 80038c0:	187b      	adds	r3, r7, r1
 80038c2:	70da      	strb	r2, [r3, #3]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX, 0, 0 );
 80038c4:	1879      	adds	r1, r7, r1
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	2300      	movs	r3, #0
 80038ca:	9300      	str	r3, [sp, #0]
 80038cc:	2300      	movs	r3, #0
 80038ce:	2204      	movs	r2, #4
 80038d0:	f000 fe34 	bl	800453c <sx126x_hal_write>
 80038d4:	0003      	movs	r3, r0
}
 80038d6:	0018      	movs	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	b004      	add	sp, #16
 80038dc:	bd80      	pop	{r7, pc}

080038de <sx126x_set_rx>:

sx126x_status_t sx126x_set_rx( const void* context, const uint32_t timeout_in_ms )
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b084      	sub	sp, #16
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
    if( timeout_in_ms > SX126X_MAX_TIMEOUT_IN_MS )
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	2380      	movs	r3, #128	@ 0x80
 80038ec:	02db      	lsls	r3, r3, #11
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d301      	bcc.n	80038f6 <sx126x_set_rx+0x18>
    {
        return SX126X_STATUS_UNKNOWN_VALUE;
 80038f2:	2302      	movs	r3, #2
 80038f4:	e00c      	b.n	8003910 <sx126x_set_rx+0x32>
    }

    const uint32_t timeout_in_rtc_step = sx126x_convert_timeout_in_ms_to_rtc_step( timeout_in_ms );
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	0018      	movs	r0, r3
 80038fa:	f000 fcff 	bl	80042fc <sx126x_convert_timeout_in_ms_to_rtc_step>
 80038fe:	0003      	movs	r3, r0
 8003900:	60fb      	str	r3, [r7, #12]

    return sx126x_set_rx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	0011      	movs	r1, r2
 8003908:	0018      	movs	r0, r3
 800390a:	f000 f805 	bl	8003918 <sx126x_set_rx_with_timeout_in_rtc_step>
 800390e:	0003      	movs	r3, r0
}
 8003910:	0018      	movs	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	b004      	add	sp, #16
 8003916:	bd80      	pop	{r7, pc}

08003918 <sx126x_set_rx_with_timeout_in_rtc_step>:

sx126x_status_t sx126x_set_rx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af02      	add	r7, sp, #8
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_RX] = {
 8003922:	210c      	movs	r1, #12
 8003924:	187b      	adds	r3, r7, r1
 8003926:	2282      	movs	r2, #130	@ 0x82
 8003928:	701a      	strb	r2, [r3, #0]
        SX126X_SET_RX,
        ( uint8_t )( timeout_in_rtc_step >> 16 ),
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	0c1b      	lsrs	r3, r3, #16
 800392e:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RX] = {
 8003930:	187b      	adds	r3, r7, r1
 8003932:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( timeout_in_rtc_step >> 8 ),
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	0a1b      	lsrs	r3, r3, #8
 8003938:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RX] = {
 800393a:	187b      	adds	r3, r7, r1
 800393c:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( timeout_in_rtc_step >> 0 ),
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RX] = {
 8003942:	187b      	adds	r3, r7, r1
 8003944:	70da      	strb	r2, [r3, #3]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX, 0, 0 );
 8003946:	1879      	adds	r1, r7, r1
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	2300      	movs	r3, #0
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	2300      	movs	r3, #0
 8003950:	2204      	movs	r2, #4
 8003952:	f000 fdf3 	bl	800453c <sx126x_hal_write>
 8003956:	0003      	movs	r3, r0
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	b004      	add	sp, #16
 800395e:	bd80      	pop	{r7, pc}

08003960 <sx126x_set_reg_mode>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_INFINITE_PREAMBLE, 0, 0 );
}

sx126x_status_t sx126x_set_reg_mode( const void* context, const sx126x_reg_mod_t mode )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af02      	add	r7, sp, #8
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	000a      	movs	r2, r1
 800396a:	1cfb      	adds	r3, r7, #3
 800396c:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_REGULATOR_MODE] = {
 800396e:	210c      	movs	r1, #12
 8003970:	187b      	adds	r3, r7, r1
 8003972:	2296      	movs	r2, #150	@ 0x96
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	187b      	adds	r3, r7, r1
 8003978:	1cfa      	adds	r2, r7, #3
 800397a:	7812      	ldrb	r2, [r2, #0]
 800397c:	705a      	strb	r2, [r3, #1]
        SX126X_SET_REGULATOR_MODE,
        ( uint8_t ) mode,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_REGULATOR_MODE, 0, 0 );
 800397e:	1879      	adds	r1, r7, r1
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	2300      	movs	r3, #0
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	2300      	movs	r3, #0
 8003988:	2202      	movs	r2, #2
 800398a:	f000 fdd7 	bl	800453c <sx126x_hal_write>
 800398e:	0003      	movs	r3, r0
}
 8003990:	0018      	movs	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	b004      	add	sp, #16
 8003996:	bd80      	pop	{r7, pc}

08003998 <sx126x_cal>:

sx126x_status_t sx126x_cal( const void* context, const sx126x_cal_mask_t param )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af02      	add	r7, sp, #8
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	000a      	movs	r2, r1
 80039a2:	1cfb      	adds	r3, r7, #3
 80039a4:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_CALIBRATE] = {
 80039a6:	210c      	movs	r1, #12
 80039a8:	187b      	adds	r3, r7, r1
 80039aa:	2289      	movs	r2, #137	@ 0x89
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	187b      	adds	r3, r7, r1
 80039b0:	1cfa      	adds	r2, r7, #3
 80039b2:	7812      	ldrb	r2, [r2, #0]
 80039b4:	705a      	strb	r2, [r3, #1]
        SX126X_CALIBRATE,
        ( uint8_t ) param,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CALIBRATE, 0, 0 );
 80039b6:	1879      	adds	r1, r7, r1
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	2300      	movs	r3, #0
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2300      	movs	r3, #0
 80039c0:	2202      	movs	r2, #2
 80039c2:	f000 fdbb 	bl	800453c <sx126x_hal_write>
 80039c6:	0003      	movs	r3, r0
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b004      	add	sp, #16
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <sx126x_set_pa_cfg>:

    return sx126x_cal_img( context, freq1, freq2 );
}

sx126x_status_t sx126x_set_pa_cfg( const void* context, const sx126x_pa_cfg_params_t* params )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 80039da:	2108      	movs	r1, #8
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	2295      	movs	r2, #149	@ 0x95
 80039e0:	701a      	strb	r2, [r3, #0]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	781a      	ldrb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 80039e6:	187b      	adds	r3, r7, r1
 80039e8:	705a      	strb	r2, [r3, #1]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	785a      	ldrb	r2, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	709a      	strb	r2, [r3, #2]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	789a      	ldrb	r2, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 80039f6:	187b      	adds	r3, r7, r1
 80039f8:	70da      	strb	r2, [r3, #3]
        SX126X_SET_PA_CFG, params->pa_duty_cycle, params->hp_max, params->device_sel, params->pa_lut,
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	78da      	ldrb	r2, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PA_CFG] = {
 80039fe:	187b      	adds	r3, r7, r1
 8003a00:	711a      	strb	r2, [r3, #4]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PA_CFG, 0, 0 );
 8003a02:	1879      	adds	r1, r7, r1
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	2300      	movs	r3, #0
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	2205      	movs	r2, #5
 8003a0e:	f000 fd95 	bl	800453c <sx126x_hal_write>
 8003a12:	0003      	movs	r3, r0
}
 8003a14:	0018      	movs	r0, r3
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b004      	add	sp, #16
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <sx126x_set_rx_tx_fallback_mode>:

sx126x_status_t sx126x_set_rx_tx_fallback_mode( const void* context, const sx126x_fallback_modes_t fallback_mode )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af02      	add	r7, sp, #8
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	000a      	movs	r2, r1
 8003a26:	1cfb      	adds	r3, r7, #3
 8003a28:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_RX_TX_FALLBACK_MODE] = {
 8003a2a:	210c      	movs	r1, #12
 8003a2c:	187b      	adds	r3, r7, r1
 8003a2e:	2293      	movs	r2, #147	@ 0x93
 8003a30:	701a      	strb	r2, [r3, #0]
 8003a32:	187b      	adds	r3, r7, r1
 8003a34:	1cfa      	adds	r2, r7, #3
 8003a36:	7812      	ldrb	r2, [r2, #0]
 8003a38:	705a      	strb	r2, [r3, #1]
        SX126X_SET_RX_TX_FALLBACK_MODE,
        ( uint8_t ) fallback_mode,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RX_TX_FALLBACK_MODE, 0, 0 );
 8003a3a:	1879      	adds	r1, r7, r1
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	2300      	movs	r3, #0
 8003a44:	2202      	movs	r2, #2
 8003a46:	f000 fd79 	bl	800453c <sx126x_hal_write>
 8003a4a:	0003      	movs	r3, r0
}
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b004      	add	sp, #16
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <sx126x_write_register>:
// Registers and buffer Access
//

sx126x_status_t sx126x_write_register( const void* context, const uint16_t address, const uint8_t* buffer,
                                       const uint8_t size )
{
 8003a54:	b5b0      	push	{r4, r5, r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	0008      	movs	r0, r1
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	0019      	movs	r1, r3
 8003a62:	240a      	movs	r4, #10
 8003a64:	193b      	adds	r3, r7, r4
 8003a66:	1c02      	adds	r2, r0, #0
 8003a68:	801a      	strh	r2, [r3, #0]
 8003a6a:	2509      	movs	r5, #9
 8003a6c:	197b      	adds	r3, r7, r5
 8003a6e:	1c0a      	adds	r2, r1, #0
 8003a70:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 8003a72:	2114      	movs	r1, #20
 8003a74:	187b      	adds	r3, r7, r1
 8003a76:	220d      	movs	r2, #13
 8003a78:	701a      	strb	r2, [r3, #0]
        SX126X_WRITE_REGISTER,
        ( uint8_t )( address >> 8 ),
 8003a7a:	0020      	movs	r0, r4
 8003a7c:	183b      	adds	r3, r7, r0
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	0a1b      	lsrs	r3, r3, #8
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 8003a86:	187b      	adds	r3, r7, r1
 8003a88:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( address >> 0 ),
 8003a8a:	183b      	adds	r3, r7, r0
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_WRITE_REGISTER] = {
 8003a90:	187b      	adds	r3, r7, r1
 8003a92:	709a      	strb	r2, [r3, #2]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_REGISTER, buffer, size );
 8003a94:	197b      	adds	r3, r7, r5
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	1879      	adds	r1, r7, r1
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	0013      	movs	r3, r2
 8003aa4:	2203      	movs	r2, #3
 8003aa6:	f000 fd49 	bl	800453c <sx126x_hal_write>
 8003aaa:	0003      	movs	r3, r0
}
 8003aac:	0018      	movs	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	b006      	add	sp, #24
 8003ab2:	bdb0      	pop	{r4, r5, r7, pc}

08003ab4 <sx126x_read_register>:

sx126x_status_t sx126x_read_register( const void* context, const uint16_t address, uint8_t* buffer, const uint8_t size )
{
 8003ab4:	b5b0      	push	{r4, r5, r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	0008      	movs	r0, r1
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	0019      	movs	r1, r3
 8003ac2:	240a      	movs	r4, #10
 8003ac4:	193b      	adds	r3, r7, r4
 8003ac6:	1c02      	adds	r2, r0, #0
 8003ac8:	801a      	strh	r2, [r3, #0]
 8003aca:	2509      	movs	r5, #9
 8003acc:	197b      	adds	r3, r7, r5
 8003ace:	1c0a      	adds	r2, r1, #0
 8003ad0:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 8003ad2:	2114      	movs	r1, #20
 8003ad4:	187b      	adds	r3, r7, r1
 8003ad6:	221d      	movs	r2, #29
 8003ad8:	701a      	strb	r2, [r3, #0]
        SX126X_READ_REGISTER,
        ( uint8_t )( address >> 8 ),
 8003ada:	0020      	movs	r0, r4
 8003adc:	183b      	adds	r3, r7, r0
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 8003ae6:	187b      	adds	r3, r7, r1
 8003ae8:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( address >> 0 ),
 8003aea:	183b      	adds	r3, r7, r0
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_READ_REGISTER] = {
 8003af0:	187b      	adds	r3, r7, r1
 8003af2:	709a      	strb	r2, [r3, #2]
 8003af4:	187b      	adds	r3, r7, r1
 8003af6:	2200      	movs	r2, #0
 8003af8:	70da      	strb	r2, [r3, #3]
        SX126X_NOP,
    };

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_REGISTER, buffer, size );
 8003afa:	197b      	adds	r3, r7, r5
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	1879      	adds	r1, r7, r1
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	0013      	movs	r3, r2
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	f000 fd88 	bl	8004620 <sx126x_hal_read>
 8003b10:	0003      	movs	r3, r0
}
 8003b12:	0018      	movs	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b006      	add	sp, #24
 8003b18:	bdb0      	pop	{r4, r5, r7, pc}

08003b1a <sx126x_write_buffer>:

sx126x_status_t sx126x_write_buffer( const void* context, const uint8_t offset, const uint8_t* buffer,
                                     const uint8_t size )
{
 8003b1a:	b590      	push	{r4, r7, lr}
 8003b1c:	b089      	sub	sp, #36	@ 0x24
 8003b1e:	af02      	add	r7, sp, #8
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	0008      	movs	r0, r1
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	0019      	movs	r1, r3
 8003b28:	240b      	movs	r4, #11
 8003b2a:	193b      	adds	r3, r7, r4
 8003b2c:	1c02      	adds	r2, r0, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
 8003b30:	200a      	movs	r0, #10
 8003b32:	183b      	adds	r3, r7, r0
 8003b34:	1c0a      	adds	r2, r1, #0
 8003b36:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_WRITE_BUFFER] = {
 8003b38:	2114      	movs	r1, #20
 8003b3a:	187b      	adds	r3, r7, r1
 8003b3c:	220e      	movs	r2, #14
 8003b3e:	701a      	strb	r2, [r3, #0]
 8003b40:	187b      	adds	r3, r7, r1
 8003b42:	193a      	adds	r2, r7, r4
 8003b44:	7812      	ldrb	r2, [r2, #0]
 8003b46:	705a      	strb	r2, [r3, #1]
        SX126X_WRITE_BUFFER,
        offset,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_WRITE_BUFFER, buffer, size );
 8003b48:	183b      	adds	r3, r7, r0
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	1879      	adds	r1, r7, r1
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	0013      	movs	r3, r2
 8003b58:	2202      	movs	r2, #2
 8003b5a:	f000 fcef 	bl	800453c <sx126x_hal_write>
 8003b5e:	0003      	movs	r3, r0
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b007      	add	sp, #28
 8003b66:	bd90      	pop	{r4, r7, pc}

08003b68 <sx126x_read_buffer>:

sx126x_status_t sx126x_read_buffer( const void* context, const uint8_t offset, uint8_t* buffer, const uint8_t size )
{
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b089      	sub	sp, #36	@ 0x24
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	0008      	movs	r0, r1
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	0019      	movs	r1, r3
 8003b76:	240b      	movs	r4, #11
 8003b78:	193b      	adds	r3, r7, r4
 8003b7a:	1c02      	adds	r2, r0, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
 8003b7e:	200a      	movs	r0, #10
 8003b80:	183b      	adds	r3, r7, r0
 8003b82:	1c0a      	adds	r2, r1, #0
 8003b84:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_READ_BUFFER] = {
 8003b86:	2114      	movs	r1, #20
 8003b88:	187b      	adds	r3, r7, r1
 8003b8a:	221e      	movs	r2, #30
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	187b      	adds	r3, r7, r1
 8003b90:	193a      	adds	r2, r7, r4
 8003b92:	7812      	ldrb	r2, [r2, #0]
 8003b94:	705a      	strb	r2, [r3, #1]
 8003b96:	187b      	adds	r3, r7, r1
 8003b98:	2200      	movs	r2, #0
 8003b9a:	709a      	strb	r2, [r3, #2]
        SX126X_READ_BUFFER,
        offset,
        SX126X_NOP,
    };

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_READ_BUFFER, buffer, size );
 8003b9c:	183b      	adds	r3, r7, r0
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	1879      	adds	r1, r7, r1
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	0013      	movs	r3, r2
 8003bac:	2203      	movs	r2, #3
 8003bae:	f000 fd37 	bl	8004620 <sx126x_hal_read>
 8003bb2:	0003      	movs	r3, r0
}
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b007      	add	sp, #28
 8003bba:	bd90      	pop	{r4, r7, pc}

08003bbc <sx126x_set_dio_irq_params>:
//
// DIO and IRQ Control Functions
//
sx126x_status_t sx126x_set_dio_irq_params( const void* context, const uint16_t irq_mask, const uint16_t dio1_mask,
                                           const uint16_t dio2_mask, const uint16_t dio3_mask )
{
 8003bbc:	b5b0      	push	{r4, r5, r7, lr}
 8003bbe:	b08a      	sub	sp, #40	@ 0x28
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	000c      	movs	r4, r1
 8003bc6:	0010      	movs	r0, r2
 8003bc8:	0019      	movs	r1, r3
 8003bca:	250a      	movs	r5, #10
 8003bcc:	197b      	adds	r3, r7, r5
 8003bce:	1c22      	adds	r2, r4, #0
 8003bd0:	801a      	strh	r2, [r3, #0]
 8003bd2:	2408      	movs	r4, #8
 8003bd4:	193b      	adds	r3, r7, r4
 8003bd6:	1c02      	adds	r2, r0, #0
 8003bd8:	801a      	strh	r2, [r3, #0]
 8003bda:	1dbb      	adds	r3, r7, #6
 8003bdc:	1c0a      	adds	r2, r1, #0
 8003bde:	801a      	strh	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8003be0:	2114      	movs	r1, #20
 8003be2:	187b      	adds	r3, r7, r1
 8003be4:	2208      	movs	r2, #8
 8003be6:	701a      	strb	r2, [r3, #0]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 8003be8:	197b      	adds	r3, r7, r5
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8003bf2:	187b      	adds	r3, r7, r1
 8003bf4:	705a      	strb	r2, [r3, #1]
        SX126X_SET_DIO_IRQ_PARAMS,     ( uint8_t )( irq_mask >> 8 ),  ( uint8_t )( irq_mask >> 0 ),
 8003bf6:	197b      	adds	r3, r7, r5
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8003bfc:	187b      	adds	r3, r7, r1
 8003bfe:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 8003c00:	193b      	adds	r3, r7, r4
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	0a1b      	lsrs	r3, r3, #8
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8003c0a:	187b      	adds	r3, r7, r1
 8003c0c:	70da      	strb	r2, [r3, #3]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 8003c0e:	193b      	adds	r3, r7, r4
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8003c14:	187b      	adds	r3, r7, r1
 8003c16:	711a      	strb	r2, [r3, #4]
        ( uint8_t )( dio1_mask >> 8 ), ( uint8_t )( dio1_mask >> 0 ), ( uint8_t )( dio2_mask >> 8 ),
 8003c18:	1dbb      	adds	r3, r7, #6
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	0a1b      	lsrs	r3, r3, #8
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8003c22:	187b      	adds	r3, r7, r1
 8003c24:	715a      	strb	r2, [r3, #5]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 8003c26:	1dbb      	adds	r3, r7, #6
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8003c2c:	187b      	adds	r3, r7, r1
 8003c2e:	719a      	strb	r2, [r3, #6]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 8003c30:	2030      	movs	r0, #48	@ 0x30
 8003c32:	183b      	adds	r3, r7, r0
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	0a1b      	lsrs	r3, r3, #8
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8003c3c:	187b      	adds	r3, r7, r1
 8003c3e:	71da      	strb	r2, [r3, #7]
        ( uint8_t )( dio2_mask >> 0 ), ( uint8_t )( dio3_mask >> 8 ), ( uint8_t )( dio3_mask >> 0 ),
 8003c40:	183b      	adds	r3, r7, r0
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO_IRQ_PARAMS] = {
 8003c46:	187b      	adds	r3, r7, r1
 8003c48:	721a      	strb	r2, [r3, #8]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO_IRQ_PARAMS, 0, 0 );
 8003c4a:	1879      	adds	r1, r7, r1
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	2300      	movs	r3, #0
 8003c54:	2209      	movs	r2, #9
 8003c56:	f000 fc71 	bl	800453c <sx126x_hal_write>
 8003c5a:	0003      	movs	r3, r0
}
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b008      	add	sp, #32
 8003c62:	bdb0      	pop	{r4, r5, r7, pc}

08003c64 <sx126x_get_irq_status>:

sx126x_status_t sx126x_get_irq_status( const void* context, sx126x_irq_mask_t* irq )
{
 8003c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_GET_IRQ_STATUS] = {
 8003c6e:	210c      	movs	r1, #12
 8003c70:	187b      	adds	r3, r7, r1
 8003c72:	2212      	movs	r2, #18
 8003c74:	801a      	strh	r2, [r3, #0]
        SX126X_GET_IRQ_STATUS,
        SX126X_NOP,
    };
    uint8_t irq_local[sizeof( sx126x_irq_mask_t )] = { 0x00 };
 8003c76:	2508      	movs	r5, #8
 8003c78:	197b      	adds	r3, r7, r5
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	801a      	strh	r2, [r3, #0]

    const sx126x_status_t status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_IRQ_STATUS,
 8003c7e:	260f      	movs	r6, #15
 8003c80:	19bc      	adds	r4, r7, r6
 8003c82:	197b      	adds	r3, r7, r5
 8003c84:	1879      	adds	r1, r7, r1
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	9200      	str	r2, [sp, #0]
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	f000 fcc7 	bl	8004620 <sx126x_hal_read>
 8003c92:	0003      	movs	r3, r0
 8003c94:	7023      	strb	r3, [r4, #0]
                                                                        irq_local, sizeof( sx126x_irq_mask_t ) );

    if( status == SX126X_STATUS_OK )
 8003c96:	19bb      	adds	r3, r7, r6
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d109      	bne.n	8003cb2 <sx126x_get_irq_status+0x4e>
    {
        *irq = ( ( sx126x_irq_mask_t ) irq_local[0] << 8 ) + ( ( sx126x_irq_mask_t ) irq_local[1] << 0 );
 8003c9e:	197b      	adds	r3, r7, r5
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	197a      	adds	r2, r7, r5
 8003ca8:	7852      	ldrb	r2, [r2, #1]
 8003caa:	189b      	adds	r3, r3, r2
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	801a      	strh	r2, [r3, #0]
    }

    return status;
 8003cb2:	230f      	movs	r3, #15
 8003cb4:	18fb      	adds	r3, r7, r3
 8003cb6:	781b      	ldrb	r3, [r3, #0]
}
 8003cb8:	0018      	movs	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b005      	add	sp, #20
 8003cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cc0 <sx126x_clear_irq_status>:

sx126x_status_t sx126x_clear_irq_status( const void* context, const sx126x_irq_mask_t irq_mask )
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	000a      	movs	r2, r1
 8003cca:	1cbb      	adds	r3, r7, #2
 8003ccc:	801a      	strh	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = {
 8003cce:	210c      	movs	r1, #12
 8003cd0:	187b      	adds	r3, r7, r1
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	701a      	strb	r2, [r3, #0]
        SX126X_CLR_IRQ_STATUS,
        ( uint8_t )( irq_mask >> 8 ),
 8003cd6:	1cbb      	adds	r3, r7, #2
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	0a1b      	lsrs	r3, r3, #8
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = {
 8003ce0:	187b      	adds	r3, r7, r1
 8003ce2:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( irq_mask >> 0 ),
 8003ce4:	1cbb      	adds	r3, r7, #2
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_CLR_IRQ_STATUS] = {
 8003cea:	187b      	adds	r3, r7, r1
 8003cec:	709a      	strb	r2, [r3, #2]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CLR_IRQ_STATUS, 0, 0 );
 8003cee:	1879      	adds	r1, r7, r1
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	f000 fc1f 	bl	800453c <sx126x_hal_write>
 8003cfe:	0003      	movs	r3, r0
}
 8003d00:	0018      	movs	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b004      	add	sp, #16
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <sx126x_get_and_clear_irq_status>:

sx126x_status_t sx126x_get_and_clear_irq_status( const void* context, sx126x_irq_mask_t* irq )
{
 8003d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
    sx126x_irq_mask_t sx126x_irq_mask = SX126X_IRQ_NONE;
 8003d12:	250c      	movs	r5, #12
 8003d14:	197b      	adds	r3, r7, r5
 8003d16:	2200      	movs	r2, #0
 8003d18:	801a      	strh	r2, [r3, #0]

    sx126x_status_t status = sx126x_get_irq_status( context, &sx126x_irq_mask );
 8003d1a:	260f      	movs	r6, #15
 8003d1c:	19bc      	adds	r4, r7, r6
 8003d1e:	197a      	adds	r2, r7, r5
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	0011      	movs	r1, r2
 8003d24:	0018      	movs	r0, r3
 8003d26:	f7ff ff9d 	bl	8003c64 <sx126x_get_irq_status>
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	7023      	strb	r3, [r4, #0]

    if( ( status == SX126X_STATUS_OK ) && ( sx126x_irq_mask != 0 ) )
 8003d2e:	0031      	movs	r1, r6
 8003d30:	187b      	adds	r3, r7, r1
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10d      	bne.n	8003d54 <sx126x_get_and_clear_irq_status+0x4c>
 8003d38:	197b      	adds	r3, r7, r5
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d009      	beq.n	8003d54 <sx126x_get_and_clear_irq_status+0x4c>
    {
        status = sx126x_clear_irq_status( context, sx126x_irq_mask );
 8003d40:	197b      	adds	r3, r7, r5
 8003d42:	881a      	ldrh	r2, [r3, #0]
 8003d44:	187c      	adds	r4, r7, r1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	0011      	movs	r1, r2
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f7ff ffb8 	bl	8003cc0 <sx126x_clear_irq_status>
 8003d50:	0003      	movs	r3, r0
 8003d52:	7023      	strb	r3, [r4, #0]
    }
    if( ( status == SX126X_STATUS_OK ) && ( irq != NULL ) )
 8003d54:	230f      	movs	r3, #15
 8003d56:	18fb      	adds	r3, r7, r3
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d107      	bne.n	8003d6e <sx126x_get_and_clear_irq_status+0x66>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d004      	beq.n	8003d6e <sx126x_get_and_clear_irq_status+0x66>
    {
        *irq = sx126x_irq_mask;
 8003d64:	230c      	movs	r3, #12
 8003d66:	18fb      	adds	r3, r7, r3
 8003d68:	881a      	ldrh	r2, [r3, #0]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	801a      	strh	r2, [r3, #0]
    }
    return status;
 8003d6e:	230f      	movs	r3, #15
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	781b      	ldrb	r3, [r3, #0]
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b005      	add	sp, #20
 8003d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d7c <sx126x_set_dio2_as_rf_sw_ctrl>:

sx126x_status_t sx126x_set_dio2_as_rf_sw_ctrl( const void* context, const bool enable )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	000a      	movs	r2, r1
 8003d86:	1cfb      	adds	r3, r7, #3
 8003d88:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = {
 8003d8a:	210c      	movs	r1, #12
 8003d8c:	187b      	adds	r3, r7, r1
 8003d8e:	229d      	movs	r2, #157	@ 0x9d
 8003d90:	701a      	strb	r2, [r3, #0]
        SX126X_SET_DIO2_AS_RF_SWITCH_CTRL,
        ( enable == true ) ? 1 : 0,
 8003d92:	1cfb      	adds	r3, r7, #3
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	001a      	movs	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL] = {
 8003d98:	187b      	adds	r3, r7, r1
 8003d9a:	705a      	strb	r2, [r3, #1]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO2_AS_RF_SWITCH_CTRL, 0, 0 );
 8003d9c:	1879      	adds	r1, r7, r1
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	2300      	movs	r3, #0
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	2300      	movs	r3, #0
 8003da6:	2202      	movs	r2, #2
 8003da8:	f000 fbc8 	bl	800453c <sx126x_hal_write>
 8003dac:	0003      	movs	r3, r0
}
 8003dae:	0018      	movs	r0, r3
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b004      	add	sp, #16
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <sx126x_set_dio3_as_tcxo_ctrl>:

sx126x_status_t sx126x_set_dio3_as_tcxo_ctrl( const void* context, const sx126x_tcxo_ctrl_voltages_t tcxo_voltage,
                                              const uint32_t timeout )
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b088      	sub	sp, #32
 8003dba:	af02      	add	r7, sp, #8
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	607a      	str	r2, [r7, #4]
 8003dc0:	200b      	movs	r0, #11
 8003dc2:	183b      	adds	r3, r7, r0
 8003dc4:	1c0a      	adds	r2, r1, #0
 8003dc6:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 8003dc8:	2110      	movs	r1, #16
 8003dca:	187b      	adds	r3, r7, r1
 8003dcc:	2297      	movs	r2, #151	@ 0x97
 8003dce:	701a      	strb	r2, [r3, #0]
 8003dd0:	187b      	adds	r3, r7, r1
 8003dd2:	183a      	adds	r2, r7, r0
 8003dd4:	7812      	ldrb	r2, [r2, #0]
 8003dd6:	705a      	strb	r2, [r3, #1]
        SX126X_SET_DIO3_AS_TCXO_CTRL, ( uint8_t ) tcxo_voltage,    ( uint8_t )( timeout >> 16 ),
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	0c1b      	lsrs	r3, r3, #16
 8003ddc:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 8003dde:	187b      	adds	r3, r7, r1
 8003de0:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	0a1b      	lsrs	r3, r3, #8
 8003de6:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 8003de8:	187b      	adds	r3, r7, r1
 8003dea:	70da      	strb	r2, [r3, #3]
        ( uint8_t )( timeout >> 8 ),  ( uint8_t )( timeout >> 0 ),
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL] = {
 8003df0:	187b      	adds	r3, r7, r1
 8003df2:	711a      	strb	r2, [r3, #4]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_DIO3_AS_TCXO_CTRL, 0, 0 );
 8003df4:	1879      	adds	r1, r7, r1
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	2205      	movs	r2, #5
 8003e00:	f000 fb9c 	bl	800453c <sx126x_hal_write>
 8003e04:	0003      	movs	r3, r0
}
 8003e06:	0018      	movs	r0, r3
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	b006      	add	sp, #24
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <sx126x_set_rf_freq>:
//
// RF Modulation and Packet-Related Functions
//

sx126x_status_t sx126x_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
 8003e16:	6039      	str	r1, [r7, #0]
    const uint32_t freq = sx126x_convert_freq_in_hz_to_pll_step( freq_in_hz );
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f000 fa42 	bl	80042a4 <sx126x_convert_freq_in_hz_to_pll_step>
 8003e20:	0003      	movs	r3, r0
 8003e22:	60fb      	str	r3, [r7, #12]

    return sx126x_set_rf_freq_in_pll_steps( context, freq );
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0011      	movs	r1, r2
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f000 f805 	bl	8003e3a <sx126x_set_rf_freq_in_pll_steps>
 8003e30:	0003      	movs	r3, r0
}
 8003e32:	0018      	movs	r0, r3
 8003e34:	46bd      	mov	sp, r7
 8003e36:	b004      	add	sp, #16
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <sx126x_set_rf_freq_in_pll_steps>:

sx126x_status_t sx126x_set_rf_freq_in_pll_steps( const void* context, const uint32_t freq )
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b086      	sub	sp, #24
 8003e3e:	af02      	add	r7, sp, #8
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8003e44:	2108      	movs	r1, #8
 8003e46:	187b      	adds	r3, r7, r1
 8003e48:	2286      	movs	r2, #134	@ 0x86
 8003e4a:	701a      	strb	r2, [r3, #0]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	0e1b      	lsrs	r3, r3, #24
 8003e50:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8003e52:	187b      	adds	r3, r7, r1
 8003e54:	705a      	strb	r2, [r3, #1]
        SX126X_SET_RF_FREQUENCY,  ( uint8_t )( freq >> 24 ), ( uint8_t )( freq >> 16 ),
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	0c1b      	lsrs	r3, r3, #16
 8003e5a:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8003e5c:	187b      	adds	r3, r7, r1
 8003e5e:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	0a1b      	lsrs	r3, r3, #8
 8003e64:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8003e66:	187b      	adds	r3, r7, r1
 8003e68:	70da      	strb	r2, [r3, #3]
        ( uint8_t )( freq >> 8 ), ( uint8_t )( freq >> 0 ),
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_RF_FREQUENCY] = {
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	711a      	strb	r2, [r3, #4]
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_RF_FREQUENCY, 0, 0 );
 8003e72:	1879      	adds	r1, r7, r1
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	2300      	movs	r3, #0
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	2205      	movs	r2, #5
 8003e7e:	f000 fb5d 	bl	800453c <sx126x_hal_write>
 8003e82:	0003      	movs	r3, r0
}
 8003e84:	0018      	movs	r0, r3
 8003e86:	46bd      	mov	sp, r7
 8003e88:	b004      	add	sp, #16
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <sx126x_set_pkt_type>:

sx126x_status_t sx126x_set_pkt_type( const void* context, const sx126x_pkt_type_t pkt_type )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	000a      	movs	r2, r1
 8003e96:	1cfb      	adds	r3, r7, #3
 8003e98:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_PKT_TYPE] = {
 8003e9a:	210c      	movs	r1, #12
 8003e9c:	187b      	adds	r3, r7, r1
 8003e9e:	228a      	movs	r2, #138	@ 0x8a
 8003ea0:	701a      	strb	r2, [r3, #0]
 8003ea2:	187b      	adds	r3, r7, r1
 8003ea4:	1cfa      	adds	r2, r7, #3
 8003ea6:	7812      	ldrb	r2, [r2, #0]
 8003ea8:	705a      	strb	r2, [r3, #1]
        SX126X_SET_PKT_TYPE,
        ( uint8_t ) pkt_type,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_TYPE, 0, 0 );
 8003eaa:	1879      	adds	r1, r7, r1
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	f000 fb41 	bl	800453c <sx126x_hal_write>
 8003eba:	0003      	movs	r3, r0
}
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	b004      	add	sp, #16
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <sx126x_get_pkt_type>:

sx126x_status_t sx126x_get_pkt_type( const void* context, sx126x_pkt_type_t* pkt_type )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_GET_PKT_TYPE] = {
 8003ece:	210c      	movs	r1, #12
 8003ed0:	187b      	adds	r3, r7, r1
 8003ed2:	2211      	movs	r2, #17
 8003ed4:	801a      	strh	r2, [r3, #0]
        SX126X_GET_PKT_TYPE,
        SX126X_NOP,
    };

    return ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_PKT_TYPE, ( uint8_t* ) pkt_type, 1 );
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	1879      	adds	r1, r7, r1
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	9200      	str	r2, [sp, #0]
 8003ee0:	2202      	movs	r2, #2
 8003ee2:	f000 fb9d 	bl	8004620 <sx126x_hal_read>
 8003ee6:	0003      	movs	r3, r0
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b004      	add	sp, #16
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <sx126x_set_tx_params>:

sx126x_status_t sx126x_set_tx_params( const void* context, const int8_t pwr_in_dbm, const sx126x_ramp_time_t ramp_time )
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	0008      	movs	r0, r1
 8003efa:	0011      	movs	r1, r2
 8003efc:	1cfb      	adds	r3, r7, #3
 8003efe:	1c02      	adds	r2, r0, #0
 8003f00:	701a      	strb	r2, [r3, #0]
 8003f02:	1cbb      	adds	r3, r7, #2
 8003f04:	1c0a      	adds	r2, r1, #0
 8003f06:	701a      	strb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 8003f08:	210c      	movs	r1, #12
 8003f0a:	187b      	adds	r3, r7, r1
 8003f0c:	228e      	movs	r2, #142	@ 0x8e
 8003f0e:	701a      	strb	r2, [r3, #0]
        SX126X_SET_TX_PARAMS,
        ( uint8_t ) pwr_in_dbm,
 8003f10:	1cfb      	adds	r3, r7, #3
 8003f12:	781a      	ldrb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_TX_PARAMS] = {
 8003f14:	187b      	adds	r3, r7, r1
 8003f16:	705a      	strb	r2, [r3, #1]
 8003f18:	187b      	adds	r3, r7, r1
 8003f1a:	1cba      	adds	r2, r7, #2
 8003f1c:	7812      	ldrb	r2, [r2, #0]
 8003f1e:	709a      	strb	r2, [r3, #2]
        ( uint8_t ) ramp_time,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_TX_PARAMS, 0, 0 );
 8003f20:	1879      	adds	r1, r7, r1
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	2300      	movs	r3, #0
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	2203      	movs	r2, #3
 8003f2c:	f000 fb06 	bl	800453c <sx126x_hal_write>
 8003f30:	0003      	movs	r3, r0
}
 8003f32:	0018      	movs	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b004      	add	sp, #16
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <sx126x_set_lora_mod_params>:

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_BPSK, 0, 0 );
}

sx126x_status_t sx126x_set_lora_mod_params( const void* context, const sx126x_mod_params_lora_t* params )
{
 8003f3a:	b5b0      	push	{r4, r5, r7, lr}
 8003f3c:	b086      	sub	sp, #24
 8003f3e:	af02      	add	r7, sp, #8
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 8003f44:	2108      	movs	r1, #8
 8003f46:	187b      	adds	r3, r7, r1
 8003f48:	228b      	movs	r2, #139	@ 0x8b
 8003f4a:	701a      	strb	r2, [r3, #0]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781a      	ldrb	r2, [r3, #0]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 8003f50:	187b      	adds	r3, r7, r1
 8003f52:	705a      	strb	r2, [r3, #1]
        SX126X_SET_MODULATION_PARAMS, ( uint8_t )( params->sf ), ( uint8_t )( params->bw ),
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	785a      	ldrb	r2, [r3, #1]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 8003f58:	187b      	adds	r3, r7, r1
 8003f5a:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	789a      	ldrb	r2, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 8003f60:	187b      	adds	r3, r7, r1
 8003f62:	70da      	strb	r2, [r3, #3]
        ( uint8_t )( params->cr ),    params->ldro & 0x01,
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	78db      	ldrb	r3, [r3, #3]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_MODULATION_PARAMS_LORA] = {
 8003f6e:	187b      	adds	r3, r7, r1
 8003f70:	711a      	strb	r2, [r3, #4]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_MODULATION_PARAMS_LORA, 0, 0 );
 8003f72:	250f      	movs	r5, #15
 8003f74:	197c      	adds	r4, r7, r5
 8003f76:	1879      	adds	r1, r7, r1
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	2205      	movs	r2, #5
 8003f82:	f000 fadb 	bl	800453c <sx126x_hal_write>
 8003f86:	0003      	movs	r3, r0
 8003f88:	7023      	strb	r3, [r4, #0]

    if( status == SX126X_STATUS_OK )
 8003f8a:	197b      	adds	r3, r7, r5
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d109      	bne.n	8003fa6 <sx126x_set_lora_mod_params+0x6c>
    {
        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see datasheet DS_SX1261-2_V1.2 §15.1
        status = sx126x_tx_modulation_workaround( context, SX126X_PKT_TYPE_LORA, params->bw );
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	785a      	ldrb	r2, [r3, #1]
 8003f96:	197c      	adds	r4, r7, r5
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f000 fa79 	bl	8004494 <sx126x_tx_modulation_workaround>
 8003fa2:	0003      	movs	r3, r0
 8003fa4:	7023      	strb	r3, [r4, #0]
        // WORKAROUND END
    }

    return status;
 8003fa6:	230f      	movs	r3, #15
 8003fa8:	18fb      	adds	r3, r7, r3
 8003faa:	781b      	ldrb	r3, [r3, #0]
}
 8003fac:	0018      	movs	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b004      	add	sp, #16
 8003fb2:	bdb0      	pop	{r4, r5, r7, pc}

08003fb4 <sx126x_set_lora_pkt_params>:

    return sx126x_write_register( context, 0x00F0, buf2, sizeof( buf2 ) );
}

sx126x_status_t sx126x_set_lora_pkt_params( const void* context, const sx126x_pkt_params_lora_t* params )
{
 8003fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fb6:	b089      	sub	sp, #36	@ 0x24
 8003fb8:	af02      	add	r7, sp, #8
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 8003fbe:	2110      	movs	r1, #16
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	228c      	movs	r2, #140	@ 0x8c
 8003fc4:	701a      	strb	r2, [r3, #0]
        SX126X_SET_PKT_PARAMS,
        ( uint8_t )( params->preamble_len_in_symb >> 8 ),
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	0a1b      	lsrs	r3, r3, #8
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 8003fd0:	187b      	adds	r3, r7, r1
 8003fd2:	705a      	strb	r2, [r3, #1]
        ( uint8_t )( params->preamble_len_in_symb >> 0 ),
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	b2da      	uxtb	r2, r3
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 8003fda:	187b      	adds	r3, r7, r1
 8003fdc:	709a      	strb	r2, [r3, #2]
        ( uint8_t )( params->header_type ),
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	789a      	ldrb	r2, [r3, #2]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 8003fe2:	187b      	adds	r3, r7, r1
 8003fe4:	70da      	strb	r2, [r3, #3]
        params->pld_len_in_bytes,
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	78da      	ldrb	r2, [r3, #3]
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 8003fea:	187b      	adds	r3, r7, r1
 8003fec:	711a      	strb	r2, [r3, #4]
        ( uint8_t )( params->crc_is_on ? 1 : 0 ),
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	791b      	ldrb	r3, [r3, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <sx126x_set_lora_pkt_params+0x46>
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	e000      	b.n	8003ffc <sx126x_set_lora_pkt_params+0x48>
 8003ffa:	2200      	movs	r2, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 8003ffc:	2310      	movs	r3, #16
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	715a      	strb	r2, [r3, #5]
        ( uint8_t )( params->invert_iq_is_on ? 1 : 0 ),
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	795b      	ldrb	r3, [r3, #5]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <sx126x_set_lora_pkt_params+0x5a>
 800400a:	2201      	movs	r2, #1
 800400c:	e000      	b.n	8004010 <sx126x_set_lora_pkt_params+0x5c>
 800400e:	2200      	movs	r2, #0
    const uint8_t buf[SX126X_SIZE_SET_PKT_PARAMS_LORA] = {
 8004010:	2110      	movs	r1, #16
 8004012:	187b      	adds	r3, r7, r1
 8004014:	719a      	strb	r2, [r3, #6]
    };

    sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_SET_PKT_PARAMS_LORA, 0, 0 );
 8004016:	2517      	movs	r5, #23
 8004018:	197c      	adds	r4, r7, r5
 800401a:	1879      	adds	r1, r7, r1
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	2300      	movs	r3, #0
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	2300      	movs	r3, #0
 8004024:	2207      	movs	r2, #7
 8004026:	f000 fa89 	bl	800453c <sx126x_hal_write>
 800402a:	0003      	movs	r3, r0
 800402c:	7023      	strb	r3, [r4, #0]

    // WORKAROUND - Optimizing the Inverted IQ Operation, see datasheet DS_SX1261-2_V1.2 §15.4
    if( status == SX126X_STATUS_OK )
 800402e:	197b      	adds	r3, r7, r5
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d12f      	bne.n	8004096 <sx126x_set_lora_pkt_params+0xe2>
    {
        uint8_t reg_value = 0;
 8004036:	260f      	movs	r6, #15
 8004038:	19bb      	adds	r3, r7, r6
 800403a:	2200      	movs	r2, #0
 800403c:	701a      	strb	r2, [r3, #0]

        status = sx126x_read_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 800403e:	197c      	adds	r4, r7, r5
 8004040:	19ba      	adds	r2, r7, r6
 8004042:	4918      	ldr	r1, [pc, #96]	@ (80040a4 <sx126x_set_lora_pkt_params+0xf0>)
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	2301      	movs	r3, #1
 8004048:	f7ff fd34 	bl	8003ab4 <sx126x_read_register>
 800404c:	0003      	movs	r3, r0
 800404e:	7023      	strb	r3, [r4, #0]
        if( status == SX126X_STATUS_OK )
 8004050:	197b      	adds	r3, r7, r5
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d11e      	bne.n	8004096 <sx126x_set_lora_pkt_params+0xe2>
        {
            if( params->invert_iq_is_on == true )
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	795b      	ldrb	r3, [r3, #5]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <sx126x_set_lora_pkt_params+0xbc>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 when using inverted IQ polarity
 8004060:	19bb      	adds	r3, r7, r6
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2204      	movs	r2, #4
 8004066:	4393      	bics	r3, r2
 8004068:	b2da      	uxtb	r2, r3
 800406a:	19bb      	adds	r3, r7, r6
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	e007      	b.n	8004080 <sx126x_set_lora_pkt_params+0xcc>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 when using standard IQ polarity
 8004070:	210f      	movs	r1, #15
 8004072:	187b      	adds	r3, r7, r1
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2204      	movs	r2, #4
 8004078:	4313      	orrs	r3, r2
 800407a:	b2da      	uxtb	r2, r3
 800407c:	187b      	adds	r3, r7, r1
 800407e:	701a      	strb	r2, [r3, #0]
            }
            status = sx126x_write_register( context, SX126X_REG_IQ_POLARITY, &reg_value, 1 );
 8004080:	2317      	movs	r3, #23
 8004082:	18fc      	adds	r4, r7, r3
 8004084:	230f      	movs	r3, #15
 8004086:	18fa      	adds	r2, r7, r3
 8004088:	4906      	ldr	r1, [pc, #24]	@ (80040a4 <sx126x_set_lora_pkt_params+0xf0>)
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	2301      	movs	r3, #1
 800408e:	f7ff fce1 	bl	8003a54 <sx126x_write_register>
 8004092:	0003      	movs	r3, r0
 8004094:	7023      	strb	r3, [r4, #0]
        }
    }
    // WORKAROUND END

    return status;
 8004096:	2317      	movs	r3, #23
 8004098:	18fb      	adds	r3, r7, r3
 800409a:	781b      	ldrb	r3, [r3, #0]
}
 800409c:	0018      	movs	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	b007      	add	sp, #28
 80040a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040a4:	00000736 	.word	0x00000736

080040a8 <sx126x_get_status>:
//
// Communication Status Information
//

sx126x_status_t sx126x_get_status( const void* context, sx126x_chip_status_t* radio_status )
{
 80040a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_GET_STATUS] = {
 80040b2:	210c      	movs	r1, #12
 80040b4:	187b      	adds	r3, r7, r1
 80040b6:	4a17      	ldr	r2, [pc, #92]	@ (8004114 <sx126x_get_status+0x6c>)
 80040b8:	7812      	ldrb	r2, [r2, #0]
 80040ba:	701a      	strb	r2, [r3, #0]
        SX126X_GET_STATUS,
    };
    uint8_t status_local = 0;
 80040bc:	250b      	movs	r5, #11
 80040be:	197b      	adds	r3, r7, r5
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]

    const sx126x_status_t status =
        ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_STATUS, &status_local, 1 );
 80040c4:	260f      	movs	r6, #15
 80040c6:	19bc      	adds	r4, r7, r6
 80040c8:	197b      	adds	r3, r7, r5
 80040ca:	1879      	adds	r1, r7, r1
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	9200      	str	r2, [sp, #0]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f000 faa4 	bl	8004620 <sx126x_hal_read>
 80040d8:	0003      	movs	r3, r0
 80040da:	7023      	strb	r3, [r4, #0]

    if( status == SX126X_STATUS_OK )
 80040dc:	19bb      	adds	r3, r7, r6
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10f      	bne.n	8004104 <sx126x_get_status+0x5c>
    {
        radio_status->cmd_status =
            ( sx126x_cmd_status_t )( ( status_local & SX126X_CMD_STATUS_MASK ) >> SX126X_CMD_STATUS_POS );
 80040e4:	197b      	adds	r3, r7, r5
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	085b      	lsrs	r3, r3, #1
 80040ea:	2207      	movs	r2, #7
 80040ec:	4013      	ands	r3, r2
 80040ee:	b2da      	uxtb	r2, r3
        radio_status->cmd_status =
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	701a      	strb	r2, [r3, #0]
        radio_status->chip_mode =
            ( sx126x_chip_modes_t )( ( status_local & SX126X_CHIP_MODES_MASK ) >> SX126X_CHIP_MODES_POS );
 80040f4:	197b      	adds	r3, r7, r5
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	091b      	lsrs	r3, r3, #4
 80040fa:	2207      	movs	r2, #7
 80040fc:	4013      	ands	r3, r2
 80040fe:	b2da      	uxtb	r2, r3
        radio_status->chip_mode =
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	705a      	strb	r2, [r3, #1]
    }

    return status;
 8004104:	230f      	movs	r3, #15
 8004106:	18fb      	adds	r3, r7, r3
 8004108:	781b      	ldrb	r3, [r3, #0]
}
 800410a:	0018      	movs	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	b005      	add	sp, #20
 8004110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004112:	46c0      	nop			@ (mov r8, r8)
 8004114:	08005b3c 	.word	0x08005b3c

08004118 <sx126x_get_rx_buffer_status>:

sx126x_status_t sx126x_get_rx_buffer_status( const void* context, sx126x_rx_buffer_status_t* rx_buffer_status )
{
 8004118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800411a:	b087      	sub	sp, #28
 800411c:	af02      	add	r7, sp, #8
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_GET_RX_BUFFER_STATUS] = {
 8004122:	210c      	movs	r1, #12
 8004124:	187b      	adds	r3, r7, r1
 8004126:	2213      	movs	r2, #19
 8004128:	801a      	strh	r2, [r3, #0]
        SX126X_GET_RX_BUFFER_STATUS,
        SX126X_NOP,
    };
    uint8_t status_local[sizeof( sx126x_rx_buffer_status_t )] = { 0x00 };
 800412a:	2508      	movs	r5, #8
 800412c:	197b      	adds	r3, r7, r5
 800412e:	2200      	movs	r2, #0
 8004130:	801a      	strh	r2, [r3, #0]

    const sx126x_status_t status = ( sx126x_status_t ) sx126x_hal_read(
 8004132:	260f      	movs	r6, #15
 8004134:	19bc      	adds	r4, r7, r6
 8004136:	197b      	adds	r3, r7, r5
 8004138:	1879      	adds	r1, r7, r1
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	2202      	movs	r2, #2
 800413e:	9200      	str	r2, [sp, #0]
 8004140:	2202      	movs	r2, #2
 8004142:	f000 fa6d 	bl	8004620 <sx126x_hal_read>
 8004146:	0003      	movs	r3, r0
 8004148:	7023      	strb	r3, [r4, #0]
        context, buf, SX126X_SIZE_GET_RX_BUFFER_STATUS, status_local, sizeof( sx126x_rx_buffer_status_t ) );

    if( status == SX126X_STATUS_OK )
 800414a:	19bb      	adds	r3, r7, r6
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d107      	bne.n	8004162 <sx126x_get_rx_buffer_status+0x4a>
    {
        rx_buffer_status->pld_len_in_bytes     = status_local[0];
 8004152:	197b      	adds	r3, r7, r5
 8004154:	781a      	ldrb	r2, [r3, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	701a      	strb	r2, [r3, #0]
        rx_buffer_status->buffer_start_pointer = status_local[1];
 800415a:	197b      	adds	r3, r7, r5
 800415c:	785a      	ldrb	r2, [r3, #1]
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	705a      	strb	r2, [r3, #1]
    }

    return status;
 8004162:	230f      	movs	r3, #15
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	781b      	ldrb	r3, [r3, #0]
}
 8004168:	0018      	movs	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	b005      	add	sp, #20
 800416e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004170 <sx126x_get_lora_stats>:

    return status;
}

sx126x_status_t sx126x_get_lora_stats( const void* context, sx126x_stats_lora_t* stats )
{
 8004170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004172:	b089      	sub	sp, #36	@ 0x24
 8004174:	af02      	add	r7, sp, #8
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_GET_STATS] = {
 800417a:	2114      	movs	r1, #20
 800417c:	187b      	adds	r3, r7, r1
 800417e:	2210      	movs	r2, #16
 8004180:	801a      	strh	r2, [r3, #0]
        SX126X_GET_STATS,
        SX126X_NOP,
    };
    uint8_t stats_local[sizeof( sx126x_stats_lora_t )] = { 0 };
 8004182:	250c      	movs	r5, #12
 8004184:	197b      	adds	r3, r7, r5
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	2200      	movs	r2, #0
 800418c:	809a      	strh	r2, [r3, #4]

    const sx126x_status_t status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_STATS,
 800418e:	2617      	movs	r6, #23
 8004190:	19bc      	adds	r4, r7, r6
 8004192:	197b      	adds	r3, r7, r5
 8004194:	1879      	adds	r1, r7, r1
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	2206      	movs	r2, #6
 800419a:	9200      	str	r2, [sp, #0]
 800419c:	2202      	movs	r2, #2
 800419e:	f000 fa3f 	bl	8004620 <sx126x_hal_read>
 80041a2:	0003      	movs	r3, r0
 80041a4:	7023      	strb	r3, [r4, #0]
                                                                        stats_local, sizeof( sx126x_stats_lora_t ) );

    if( status == SX126X_STATUS_OK )
 80041a6:	19bb      	adds	r3, r7, r6
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d11e      	bne.n	80041ec <sx126x_get_lora_stats+0x7c>
    {
        stats->nb_pkt_received     = ( ( uint16_t ) stats_local[0] << 8 ) + ( uint16_t ) stats_local[1];
 80041ae:	0029      	movs	r1, r5
 80041b0:	187b      	adds	r3, r7, r1
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	021b      	lsls	r3, r3, #8
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	187a      	adds	r2, r7, r1
 80041ba:	7852      	ldrb	r2, [r2, #1]
 80041bc:	189b      	adds	r3, r3, r2
 80041be:	b29a      	uxth	r2, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	801a      	strh	r2, [r3, #0]
        stats->nb_pkt_crc_error    = ( ( uint16_t ) stats_local[2] << 8 ) + ( uint16_t ) stats_local[3];
 80041c4:	187b      	adds	r3, r7, r1
 80041c6:	789b      	ldrb	r3, [r3, #2]
 80041c8:	021b      	lsls	r3, r3, #8
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	187a      	adds	r2, r7, r1
 80041ce:	78d2      	ldrb	r2, [r2, #3]
 80041d0:	189b      	adds	r3, r3, r2
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	805a      	strh	r2, [r3, #2]
        stats->nb_pkt_header_error = ( ( uint16_t ) stats_local[4] << 8 ) + ( uint16_t ) stats_local[5];
 80041d8:	187b      	adds	r3, r7, r1
 80041da:	791b      	ldrb	r3, [r3, #4]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	b29b      	uxth	r3, r3
 80041e0:	187a      	adds	r2, r7, r1
 80041e2:	7952      	ldrb	r2, [r2, #5]
 80041e4:	189b      	adds	r3, r3, r2
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	809a      	strh	r2, [r3, #4]
    }
    return status;
 80041ec:	2317      	movs	r3, #23
 80041ee:	18fb      	adds	r3, r7, r3
 80041f0:	781b      	ldrb	r3, [r3, #0]
}
 80041f2:	0018      	movs	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b007      	add	sp, #28
 80041f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041fa <sx126x_reset>:
//
// Miscellaneous
//

sx126x_status_t sx126x_reset( const void* context )
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b082      	sub	sp, #8
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
    return ( sx126x_status_t ) sx126x_hal_reset( context );
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	0018      	movs	r0, r3
 8004206:	f000 fa7d 	bl	8004704 <sx126x_hal_reset>
 800420a:	0003      	movs	r3, r0
}
 800420c:	0018      	movs	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	b002      	add	sp, #8
 8004212:	bd80      	pop	{r7, pc}

08004214 <sx126x_get_device_errors>:
{
    return ( sx126x_status_t ) sx126x_hal_wakeup( context );
}

sx126x_status_t sx126x_get_device_errors( const void* context, sx126x_errors_mask_t* errors )
{
 8004214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004216:	b087      	sub	sp, #28
 8004218:	af02      	add	r7, sp, #8
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
    const uint8_t buf[SX126X_SIZE_GET_DEVICE_ERRORS] = {
 800421e:	210c      	movs	r1, #12
 8004220:	187b      	adds	r3, r7, r1
 8004222:	2217      	movs	r2, #23
 8004224:	801a      	strh	r2, [r3, #0]
        SX126X_GET_DEVICE_ERRORS,
        SX126X_NOP,
    };
    uint8_t errors_local[sizeof( sx126x_errors_mask_t )] = { 0x00 };
 8004226:	2508      	movs	r5, #8
 8004228:	197b      	adds	r3, r7, r5
 800422a:	2200      	movs	r2, #0
 800422c:	801a      	strh	r2, [r3, #0]

    const sx126x_status_t status = ( sx126x_status_t ) sx126x_hal_read( context, buf, SX126X_SIZE_GET_DEVICE_ERRORS,
 800422e:	260f      	movs	r6, #15
 8004230:	19bc      	adds	r4, r7, r6
 8004232:	197b      	adds	r3, r7, r5
 8004234:	1879      	adds	r1, r7, r1
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	2202      	movs	r2, #2
 800423a:	9200      	str	r2, [sp, #0]
 800423c:	2202      	movs	r2, #2
 800423e:	f000 f9ef 	bl	8004620 <sx126x_hal_read>
 8004242:	0003      	movs	r3, r0
 8004244:	7023      	strb	r3, [r4, #0]
                                                                        errors_local, sizeof( sx126x_errors_mask_t ) );

    if( status == SX126X_STATUS_OK )
 8004246:	19bb      	adds	r3, r7, r6
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <sx126x_get_device_errors+0x4e>
    {
        *errors = ( ( sx126x_errors_mask_t ) errors_local[0] << 8 ) + ( ( sx126x_errors_mask_t ) errors_local[1] << 0 );
 800424e:	197b      	adds	r3, r7, r5
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	b29b      	uxth	r3, r3
 8004256:	197a      	adds	r2, r7, r5
 8004258:	7852      	ldrb	r2, [r2, #1]
 800425a:	189b      	adds	r3, r3, r2
 800425c:	b29a      	uxth	r2, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	801a      	strh	r2, [r3, #0]
    }

    return status;
 8004262:	230f      	movs	r3, #15
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	781b      	ldrb	r3, [r3, #0]
}
 8004268:	0018      	movs	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	b005      	add	sp, #20
 800426e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004270 <sx126x_clear_device_errors>:

sx126x_status_t sx126x_clear_device_errors( const void* context )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af02      	add	r7, sp, #8
 8004276:	6078      	str	r0, [r7, #4]
    const uint8_t buf[SX126X_SIZE_CLR_DEVICE_ERRORS] = {
 8004278:	200c      	movs	r0, #12
 800427a:	183b      	adds	r3, r7, r0
 800427c:	4a08      	ldr	r2, [pc, #32]	@ (80042a0 <sx126x_clear_device_errors+0x30>)
 800427e:	8811      	ldrh	r1, [r2, #0]
 8004280:	8019      	strh	r1, [r3, #0]
 8004282:	7892      	ldrb	r2, [r2, #2]
 8004284:	709a      	strb	r2, [r3, #2]
        SX126X_CLR_DEVICE_ERRORS,
        SX126X_NOP,
        SX126X_NOP,
    };

    return ( sx126x_status_t ) sx126x_hal_write( context, buf, SX126X_SIZE_CLR_DEVICE_ERRORS, 0, 0 );
 8004286:	1839      	adds	r1, r7, r0
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	2300      	movs	r3, #0
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	2300      	movs	r3, #0
 8004290:	2203      	movs	r2, #3
 8004292:	f000 f953 	bl	800453c <sx126x_hal_write>
 8004296:	0003      	movs	r3, r0
}
 8004298:	0018      	movs	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	b004      	add	sp, #16
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	08005b4c 	.word	0x08005b4c

080042a4 <sx126x_convert_freq_in_hz_to_pll_step>:

    return status;
}

uint32_t sx126x_convert_freq_in_hz_to_pll_step( uint32_t freq_in_hz )
{
 80042a4:	b590      	push	{r4, r7, lr}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
    uint32_t steps_int;
    uint32_t steps_frac;

    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    steps_int  = freq_in_hz / SX126X_PLL_STEP_SCALED;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4911      	ldr	r1, [pc, #68]	@ (80042f4 <sx126x_convert_freq_in_hz_to_pll_step+0x50>)
 80042b0:	0018      	movs	r0, r3
 80042b2:	f7fb ff2f 	bl	8000114 <__udivsi3>
 80042b6:	0003      	movs	r3, r0
 80042b8:	60fb      	str	r3, [r7, #12]
    steps_frac = freq_in_hz - ( steps_int * SX126X_PLL_STEP_SCALED );
 80042ba:	68f9      	ldr	r1, [r7, #12]
 80042bc:	000b      	movs	r3, r1
 80042be:	015b      	lsls	r3, r3, #5
 80042c0:	1a5b      	subs	r3, r3, r1
 80042c2:	019a      	lsls	r2, r3, #6
 80042c4:	1ad2      	subs	r2, r2, r3
 80042c6:	00d2      	lsls	r2, r2, #3
 80042c8:	1853      	adds	r3, r2, r1
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	60bb      	str	r3, [r7, #8]

    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	039c      	lsls	r4, r3, #14
           ( ( ( steps_frac << SX126X_PLL_STEP_SHIFT_AMOUNT ) + ( SX126X_PLL_STEP_SCALED >> 1 ) ) /
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	039b      	lsls	r3, r3, #14
 80042d8:	4a07      	ldr	r2, [pc, #28]	@ (80042f8 <sx126x_convert_freq_in_hz_to_pll_step+0x54>)
 80042da:	4694      	mov	ip, r2
 80042dc:	4463      	add	r3, ip
 80042de:	4905      	ldr	r1, [pc, #20]	@ (80042f4 <sx126x_convert_freq_in_hz_to_pll_step+0x50>)
 80042e0:	0018      	movs	r0, r3
 80042e2:	f7fb ff17 	bl	8000114 <__udivsi3>
 80042e6:	0003      	movs	r3, r0
    return ( steps_int << SX126X_PLL_STEP_SHIFT_AMOUNT ) +
 80042e8:	18e3      	adds	r3, r4, r3
             SX126X_PLL_STEP_SCALED );
}
 80042ea:	0018      	movs	r0, r3
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b005      	add	sp, #20
 80042f0:	bd90      	pop	{r4, r7, pc}
 80042f2:	46c0      	nop			@ (mov r8, r8)
 80042f4:	00003d09 	.word	0x00003d09
 80042f8:	00001e84 	.word	0x00001e84

080042fc <sx126x_convert_timeout_in_ms_to_rtc_step>:

uint32_t sx126x_convert_timeout_in_ms_to_rtc_step( uint32_t timeout_in_ms )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( timeout_in_ms * ( SX126X_RTC_FREQ_IN_HZ / 1000 ) );
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	019b      	lsls	r3, r3, #6
}
 8004308:	0018      	movs	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	b002      	add	sp, #8
 800430e:	bd80      	pop	{r7, pc}

08004310 <sx126x_handle_rx_done>:

sx126x_status_t sx126x_handle_rx_done( const void* context )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
    return sx126x_stop_rtc( context );
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	0018      	movs	r0, r3
 800431c:	f000 f87a 	bl	8004414 <sx126x_stop_rtc>
 8004320:	0003      	movs	r3, r0
}
 8004322:	0018      	movs	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	b002      	add	sp, #8
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <sx126x_cfg_rx_boosted>:
//
// Registers access
//

sx126x_status_t sx126x_cfg_rx_boosted( const void* context, const bool state )
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	000a      	movs	r2, r1
 8004336:	1cfb      	adds	r3, r7, #3
 8004338:	701a      	strb	r2, [r3, #0]
    if( state == true )
 800433a:	1cfb      	adds	r3, r7, #3
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00b      	beq.n	800435a <sx126x_cfg_rx_boosted+0x2e>
    {
        return sx126x_write_register( context, SX126X_REG_RXGAIN, ( const uint8_t[] ){ 0x96 }, 1 );
 8004342:	210c      	movs	r1, #12
 8004344:	187b      	adds	r3, r7, r1
 8004346:	2296      	movs	r2, #150	@ 0x96
 8004348:	701a      	strb	r2, [r3, #0]
 800434a:	187a      	adds	r2, r7, r1
 800434c:	490a      	ldr	r1, [pc, #40]	@ (8004378 <sx126x_cfg_rx_boosted+0x4c>)
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	2301      	movs	r3, #1
 8004352:	f7ff fb7f 	bl	8003a54 <sx126x_write_register>
 8004356:	0003      	movs	r3, r0
 8004358:	e00a      	b.n	8004370 <sx126x_cfg_rx_boosted+0x44>
    }
    else
    {
        return sx126x_write_register( context, SX126X_REG_RXGAIN, ( const uint8_t[] ){ 0x94 }, 1 );
 800435a:	2108      	movs	r1, #8
 800435c:	187b      	adds	r3, r7, r1
 800435e:	2294      	movs	r2, #148	@ 0x94
 8004360:	701a      	strb	r2, [r3, #0]
 8004362:	187a      	adds	r2, r7, r1
 8004364:	4904      	ldr	r1, [pc, #16]	@ (8004378 <sx126x_cfg_rx_boosted+0x4c>)
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	2301      	movs	r3, #1
 800436a:	f7ff fb73 	bl	8003a54 <sx126x_write_register>
 800436e:	0003      	movs	r3, r0
    }
}
 8004370:	0018      	movs	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	b004      	add	sp, #16
 8004376:	bd80      	pop	{r7, pc}
 8004378:	000008ac 	.word	0x000008ac

0800437c <sx126x_set_lora_sync_word>:

    return status;
}

sx126x_status_t sx126x_set_lora_sync_word( const void* context, const uint8_t sync_word )
{
 800437c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	000a      	movs	r2, r1
 8004386:	1cfb      	adds	r3, r7, #3
 8004388:	701a      	strb	r2, [r3, #0]
    uint8_t buffer[2] = { 0x00 };
 800438a:	250c      	movs	r5, #12
 800438c:	197b      	adds	r3, r7, r5
 800438e:	2200      	movs	r2, #0
 8004390:	801a      	strh	r2, [r3, #0]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 8004392:	260f      	movs	r6, #15
 8004394:	19bc      	adds	r4, r7, r6
 8004396:	197a      	adds	r2, r7, r5
 8004398:	23e8      	movs	r3, #232	@ 0xe8
 800439a:	00d9      	lsls	r1, r3, #3
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	2302      	movs	r3, #2
 80043a0:	f7ff fb88 	bl	8003ab4 <sx126x_read_register>
 80043a4:	0003      	movs	r3, r0
 80043a6:	7023      	strb	r3, [r4, #0]

    if( status == SX126X_STATUS_OK )
 80043a8:	0034      	movs	r4, r6
 80043aa:	193b      	adds	r3, r7, r4
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d128      	bne.n	8004404 <sx126x_set_lora_sync_word+0x88>
    {
        buffer[0] = ( buffer[0] & ~0xF0 ) + ( sync_word & 0xF0 );
 80043b2:	0028      	movs	r0, r5
 80043b4:	183b      	adds	r3, r7, r0
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	b25b      	sxtb	r3, r3
 80043ba:	220f      	movs	r2, #15
 80043bc:	4013      	ands	r3, r2
 80043be:	b25a      	sxtb	r2, r3
 80043c0:	1cfb      	adds	r3, r7, #3
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	b25b      	sxtb	r3, r3
 80043c6:	210f      	movs	r1, #15
 80043c8:	438b      	bics	r3, r1
 80043ca:	b25b      	sxtb	r3, r3
 80043cc:	4313      	orrs	r3, r2
 80043ce:	b25b      	sxtb	r3, r3
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	183b      	adds	r3, r7, r0
 80043d4:	701a      	strb	r2, [r3, #0]
        buffer[1] = ( buffer[1] & ~0xF0 ) + ( ( sync_word & 0x0F ) << 4 );
 80043d6:	183b      	adds	r3, r7, r0
 80043d8:	785b      	ldrb	r3, [r3, #1]
 80043da:	220f      	movs	r2, #15
 80043dc:	4013      	ands	r3, r2
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	1cfb      	adds	r3, r7, #3
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	18d3      	adds	r3, r2, r3
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	183b      	adds	r3, r7, r0
 80043ee:	705a      	strb	r2, [r3, #1]

        status = sx126x_write_register( context, SX126X_REG_LR_SYNCWORD, buffer, 2 );
 80043f0:	193c      	adds	r4, r7, r4
 80043f2:	183a      	adds	r2, r7, r0
 80043f4:	23e8      	movs	r3, #232	@ 0xe8
 80043f6:	00d9      	lsls	r1, r3, #3
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	2302      	movs	r3, #2
 80043fc:	f7ff fb2a 	bl	8003a54 <sx126x_write_register>
 8004400:	0003      	movs	r3, r0
 8004402:	7023      	strb	r3, [r4, #0]
    }

    return status;
 8004404:	230f      	movs	r3, #15
 8004406:	18fb      	adds	r3, r7, r3
 8004408:	781b      	ldrb	r3, [r3, #0]
}
 800440a:	0018      	movs	r0, r3
 800440c:	46bd      	mov	sp, r7
 800440e:	b005      	add	sp, #20
 8004410:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004414 <sx126x_stop_rtc>:

    return status;
}

sx126x_status_t sx126x_stop_rtc( const void* context )
{
 8004414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
    uint8_t reg_value = 0;
 800441c:	250e      	movs	r5, #14
 800441e:	197b      	adds	r3, r7, r5
 8004420:	2200      	movs	r2, #0
 8004422:	701a      	strb	r2, [r3, #0]

    sx126x_status_t status = sx126x_write_register( context, SX126X_REG_RTC_CTRL, &reg_value, 1 );
 8004424:	260f      	movs	r6, #15
 8004426:	19bc      	adds	r4, r7, r6
 8004428:	197a      	adds	r2, r7, r5
 800442a:	4918      	ldr	r1, [pc, #96]	@ (800448c <sx126x_stop_rtc+0x78>)
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	2301      	movs	r3, #1
 8004430:	f7ff fb10 	bl	8003a54 <sx126x_write_register>
 8004434:	0003      	movs	r3, r0
 8004436:	7023      	strb	r3, [r4, #0]

    if( status == SX126X_STATUS_OK )
 8004438:	19bb      	adds	r3, r7, r6
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d11d      	bne.n	800447c <sx126x_stop_rtc+0x68>
    {
        status = sx126x_read_register( context, SX126X_REG_EVT_CLR, &reg_value, 1 );
 8004440:	19bc      	adds	r4, r7, r6
 8004442:	197a      	adds	r2, r7, r5
 8004444:	4912      	ldr	r1, [pc, #72]	@ (8004490 <sx126x_stop_rtc+0x7c>)
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	2301      	movs	r3, #1
 800444a:	f7ff fb33 	bl	8003ab4 <sx126x_read_register>
 800444e:	0003      	movs	r3, r0
 8004450:	7023      	strb	r3, [r4, #0]

        if( status == SX126X_STATUS_OK )
 8004452:	0031      	movs	r1, r6
 8004454:	187b      	adds	r3, r7, r1
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10f      	bne.n	800447c <sx126x_stop_rtc+0x68>
        {
            reg_value |= SX126X_REG_EVT_CLR_TIMEOUT_MASK;
 800445c:	197b      	adds	r3, r7, r5
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2202      	movs	r2, #2
 8004462:	4313      	orrs	r3, r2
 8004464:	b2da      	uxtb	r2, r3
 8004466:	197b      	adds	r3, r7, r5
 8004468:	701a      	strb	r2, [r3, #0]
            status = sx126x_write_register( context, SX126X_REG_EVT_CLR, &reg_value, 1 );
 800446a:	187c      	adds	r4, r7, r1
 800446c:	197a      	adds	r2, r7, r5
 800446e:	4908      	ldr	r1, [pc, #32]	@ (8004490 <sx126x_stop_rtc+0x7c>)
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	2301      	movs	r3, #1
 8004474:	f7ff faee 	bl	8003a54 <sx126x_write_register>
 8004478:	0003      	movs	r3, r0
 800447a:	7023      	strb	r3, [r4, #0]
        }
    }

    return status;
 800447c:	230f      	movs	r3, #15
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	781b      	ldrb	r3, [r3, #0]
}
 8004482:	0018      	movs	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	b005      	add	sp, #20
 8004488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800448a:	46c0      	nop			@ (mov r8, r8)
 800448c:	00000902 	.word	0x00000902
 8004490:	00000944 	.word	0x00000944

08004494 <sx126x_tx_modulation_workaround>:
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static sx126x_status_t sx126x_tx_modulation_workaround( const void* context, sx126x_pkt_type_t pkt_type,
                                                        sx126x_lora_bw_t bw )
{
 8004494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	0008      	movs	r0, r1
 800449e:	0011      	movs	r1, r2
 80044a0:	1cfb      	adds	r3, r7, #3
 80044a2:	1c02      	adds	r2, r0, #0
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	1cbb      	adds	r3, r7, #2
 80044a8:	1c0a      	adds	r2, r1, #0
 80044aa:	701a      	strb	r2, [r3, #0]
    uint8_t reg_value = 0;
 80044ac:	250e      	movs	r5, #14
 80044ae:	197b      	adds	r3, r7, r5
 80044b0:	2200      	movs	r2, #0
 80044b2:	701a      	strb	r2, [r3, #0]

    sx126x_status_t status = sx126x_read_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 80044b4:	260f      	movs	r6, #15
 80044b6:	19bc      	adds	r4, r7, r6
 80044b8:	197a      	adds	r2, r7, r5
 80044ba:	491f      	ldr	r1, [pc, #124]	@ (8004538 <sx126x_tx_modulation_workaround+0xa4>)
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	2301      	movs	r3, #1
 80044c0:	f7ff faf8 	bl	8003ab4 <sx126x_read_register>
 80044c4:	0003      	movs	r3, r0
 80044c6:	7023      	strb	r3, [r4, #0]

    if( status == SX126X_STATUS_OK )
 80044c8:	19bb      	adds	r3, r7, r6
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d12b      	bne.n	8004528 <sx126x_tx_modulation_workaround+0x94>
    {
        if( pkt_type == SX126X_PKT_TYPE_LORA )
 80044d0:	1cfb      	adds	r3, r7, #3
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d114      	bne.n	8004502 <sx126x_tx_modulation_workaround+0x6e>
        {
            if( bw == SX126X_LORA_BW_500 )
 80044d8:	1cbb      	adds	r3, r7, #2
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b06      	cmp	r3, #6
 80044de:	d107      	bne.n	80044f0 <sx126x_tx_modulation_workaround+0x5c>
            {
                reg_value &= ~( 1 << 2 );  // Bit 2 set to 0 if the LoRa BW = 500 kHz
 80044e0:	197b      	adds	r3, r7, r5
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2204      	movs	r2, #4
 80044e6:	4393      	bics	r3, r2
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	197b      	adds	r3, r7, r5
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	e010      	b.n	8004512 <sx126x_tx_modulation_workaround+0x7e>
            }
            else
            {
                reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any other LoRa BW
 80044f0:	210e      	movs	r1, #14
 80044f2:	187b      	adds	r3, r7, r1
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2204      	movs	r2, #4
 80044f8:	4313      	orrs	r3, r2
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	187b      	adds	r3, r7, r1
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	e007      	b.n	8004512 <sx126x_tx_modulation_workaround+0x7e>
            }
        }
        else
        {
            reg_value |= ( 1 << 2 );  // Bit 2 set to 1 for any (G)FSK configuration
 8004502:	210e      	movs	r1, #14
 8004504:	187b      	adds	r3, r7, r1
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2204      	movs	r2, #4
 800450a:	4313      	orrs	r3, r2
 800450c:	b2da      	uxtb	r2, r3
 800450e:	187b      	adds	r3, r7, r1
 8004510:	701a      	strb	r2, [r3, #0]
        }

        status = sx126x_write_register( context, SX126X_REG_TX_MODULATION, &reg_value, 1 );
 8004512:	230f      	movs	r3, #15
 8004514:	18fc      	adds	r4, r7, r3
 8004516:	230e      	movs	r3, #14
 8004518:	18fa      	adds	r2, r7, r3
 800451a:	4907      	ldr	r1, [pc, #28]	@ (8004538 <sx126x_tx_modulation_workaround+0xa4>)
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	2301      	movs	r3, #1
 8004520:	f7ff fa98 	bl	8003a54 <sx126x_write_register>
 8004524:	0003      	movs	r3, r0
 8004526:	7023      	strb	r3, [r4, #0]
    }
    return status;
 8004528:	230f      	movs	r3, #15
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	781b      	ldrb	r3, [r3, #0]
}
 800452e:	0018      	movs	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	b005      	add	sp, #20
 8004534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004536:	46c0      	nop			@ (mov r8, r8)
 8004538:	00000889 	.word	0x00000889

0800453c <sx126x_hal_write>:
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_write( const void* context, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length )

{
 800453c:	b5b0      	push	{r4, r5, r7, lr}
 800453e:	b088      	sub	sp, #32
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	1dbb      	adds	r3, r7, #6
 800454a:	801a      	strh	r2, [r3, #0]
	const LoRaConfig* sx126x_context = ( const LoRaConfig* ) context;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	613b      	str	r3, [r7, #16]
	HAL_StatusTypeDef status_cmd ,status_data;
	sx126x_hal_status_t status = SX126X_HAL_STATUS_SPI_FAULT;
 8004550:	2315      	movs	r3, #21
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	2201      	movs	r2, #1
 8004556:	701a      	strb	r2, [r3, #0]

	sx126x_hal_wait_on_busy( sx126x_context );
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	0018      	movs	r0, r3
 800455c:	f000 f8f3 	bl	8004746 <sx126x_hal_wait_on_busy>

	HAL_GPIO_WritePin(sx126x_context->NSS_port, sx126x_context->NSS_pin, GPIO_PIN_RESET);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	889b      	ldrh	r3, [r3, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	0019      	movs	r1, r3
 800456c:	f7fc ffe3 	bl	8001536 <HAL_GPIO_WritePin>
	if(command != NULL && command_length > 0)
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d014      	beq.n	80045a0 <sx126x_hal_write+0x64>
 8004576:	1dbb      	adds	r3, r7, #6
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d010      	beq.n	80045a0 <sx126x_hal_write+0x64>
	{
		status_cmd = HAL_SPI_TransmitReceive(sx126x_context->hSPIx, command, _null, command_length, 500);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	6a18      	ldr	r0, [r3, #32]
 8004582:	2317      	movs	r3, #23
 8004584:	18fc      	adds	r4, r7, r3
 8004586:	1dbb      	adds	r3, r7, #6
 8004588:	881d      	ldrh	r5, [r3, #0]
 800458a:	4a24      	ldr	r2, [pc, #144]	@ (800461c <sx126x_hal_write+0xe0>)
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	23fa      	movs	r3, #250	@ 0xfa
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	002b      	movs	r3, r5
 8004596:	f7fd ff2d 	bl	80023f4 <HAL_SPI_TransmitReceive>
 800459a:	0003      	movs	r3, r0
 800459c:	7023      	strb	r3, [r4, #0]
 800459e:	e003      	b.n	80045a8 <sx126x_hal_write+0x6c>
	}
	else
	{
		status_cmd = HAL_OK;
 80045a0:	2317      	movs	r3, #23
 80045a2:	18fb      	adds	r3, r7, r3
 80045a4:	2200      	movs	r2, #0
 80045a6:	701a      	strb	r2, [r3, #0]
	}

	//status_cmd = HAL_SPI_Transmit(sx126x_context->hSPIx, command, command_length, 500);
	if(data != NULL && data_length > 0)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d015      	beq.n	80045da <sx126x_hal_write+0x9e>
 80045ae:	2228      	movs	r2, #40	@ 0x28
 80045b0:	18bb      	adds	r3, r7, r2
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d010      	beq.n	80045da <sx126x_hal_write+0x9e>
	{
		status_data = HAL_SPI_TransmitReceive(sx126x_context->hSPIx, data, _null,data_length, 500);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	6a18      	ldr	r0, [r3, #32]
 80045bc:	2316      	movs	r3, #22
 80045be:	18fc      	adds	r4, r7, r3
 80045c0:	18bb      	adds	r3, r7, r2
 80045c2:	881d      	ldrh	r5, [r3, #0]
 80045c4:	4a15      	ldr	r2, [pc, #84]	@ (800461c <sx126x_hal_write+0xe0>)
 80045c6:	6839      	ldr	r1, [r7, #0]
 80045c8:	23fa      	movs	r3, #250	@ 0xfa
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	002b      	movs	r3, r5
 80045d0:	f7fd ff10 	bl	80023f4 <HAL_SPI_TransmitReceive>
 80045d4:	0003      	movs	r3, r0
 80045d6:	7023      	strb	r3, [r4, #0]
 80045d8:	e003      	b.n	80045e2 <sx126x_hal_write+0xa6>
	}
	else
	{
		status_data = HAL_OK;
 80045da:	2316      	movs	r3, #22
 80045dc:	18fb      	adds	r3, r7, r3
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
	}

	//status_data = HAL_SPI_Transmit(sx126x_context->hSPIx, data, data_length, 500);

	HAL_GPIO_WritePin(sx126x_context->NSS_port, sx126x_context->NSS_pin, GPIO_PIN_SET);
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	889b      	ldrh	r3, [r3, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	0019      	movs	r1, r3
 80045ee:	f7fc ffa2 	bl	8001536 <HAL_GPIO_WritePin>

	if(status_data == HAL_OK && status_cmd == HAL_OK )
 80045f2:	2316      	movs	r3, #22
 80045f4:	18fb      	adds	r3, r7, r3
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d108      	bne.n	800460e <sx126x_hal_write+0xd2>
 80045fc:	2317      	movs	r3, #23
 80045fe:	18fb      	adds	r3, r7, r3
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d103      	bne.n	800460e <sx126x_hal_write+0xd2>
	{
		status = SX126X_HAL_STATUS_OK;
 8004606:	2315      	movs	r3, #21
 8004608:	18fb      	adds	r3, r7, r3
 800460a:	2200      	movs	r2, #0
 800460c:	701a      	strb	r2, [r3, #0]
	}

	return status;
 800460e:	2315      	movs	r3, #21
 8004610:	18fb      	adds	r3, r7, r3
 8004612:	781b      	ldrb	r3, [r3, #0]
}
 8004614:	0018      	movs	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	b006      	add	sp, #24
 800461a:	bdb0      	pop	{r4, r5, r7, pc}
 800461c:	200001d8 	.word	0x200001d8

08004620 <sx126x_hal_read>:
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_read( const void* context, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint16_t data_length )
{
 8004620:	b5b0      	push	{r4, r5, r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af02      	add	r7, sp, #8
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	603b      	str	r3, [r7, #0]
 800462c:	1dbb      	adds	r3, r7, #6
 800462e:	801a      	strh	r2, [r3, #0]

	const LoRaConfig* sx126x_context = ( const LoRaConfig* ) context;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	613b      	str	r3, [r7, #16]
		HAL_StatusTypeDef status_cmd ,status_data;
		sx126x_hal_status_t status = SX126X_HAL_STATUS_SPI_FAULT;
 8004634:	2315      	movs	r3, #21
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	2201      	movs	r2, #1
 800463a:	701a      	strb	r2, [r3, #0]

		sx126x_hal_wait_on_busy( sx126x_context );
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	0018      	movs	r0, r3
 8004640:	f000 f881 	bl	8004746 <sx126x_hal_wait_on_busy>

		HAL_GPIO_WritePin(sx126x_context->NSS_port, sx126x_context->NSS_pin, GPIO_PIN_RESET);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	889b      	ldrh	r3, [r3, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	0019      	movs	r1, r3
 8004650:	f7fc ff71 	bl	8001536 <HAL_GPIO_WritePin>

		if(command != NULL && command_length > 0)
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d014      	beq.n	8004684 <sx126x_hal_read+0x64>
 800465a:	1dbb      	adds	r3, r7, #6
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d010      	beq.n	8004684 <sx126x_hal_read+0x64>
		{
			status_cmd = HAL_SPI_TransmitReceive(sx126x_context->hSPIx, command, _null, command_length, 500);
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	6a18      	ldr	r0, [r3, #32]
 8004666:	2317      	movs	r3, #23
 8004668:	18fc      	adds	r4, r7, r3
 800466a:	1dbb      	adds	r3, r7, #6
 800466c:	881d      	ldrh	r5, [r3, #0]
 800466e:	4a24      	ldr	r2, [pc, #144]	@ (8004700 <sx126x_hal_read+0xe0>)
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	23fa      	movs	r3, #250	@ 0xfa
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	002b      	movs	r3, r5
 800467a:	f7fd febb 	bl	80023f4 <HAL_SPI_TransmitReceive>
 800467e:	0003      	movs	r3, r0
 8004680:	7023      	strb	r3, [r4, #0]
 8004682:	e003      	b.n	800468c <sx126x_hal_read+0x6c>
		}
		else
		{
			status_cmd = HAL_OK;
 8004684:	2317      	movs	r3, #23
 8004686:	18fb      	adds	r3, r7, r3
 8004688:	2200      	movs	r2, #0
 800468a:	701a      	strb	r2, [r3, #0]
		}

		if(data != NULL && data_length > 0)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d015      	beq.n	80046be <sx126x_hal_read+0x9e>
 8004692:	2228      	movs	r2, #40	@ 0x28
 8004694:	18bb      	adds	r3, r7, r2
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d010      	beq.n	80046be <sx126x_hal_read+0x9e>
		{
			status_data = HAL_SPI_TransmitReceive(sx126x_context->hSPIx, _null, data, data_length, 500);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	6a18      	ldr	r0, [r3, #32]
 80046a0:	2316      	movs	r3, #22
 80046a2:	18fc      	adds	r4, r7, r3
 80046a4:	18bb      	adds	r3, r7, r2
 80046a6:	881d      	ldrh	r5, [r3, #0]
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	4915      	ldr	r1, [pc, #84]	@ (8004700 <sx126x_hal_read+0xe0>)
 80046ac:	23fa      	movs	r3, #250	@ 0xfa
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	002b      	movs	r3, r5
 80046b4:	f7fd fe9e 	bl	80023f4 <HAL_SPI_TransmitReceive>
 80046b8:	0003      	movs	r3, r0
 80046ba:	7023      	strb	r3, [r4, #0]
 80046bc:	e003      	b.n	80046c6 <sx126x_hal_read+0xa6>
		}
		else
		{
			status_data = HAL_OK;
 80046be:	2316      	movs	r3, #22
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	2200      	movs	r2, #0
 80046c4:	701a      	strb	r2, [r3, #0]
		}

		HAL_GPIO_WritePin(sx126x_context->NSS_port, sx126x_context->NSS_pin, GPIO_PIN_SET);
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	889b      	ldrh	r3, [r3, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	0019      	movs	r1, r3
 80046d2:	f7fc ff30 	bl	8001536 <HAL_GPIO_WritePin>

		if(status_data == HAL_OK && status_cmd == HAL_OK )
 80046d6:	2316      	movs	r3, #22
 80046d8:	18fb      	adds	r3, r7, r3
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d108      	bne.n	80046f2 <sx126x_hal_read+0xd2>
 80046e0:	2317      	movs	r3, #23
 80046e2:	18fb      	adds	r3, r7, r3
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <sx126x_hal_read+0xd2>
		{
			status = SX126X_HAL_STATUS_OK;
 80046ea:	2315      	movs	r3, #21
 80046ec:	18fb      	adds	r3, r7, r3
 80046ee:	2200      	movs	r2, #0
 80046f0:	701a      	strb	r2, [r3, #0]
		}

		return status;
 80046f2:	2315      	movs	r3, #21
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	781b      	ldrb	r3, [r3, #0]
}
 80046f8:	0018      	movs	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b006      	add	sp, #24
 80046fe:	bdb0      	pop	{r4, r5, r7, pc}
 8004700:	200001d8 	.word	0x200001d8

08004704 <sx126x_hal_reset>:
 * @param [in] context Radio implementation parameters
 *
 * @returns Operation status
 */
sx126x_hal_status_t sx126x_hal_reset( const void* context )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	const LoRaConfig* sx126x_context = ( const LoRaConfig* ) context;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(sx126x_context->RST_port, sx126x_context->RST_pin, GPIO_PIN_RESET);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6898      	ldr	r0, [r3, #8]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	899b      	ldrh	r3, [r3, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	0019      	movs	r1, r3
 800471c:	f7fc ff0b 	bl	8001536 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004720:	2001      	movs	r0, #1
 8004722:	f7fc fc85 	bl	8001030 <HAL_Delay>
	HAL_GPIO_WritePin(sx126x_context->RST_port, sx126x_context->RST_pin, GPIO_PIN_SET);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6898      	ldr	r0, [r3, #8]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	899b      	ldrh	r3, [r3, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	0019      	movs	r1, r3
 8004732:	f7fc ff00 	bl	8001536 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004736:	2001      	movs	r0, #1
 8004738:	f7fc fc7a 	bl	8001030 <HAL_Delay>

	return SX126X_HAL_STATUS_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	0018      	movs	r0, r3
 8004740:	46bd      	mov	sp, r7
 8004742:	b004      	add	sp, #16
 8004744:	bd80      	pop	{r7, pc}

08004746 <sx126x_hal_wait_on_busy>:
 * Wait for the Busy state to go down
 *
 *
 */
void sx126x_hal_wait_on_busy( const void* context )
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
	const LoRaConfig* sx126x_context = ( const LoRaConfig* ) context;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60fb      	str	r3, [r7, #12]

    while(HAL_GPIO_ReadPin(sx126x_context->BUSY_port, sx126x_context->BUSY_pin)== GPIO_PIN_SET)
 8004752:	46c0      	nop			@ (mov r8, r8)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	699a      	ldr	r2, [r3, #24]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8b9b      	ldrh	r3, [r3, #28]
 800475c:	0019      	movs	r1, r3
 800475e:	0010      	movs	r0, r2
 8004760:	f7fc fecc 	bl	80014fc <HAL_GPIO_ReadPin>
 8004764:	0003      	movs	r3, r0
 8004766:	2b01      	cmp	r3, #1
 8004768:	d0f4      	beq.n	8004754 <sx126x_hal_wait_on_busy+0xe>
    {

    }
}
 800476a:	46c0      	nop			@ (mov r8, r8)
 800476c:	46c0      	nop			@ (mov r8, r8)
 800476e:	46bd      	mov	sp, r7
 8004770:	b004      	add	sp, #16
 8004772:	bd80      	pop	{r7, pc}

08004774 <std>:
 8004774:	2300      	movs	r3, #0
 8004776:	b510      	push	{r4, lr}
 8004778:	0004      	movs	r4, r0
 800477a:	6003      	str	r3, [r0, #0]
 800477c:	6043      	str	r3, [r0, #4]
 800477e:	6083      	str	r3, [r0, #8]
 8004780:	8181      	strh	r1, [r0, #12]
 8004782:	6643      	str	r3, [r0, #100]	@ 0x64
 8004784:	81c2      	strh	r2, [r0, #14]
 8004786:	6103      	str	r3, [r0, #16]
 8004788:	6143      	str	r3, [r0, #20]
 800478a:	6183      	str	r3, [r0, #24]
 800478c:	0019      	movs	r1, r3
 800478e:	2208      	movs	r2, #8
 8004790:	305c      	adds	r0, #92	@ 0x5c
 8004792:	f000 f943 	bl	8004a1c <memset>
 8004796:	4b0b      	ldr	r3, [pc, #44]	@ (80047c4 <std+0x50>)
 8004798:	6224      	str	r4, [r4, #32]
 800479a:	6263      	str	r3, [r4, #36]	@ 0x24
 800479c:	4b0a      	ldr	r3, [pc, #40]	@ (80047c8 <std+0x54>)
 800479e:	62a3      	str	r3, [r4, #40]	@ 0x28
 80047a0:	4b0a      	ldr	r3, [pc, #40]	@ (80047cc <std+0x58>)
 80047a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80047a4:	4b0a      	ldr	r3, [pc, #40]	@ (80047d0 <std+0x5c>)
 80047a6:	6323      	str	r3, [r4, #48]	@ 0x30
 80047a8:	4b0a      	ldr	r3, [pc, #40]	@ (80047d4 <std+0x60>)
 80047aa:	429c      	cmp	r4, r3
 80047ac:	d005      	beq.n	80047ba <std+0x46>
 80047ae:	4b0a      	ldr	r3, [pc, #40]	@ (80047d8 <std+0x64>)
 80047b0:	429c      	cmp	r4, r3
 80047b2:	d002      	beq.n	80047ba <std+0x46>
 80047b4:	4b09      	ldr	r3, [pc, #36]	@ (80047dc <std+0x68>)
 80047b6:	429c      	cmp	r4, r3
 80047b8:	d103      	bne.n	80047c2 <std+0x4e>
 80047ba:	0020      	movs	r0, r4
 80047bc:	3058      	adds	r0, #88	@ 0x58
 80047be:	f000 f9ad 	bl	8004b1c <__retarget_lock_init_recursive>
 80047c2:	bd10      	pop	{r4, pc}
 80047c4:	08004985 	.word	0x08004985
 80047c8:	080049ad 	.word	0x080049ad
 80047cc:	080049e5 	.word	0x080049e5
 80047d0:	08004a11 	.word	0x08004a11
 80047d4:	200001ec 	.word	0x200001ec
 80047d8:	20000254 	.word	0x20000254
 80047dc:	200002bc 	.word	0x200002bc

080047e0 <stdio_exit_handler>:
 80047e0:	b510      	push	{r4, lr}
 80047e2:	4a03      	ldr	r2, [pc, #12]	@ (80047f0 <stdio_exit_handler+0x10>)
 80047e4:	4903      	ldr	r1, [pc, #12]	@ (80047f4 <stdio_exit_handler+0x14>)
 80047e6:	4804      	ldr	r0, [pc, #16]	@ (80047f8 <stdio_exit_handler+0x18>)
 80047e8:	f000 f86c 	bl	80048c4 <_fwalk_sglue>
 80047ec:	bd10      	pop	{r4, pc}
 80047ee:	46c0      	nop			@ (mov r8, r8)
 80047f0:	20000010 	.word	0x20000010
 80047f4:	08005679 	.word	0x08005679
 80047f8:	20000020 	.word	0x20000020

080047fc <cleanup_stdio>:
 80047fc:	6841      	ldr	r1, [r0, #4]
 80047fe:	4b0b      	ldr	r3, [pc, #44]	@ (800482c <cleanup_stdio+0x30>)
 8004800:	b510      	push	{r4, lr}
 8004802:	0004      	movs	r4, r0
 8004804:	4299      	cmp	r1, r3
 8004806:	d001      	beq.n	800480c <cleanup_stdio+0x10>
 8004808:	f000 ff36 	bl	8005678 <_fflush_r>
 800480c:	68a1      	ldr	r1, [r4, #8]
 800480e:	4b08      	ldr	r3, [pc, #32]	@ (8004830 <cleanup_stdio+0x34>)
 8004810:	4299      	cmp	r1, r3
 8004812:	d002      	beq.n	800481a <cleanup_stdio+0x1e>
 8004814:	0020      	movs	r0, r4
 8004816:	f000 ff2f 	bl	8005678 <_fflush_r>
 800481a:	68e1      	ldr	r1, [r4, #12]
 800481c:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <cleanup_stdio+0x38>)
 800481e:	4299      	cmp	r1, r3
 8004820:	d002      	beq.n	8004828 <cleanup_stdio+0x2c>
 8004822:	0020      	movs	r0, r4
 8004824:	f000 ff28 	bl	8005678 <_fflush_r>
 8004828:	bd10      	pop	{r4, pc}
 800482a:	46c0      	nop			@ (mov r8, r8)
 800482c:	200001ec 	.word	0x200001ec
 8004830:	20000254 	.word	0x20000254
 8004834:	200002bc 	.word	0x200002bc

08004838 <global_stdio_init.part.0>:
 8004838:	b510      	push	{r4, lr}
 800483a:	4b09      	ldr	r3, [pc, #36]	@ (8004860 <global_stdio_init.part.0+0x28>)
 800483c:	4a09      	ldr	r2, [pc, #36]	@ (8004864 <global_stdio_init.part.0+0x2c>)
 800483e:	2104      	movs	r1, #4
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	4809      	ldr	r0, [pc, #36]	@ (8004868 <global_stdio_init.part.0+0x30>)
 8004844:	2200      	movs	r2, #0
 8004846:	f7ff ff95 	bl	8004774 <std>
 800484a:	2201      	movs	r2, #1
 800484c:	2109      	movs	r1, #9
 800484e:	4807      	ldr	r0, [pc, #28]	@ (800486c <global_stdio_init.part.0+0x34>)
 8004850:	f7ff ff90 	bl	8004774 <std>
 8004854:	2202      	movs	r2, #2
 8004856:	2112      	movs	r1, #18
 8004858:	4805      	ldr	r0, [pc, #20]	@ (8004870 <global_stdio_init.part.0+0x38>)
 800485a:	f7ff ff8b 	bl	8004774 <std>
 800485e:	bd10      	pop	{r4, pc}
 8004860:	20000324 	.word	0x20000324
 8004864:	080047e1 	.word	0x080047e1
 8004868:	200001ec 	.word	0x200001ec
 800486c:	20000254 	.word	0x20000254
 8004870:	200002bc 	.word	0x200002bc

08004874 <__sfp_lock_acquire>:
 8004874:	b510      	push	{r4, lr}
 8004876:	4802      	ldr	r0, [pc, #8]	@ (8004880 <__sfp_lock_acquire+0xc>)
 8004878:	f000 f951 	bl	8004b1e <__retarget_lock_acquire_recursive>
 800487c:	bd10      	pop	{r4, pc}
 800487e:	46c0      	nop			@ (mov r8, r8)
 8004880:	2000032d 	.word	0x2000032d

08004884 <__sfp_lock_release>:
 8004884:	b510      	push	{r4, lr}
 8004886:	4802      	ldr	r0, [pc, #8]	@ (8004890 <__sfp_lock_release+0xc>)
 8004888:	f000 f94a 	bl	8004b20 <__retarget_lock_release_recursive>
 800488c:	bd10      	pop	{r4, pc}
 800488e:	46c0      	nop			@ (mov r8, r8)
 8004890:	2000032d 	.word	0x2000032d

08004894 <__sinit>:
 8004894:	b510      	push	{r4, lr}
 8004896:	0004      	movs	r4, r0
 8004898:	f7ff ffec 	bl	8004874 <__sfp_lock_acquire>
 800489c:	6a23      	ldr	r3, [r4, #32]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d002      	beq.n	80048a8 <__sinit+0x14>
 80048a2:	f7ff ffef 	bl	8004884 <__sfp_lock_release>
 80048a6:	bd10      	pop	{r4, pc}
 80048a8:	4b04      	ldr	r3, [pc, #16]	@ (80048bc <__sinit+0x28>)
 80048aa:	6223      	str	r3, [r4, #32]
 80048ac:	4b04      	ldr	r3, [pc, #16]	@ (80048c0 <__sinit+0x2c>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f6      	bne.n	80048a2 <__sinit+0xe>
 80048b4:	f7ff ffc0 	bl	8004838 <global_stdio_init.part.0>
 80048b8:	e7f3      	b.n	80048a2 <__sinit+0xe>
 80048ba:	46c0      	nop			@ (mov r8, r8)
 80048bc:	080047fd 	.word	0x080047fd
 80048c0:	20000324 	.word	0x20000324

080048c4 <_fwalk_sglue>:
 80048c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048c6:	0014      	movs	r4, r2
 80048c8:	2600      	movs	r6, #0
 80048ca:	9000      	str	r0, [sp, #0]
 80048cc:	9101      	str	r1, [sp, #4]
 80048ce:	68a5      	ldr	r5, [r4, #8]
 80048d0:	6867      	ldr	r7, [r4, #4]
 80048d2:	3f01      	subs	r7, #1
 80048d4:	d504      	bpl.n	80048e0 <_fwalk_sglue+0x1c>
 80048d6:	6824      	ldr	r4, [r4, #0]
 80048d8:	2c00      	cmp	r4, #0
 80048da:	d1f8      	bne.n	80048ce <_fwalk_sglue+0xa>
 80048dc:	0030      	movs	r0, r6
 80048de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048e0:	89ab      	ldrh	r3, [r5, #12]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d908      	bls.n	80048f8 <_fwalk_sglue+0x34>
 80048e6:	220e      	movs	r2, #14
 80048e8:	5eab      	ldrsh	r3, [r5, r2]
 80048ea:	3301      	adds	r3, #1
 80048ec:	d004      	beq.n	80048f8 <_fwalk_sglue+0x34>
 80048ee:	0029      	movs	r1, r5
 80048f0:	9800      	ldr	r0, [sp, #0]
 80048f2:	9b01      	ldr	r3, [sp, #4]
 80048f4:	4798      	blx	r3
 80048f6:	4306      	orrs	r6, r0
 80048f8:	3568      	adds	r5, #104	@ 0x68
 80048fa:	e7ea      	b.n	80048d2 <_fwalk_sglue+0xe>

080048fc <iprintf>:
 80048fc:	b40f      	push	{r0, r1, r2, r3}
 80048fe:	b507      	push	{r0, r1, r2, lr}
 8004900:	4905      	ldr	r1, [pc, #20]	@ (8004918 <iprintf+0x1c>)
 8004902:	ab04      	add	r3, sp, #16
 8004904:	6808      	ldr	r0, [r1, #0]
 8004906:	cb04      	ldmia	r3!, {r2}
 8004908:	6881      	ldr	r1, [r0, #8]
 800490a:	9301      	str	r3, [sp, #4]
 800490c:	f000 fb94 	bl	8005038 <_vfiprintf_r>
 8004910:	b003      	add	sp, #12
 8004912:	bc08      	pop	{r3}
 8004914:	b004      	add	sp, #16
 8004916:	4718      	bx	r3
 8004918:	2000001c 	.word	0x2000001c

0800491c <sniprintf>:
 800491c:	b40c      	push	{r2, r3}
 800491e:	b530      	push	{r4, r5, lr}
 8004920:	4b17      	ldr	r3, [pc, #92]	@ (8004980 <sniprintf+0x64>)
 8004922:	000c      	movs	r4, r1
 8004924:	681d      	ldr	r5, [r3, #0]
 8004926:	b09d      	sub	sp, #116	@ 0x74
 8004928:	2900      	cmp	r1, #0
 800492a:	da08      	bge.n	800493e <sniprintf+0x22>
 800492c:	238b      	movs	r3, #139	@ 0x8b
 800492e:	2001      	movs	r0, #1
 8004930:	602b      	str	r3, [r5, #0]
 8004932:	4240      	negs	r0, r0
 8004934:	b01d      	add	sp, #116	@ 0x74
 8004936:	bc30      	pop	{r4, r5}
 8004938:	bc08      	pop	{r3}
 800493a:	b002      	add	sp, #8
 800493c:	4718      	bx	r3
 800493e:	2382      	movs	r3, #130	@ 0x82
 8004940:	466a      	mov	r2, sp
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	8293      	strh	r3, [r2, #20]
 8004946:	2300      	movs	r3, #0
 8004948:	9002      	str	r0, [sp, #8]
 800494a:	9006      	str	r0, [sp, #24]
 800494c:	4299      	cmp	r1, r3
 800494e:	d000      	beq.n	8004952 <sniprintf+0x36>
 8004950:	1e4b      	subs	r3, r1, #1
 8004952:	9304      	str	r3, [sp, #16]
 8004954:	9307      	str	r3, [sp, #28]
 8004956:	2301      	movs	r3, #1
 8004958:	466a      	mov	r2, sp
 800495a:	425b      	negs	r3, r3
 800495c:	82d3      	strh	r3, [r2, #22]
 800495e:	0028      	movs	r0, r5
 8004960:	ab21      	add	r3, sp, #132	@ 0x84
 8004962:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004964:	a902      	add	r1, sp, #8
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	f000 fa40 	bl	8004dec <_svfiprintf_r>
 800496c:	1c43      	adds	r3, r0, #1
 800496e:	da01      	bge.n	8004974 <sniprintf+0x58>
 8004970:	238b      	movs	r3, #139	@ 0x8b
 8004972:	602b      	str	r3, [r5, #0]
 8004974:	2c00      	cmp	r4, #0
 8004976:	d0dd      	beq.n	8004934 <sniprintf+0x18>
 8004978:	2200      	movs	r2, #0
 800497a:	9b02      	ldr	r3, [sp, #8]
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	e7d9      	b.n	8004934 <sniprintf+0x18>
 8004980:	2000001c 	.word	0x2000001c

08004984 <__sread>:
 8004984:	b570      	push	{r4, r5, r6, lr}
 8004986:	000c      	movs	r4, r1
 8004988:	250e      	movs	r5, #14
 800498a:	5f49      	ldrsh	r1, [r1, r5]
 800498c:	f000 f874 	bl	8004a78 <_read_r>
 8004990:	2800      	cmp	r0, #0
 8004992:	db03      	blt.n	800499c <__sread+0x18>
 8004994:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004996:	181b      	adds	r3, r3, r0
 8004998:	6563      	str	r3, [r4, #84]	@ 0x54
 800499a:	bd70      	pop	{r4, r5, r6, pc}
 800499c:	89a3      	ldrh	r3, [r4, #12]
 800499e:	4a02      	ldr	r2, [pc, #8]	@ (80049a8 <__sread+0x24>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	81a3      	strh	r3, [r4, #12]
 80049a4:	e7f9      	b.n	800499a <__sread+0x16>
 80049a6:	46c0      	nop			@ (mov r8, r8)
 80049a8:	ffffefff 	.word	0xffffefff

080049ac <__swrite>:
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ae:	001f      	movs	r7, r3
 80049b0:	898b      	ldrh	r3, [r1, #12]
 80049b2:	0005      	movs	r5, r0
 80049b4:	000c      	movs	r4, r1
 80049b6:	0016      	movs	r6, r2
 80049b8:	05db      	lsls	r3, r3, #23
 80049ba:	d505      	bpl.n	80049c8 <__swrite+0x1c>
 80049bc:	230e      	movs	r3, #14
 80049be:	5ec9      	ldrsh	r1, [r1, r3]
 80049c0:	2200      	movs	r2, #0
 80049c2:	2302      	movs	r3, #2
 80049c4:	f000 f844 	bl	8004a50 <_lseek_r>
 80049c8:	89a3      	ldrh	r3, [r4, #12]
 80049ca:	4a05      	ldr	r2, [pc, #20]	@ (80049e0 <__swrite+0x34>)
 80049cc:	0028      	movs	r0, r5
 80049ce:	4013      	ands	r3, r2
 80049d0:	81a3      	strh	r3, [r4, #12]
 80049d2:	0032      	movs	r2, r6
 80049d4:	230e      	movs	r3, #14
 80049d6:	5ee1      	ldrsh	r1, [r4, r3]
 80049d8:	003b      	movs	r3, r7
 80049da:	f000 f861 	bl	8004aa0 <_write_r>
 80049de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e0:	ffffefff 	.word	0xffffefff

080049e4 <__sseek>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	000c      	movs	r4, r1
 80049e8:	250e      	movs	r5, #14
 80049ea:	5f49      	ldrsh	r1, [r1, r5]
 80049ec:	f000 f830 	bl	8004a50 <_lseek_r>
 80049f0:	89a3      	ldrh	r3, [r4, #12]
 80049f2:	1c42      	adds	r2, r0, #1
 80049f4:	d103      	bne.n	80049fe <__sseek+0x1a>
 80049f6:	4a05      	ldr	r2, [pc, #20]	@ (8004a0c <__sseek+0x28>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	81a3      	strh	r3, [r4, #12]
 80049fc:	bd70      	pop	{r4, r5, r6, pc}
 80049fe:	2280      	movs	r2, #128	@ 0x80
 8004a00:	0152      	lsls	r2, r2, #5
 8004a02:	4313      	orrs	r3, r2
 8004a04:	81a3      	strh	r3, [r4, #12]
 8004a06:	6560      	str	r0, [r4, #84]	@ 0x54
 8004a08:	e7f8      	b.n	80049fc <__sseek+0x18>
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	ffffefff 	.word	0xffffefff

08004a10 <__sclose>:
 8004a10:	b510      	push	{r4, lr}
 8004a12:	230e      	movs	r3, #14
 8004a14:	5ec9      	ldrsh	r1, [r1, r3]
 8004a16:	f000 f809 	bl	8004a2c <_close_r>
 8004a1a:	bd10      	pop	{r4, pc}

08004a1c <memset>:
 8004a1c:	0003      	movs	r3, r0
 8004a1e:	1882      	adds	r2, r0, r2
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d100      	bne.n	8004a26 <memset+0xa>
 8004a24:	4770      	bx	lr
 8004a26:	7019      	strb	r1, [r3, #0]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	e7f9      	b.n	8004a20 <memset+0x4>

08004a2c <_close_r>:
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	b570      	push	{r4, r5, r6, lr}
 8004a30:	4d06      	ldr	r5, [pc, #24]	@ (8004a4c <_close_r+0x20>)
 8004a32:	0004      	movs	r4, r0
 8004a34:	0008      	movs	r0, r1
 8004a36:	602b      	str	r3, [r5, #0]
 8004a38:	f7fc f9e1 	bl	8000dfe <_close>
 8004a3c:	1c43      	adds	r3, r0, #1
 8004a3e:	d103      	bne.n	8004a48 <_close_r+0x1c>
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d000      	beq.n	8004a48 <_close_r+0x1c>
 8004a46:	6023      	str	r3, [r4, #0]
 8004a48:	bd70      	pop	{r4, r5, r6, pc}
 8004a4a:	46c0      	nop			@ (mov r8, r8)
 8004a4c:	20000328 	.word	0x20000328

08004a50 <_lseek_r>:
 8004a50:	b570      	push	{r4, r5, r6, lr}
 8004a52:	0004      	movs	r4, r0
 8004a54:	0008      	movs	r0, r1
 8004a56:	0011      	movs	r1, r2
 8004a58:	001a      	movs	r2, r3
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	4d05      	ldr	r5, [pc, #20]	@ (8004a74 <_lseek_r+0x24>)
 8004a5e:	602b      	str	r3, [r5, #0]
 8004a60:	f7fc f9ee 	bl	8000e40 <_lseek>
 8004a64:	1c43      	adds	r3, r0, #1
 8004a66:	d103      	bne.n	8004a70 <_lseek_r+0x20>
 8004a68:	682b      	ldr	r3, [r5, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d000      	beq.n	8004a70 <_lseek_r+0x20>
 8004a6e:	6023      	str	r3, [r4, #0]
 8004a70:	bd70      	pop	{r4, r5, r6, pc}
 8004a72:	46c0      	nop			@ (mov r8, r8)
 8004a74:	20000328 	.word	0x20000328

08004a78 <_read_r>:
 8004a78:	b570      	push	{r4, r5, r6, lr}
 8004a7a:	0004      	movs	r4, r0
 8004a7c:	0008      	movs	r0, r1
 8004a7e:	0011      	movs	r1, r2
 8004a80:	001a      	movs	r2, r3
 8004a82:	2300      	movs	r3, #0
 8004a84:	4d05      	ldr	r5, [pc, #20]	@ (8004a9c <_read_r+0x24>)
 8004a86:	602b      	str	r3, [r5, #0]
 8004a88:	f7fc f99c 	bl	8000dc4 <_read>
 8004a8c:	1c43      	adds	r3, r0, #1
 8004a8e:	d103      	bne.n	8004a98 <_read_r+0x20>
 8004a90:	682b      	ldr	r3, [r5, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d000      	beq.n	8004a98 <_read_r+0x20>
 8004a96:	6023      	str	r3, [r4, #0]
 8004a98:	bd70      	pop	{r4, r5, r6, pc}
 8004a9a:	46c0      	nop			@ (mov r8, r8)
 8004a9c:	20000328 	.word	0x20000328

08004aa0 <_write_r>:
 8004aa0:	b570      	push	{r4, r5, r6, lr}
 8004aa2:	0004      	movs	r4, r0
 8004aa4:	0008      	movs	r0, r1
 8004aa6:	0011      	movs	r1, r2
 8004aa8:	001a      	movs	r2, r3
 8004aaa:	2300      	movs	r3, #0
 8004aac:	4d05      	ldr	r5, [pc, #20]	@ (8004ac4 <_write_r+0x24>)
 8004aae:	602b      	str	r3, [r5, #0]
 8004ab0:	f7fb ff20 	bl	80008f4 <_write>
 8004ab4:	1c43      	adds	r3, r0, #1
 8004ab6:	d103      	bne.n	8004ac0 <_write_r+0x20>
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d000      	beq.n	8004ac0 <_write_r+0x20>
 8004abe:	6023      	str	r3, [r4, #0]
 8004ac0:	bd70      	pop	{r4, r5, r6, pc}
 8004ac2:	46c0      	nop			@ (mov r8, r8)
 8004ac4:	20000328 	.word	0x20000328

08004ac8 <__errno>:
 8004ac8:	4b01      	ldr	r3, [pc, #4]	@ (8004ad0 <__errno+0x8>)
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	4770      	bx	lr
 8004ace:	46c0      	nop			@ (mov r8, r8)
 8004ad0:	2000001c 	.word	0x2000001c

08004ad4 <__libc_init_array>:
 8004ad4:	b570      	push	{r4, r5, r6, lr}
 8004ad6:	2600      	movs	r6, #0
 8004ad8:	4c0c      	ldr	r4, [pc, #48]	@ (8004b0c <__libc_init_array+0x38>)
 8004ada:	4d0d      	ldr	r5, [pc, #52]	@ (8004b10 <__libc_init_array+0x3c>)
 8004adc:	1b64      	subs	r4, r4, r5
 8004ade:	10a4      	asrs	r4, r4, #2
 8004ae0:	42a6      	cmp	r6, r4
 8004ae2:	d109      	bne.n	8004af8 <__libc_init_array+0x24>
 8004ae4:	2600      	movs	r6, #0
 8004ae6:	f000 ff8b 	bl	8005a00 <_init>
 8004aea:	4c0a      	ldr	r4, [pc, #40]	@ (8004b14 <__libc_init_array+0x40>)
 8004aec:	4d0a      	ldr	r5, [pc, #40]	@ (8004b18 <__libc_init_array+0x44>)
 8004aee:	1b64      	subs	r4, r4, r5
 8004af0:	10a4      	asrs	r4, r4, #2
 8004af2:	42a6      	cmp	r6, r4
 8004af4:	d105      	bne.n	8004b02 <__libc_init_array+0x2e>
 8004af6:	bd70      	pop	{r4, r5, r6, pc}
 8004af8:	00b3      	lsls	r3, r6, #2
 8004afa:	58eb      	ldr	r3, [r5, r3]
 8004afc:	4798      	blx	r3
 8004afe:	3601      	adds	r6, #1
 8004b00:	e7ee      	b.n	8004ae0 <__libc_init_array+0xc>
 8004b02:	00b3      	lsls	r3, r6, #2
 8004b04:	58eb      	ldr	r3, [r5, r3]
 8004b06:	4798      	blx	r3
 8004b08:	3601      	adds	r6, #1
 8004b0a:	e7f2      	b.n	8004af2 <__libc_init_array+0x1e>
 8004b0c:	08005c14 	.word	0x08005c14
 8004b10:	08005c14 	.word	0x08005c14
 8004b14:	08005c18 	.word	0x08005c18
 8004b18:	08005c14 	.word	0x08005c14

08004b1c <__retarget_lock_init_recursive>:
 8004b1c:	4770      	bx	lr

08004b1e <__retarget_lock_acquire_recursive>:
 8004b1e:	4770      	bx	lr

08004b20 <__retarget_lock_release_recursive>:
 8004b20:	4770      	bx	lr

08004b22 <memcpy>:
 8004b22:	2300      	movs	r3, #0
 8004b24:	b510      	push	{r4, lr}
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d100      	bne.n	8004b2c <memcpy+0xa>
 8004b2a:	bd10      	pop	{r4, pc}
 8004b2c:	5ccc      	ldrb	r4, [r1, r3]
 8004b2e:	54c4      	strb	r4, [r0, r3]
 8004b30:	3301      	adds	r3, #1
 8004b32:	e7f8      	b.n	8004b26 <memcpy+0x4>

08004b34 <_free_r>:
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	0005      	movs	r5, r0
 8004b38:	1e0c      	subs	r4, r1, #0
 8004b3a:	d010      	beq.n	8004b5e <_free_r+0x2a>
 8004b3c:	3c04      	subs	r4, #4
 8004b3e:	6823      	ldr	r3, [r4, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	da00      	bge.n	8004b46 <_free_r+0x12>
 8004b44:	18e4      	adds	r4, r4, r3
 8004b46:	0028      	movs	r0, r5
 8004b48:	f000 f8e0 	bl	8004d0c <__malloc_lock>
 8004b4c:	4a1d      	ldr	r2, [pc, #116]	@ (8004bc4 <_free_r+0x90>)
 8004b4e:	6813      	ldr	r3, [r2, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d105      	bne.n	8004b60 <_free_r+0x2c>
 8004b54:	6063      	str	r3, [r4, #4]
 8004b56:	6014      	str	r4, [r2, #0]
 8004b58:	0028      	movs	r0, r5
 8004b5a:	f000 f8df 	bl	8004d1c <__malloc_unlock>
 8004b5e:	bd70      	pop	{r4, r5, r6, pc}
 8004b60:	42a3      	cmp	r3, r4
 8004b62:	d908      	bls.n	8004b76 <_free_r+0x42>
 8004b64:	6820      	ldr	r0, [r4, #0]
 8004b66:	1821      	adds	r1, r4, r0
 8004b68:	428b      	cmp	r3, r1
 8004b6a:	d1f3      	bne.n	8004b54 <_free_r+0x20>
 8004b6c:	6819      	ldr	r1, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	1809      	adds	r1, r1, r0
 8004b72:	6021      	str	r1, [r4, #0]
 8004b74:	e7ee      	b.n	8004b54 <_free_r+0x20>
 8004b76:	001a      	movs	r2, r3
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <_free_r+0x4e>
 8004b7e:	42a3      	cmp	r3, r4
 8004b80:	d9f9      	bls.n	8004b76 <_free_r+0x42>
 8004b82:	6811      	ldr	r1, [r2, #0]
 8004b84:	1850      	adds	r0, r2, r1
 8004b86:	42a0      	cmp	r0, r4
 8004b88:	d10b      	bne.n	8004ba2 <_free_r+0x6e>
 8004b8a:	6820      	ldr	r0, [r4, #0]
 8004b8c:	1809      	adds	r1, r1, r0
 8004b8e:	1850      	adds	r0, r2, r1
 8004b90:	6011      	str	r1, [r2, #0]
 8004b92:	4283      	cmp	r3, r0
 8004b94:	d1e0      	bne.n	8004b58 <_free_r+0x24>
 8004b96:	6818      	ldr	r0, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	1841      	adds	r1, r0, r1
 8004b9c:	6011      	str	r1, [r2, #0]
 8004b9e:	6053      	str	r3, [r2, #4]
 8004ba0:	e7da      	b.n	8004b58 <_free_r+0x24>
 8004ba2:	42a0      	cmp	r0, r4
 8004ba4:	d902      	bls.n	8004bac <_free_r+0x78>
 8004ba6:	230c      	movs	r3, #12
 8004ba8:	602b      	str	r3, [r5, #0]
 8004baa:	e7d5      	b.n	8004b58 <_free_r+0x24>
 8004bac:	6820      	ldr	r0, [r4, #0]
 8004bae:	1821      	adds	r1, r4, r0
 8004bb0:	428b      	cmp	r3, r1
 8004bb2:	d103      	bne.n	8004bbc <_free_r+0x88>
 8004bb4:	6819      	ldr	r1, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	1809      	adds	r1, r1, r0
 8004bba:	6021      	str	r1, [r4, #0]
 8004bbc:	6063      	str	r3, [r4, #4]
 8004bbe:	6054      	str	r4, [r2, #4]
 8004bc0:	e7ca      	b.n	8004b58 <_free_r+0x24>
 8004bc2:	46c0      	nop			@ (mov r8, r8)
 8004bc4:	20000334 	.word	0x20000334

08004bc8 <sbrk_aligned>:
 8004bc8:	b570      	push	{r4, r5, r6, lr}
 8004bca:	4e0f      	ldr	r6, [pc, #60]	@ (8004c08 <sbrk_aligned+0x40>)
 8004bcc:	000d      	movs	r5, r1
 8004bce:	6831      	ldr	r1, [r6, #0]
 8004bd0:	0004      	movs	r4, r0
 8004bd2:	2900      	cmp	r1, #0
 8004bd4:	d102      	bne.n	8004bdc <sbrk_aligned+0x14>
 8004bd6:	f000 fe2f 	bl	8005838 <_sbrk_r>
 8004bda:	6030      	str	r0, [r6, #0]
 8004bdc:	0029      	movs	r1, r5
 8004bde:	0020      	movs	r0, r4
 8004be0:	f000 fe2a 	bl	8005838 <_sbrk_r>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d103      	bne.n	8004bf0 <sbrk_aligned+0x28>
 8004be8:	2501      	movs	r5, #1
 8004bea:	426d      	negs	r5, r5
 8004bec:	0028      	movs	r0, r5
 8004bee:	bd70      	pop	{r4, r5, r6, pc}
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	1cc5      	adds	r5, r0, #3
 8004bf4:	439d      	bics	r5, r3
 8004bf6:	42a8      	cmp	r0, r5
 8004bf8:	d0f8      	beq.n	8004bec <sbrk_aligned+0x24>
 8004bfa:	1a29      	subs	r1, r5, r0
 8004bfc:	0020      	movs	r0, r4
 8004bfe:	f000 fe1b 	bl	8005838 <_sbrk_r>
 8004c02:	3001      	adds	r0, #1
 8004c04:	d1f2      	bne.n	8004bec <sbrk_aligned+0x24>
 8004c06:	e7ef      	b.n	8004be8 <sbrk_aligned+0x20>
 8004c08:	20000330 	.word	0x20000330

08004c0c <_malloc_r>:
 8004c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c0e:	2203      	movs	r2, #3
 8004c10:	1ccb      	adds	r3, r1, #3
 8004c12:	4393      	bics	r3, r2
 8004c14:	3308      	adds	r3, #8
 8004c16:	0005      	movs	r5, r0
 8004c18:	001f      	movs	r7, r3
 8004c1a:	2b0c      	cmp	r3, #12
 8004c1c:	d234      	bcs.n	8004c88 <_malloc_r+0x7c>
 8004c1e:	270c      	movs	r7, #12
 8004c20:	42b9      	cmp	r1, r7
 8004c22:	d833      	bhi.n	8004c8c <_malloc_r+0x80>
 8004c24:	0028      	movs	r0, r5
 8004c26:	f000 f871 	bl	8004d0c <__malloc_lock>
 8004c2a:	4e37      	ldr	r6, [pc, #220]	@ (8004d08 <_malloc_r+0xfc>)
 8004c2c:	6833      	ldr	r3, [r6, #0]
 8004c2e:	001c      	movs	r4, r3
 8004c30:	2c00      	cmp	r4, #0
 8004c32:	d12f      	bne.n	8004c94 <_malloc_r+0x88>
 8004c34:	0039      	movs	r1, r7
 8004c36:	0028      	movs	r0, r5
 8004c38:	f7ff ffc6 	bl	8004bc8 <sbrk_aligned>
 8004c3c:	0004      	movs	r4, r0
 8004c3e:	1c43      	adds	r3, r0, #1
 8004c40:	d15f      	bne.n	8004d02 <_malloc_r+0xf6>
 8004c42:	6834      	ldr	r4, [r6, #0]
 8004c44:	9400      	str	r4, [sp, #0]
 8004c46:	9b00      	ldr	r3, [sp, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d14a      	bne.n	8004ce2 <_malloc_r+0xd6>
 8004c4c:	2c00      	cmp	r4, #0
 8004c4e:	d052      	beq.n	8004cf6 <_malloc_r+0xea>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	0028      	movs	r0, r5
 8004c54:	18e3      	adds	r3, r4, r3
 8004c56:	9900      	ldr	r1, [sp, #0]
 8004c58:	9301      	str	r3, [sp, #4]
 8004c5a:	f000 fded 	bl	8005838 <_sbrk_r>
 8004c5e:	9b01      	ldr	r3, [sp, #4]
 8004c60:	4283      	cmp	r3, r0
 8004c62:	d148      	bne.n	8004cf6 <_malloc_r+0xea>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	0028      	movs	r0, r5
 8004c68:	1aff      	subs	r7, r7, r3
 8004c6a:	0039      	movs	r1, r7
 8004c6c:	f7ff ffac 	bl	8004bc8 <sbrk_aligned>
 8004c70:	3001      	adds	r0, #1
 8004c72:	d040      	beq.n	8004cf6 <_malloc_r+0xea>
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	19db      	adds	r3, r3, r7
 8004c78:	6023      	str	r3, [r4, #0]
 8004c7a:	6833      	ldr	r3, [r6, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	2a00      	cmp	r2, #0
 8004c80:	d133      	bne.n	8004cea <_malloc_r+0xde>
 8004c82:	9b00      	ldr	r3, [sp, #0]
 8004c84:	6033      	str	r3, [r6, #0]
 8004c86:	e019      	b.n	8004cbc <_malloc_r+0xb0>
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	dac9      	bge.n	8004c20 <_malloc_r+0x14>
 8004c8c:	230c      	movs	r3, #12
 8004c8e:	602b      	str	r3, [r5, #0]
 8004c90:	2000      	movs	r0, #0
 8004c92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c94:	6821      	ldr	r1, [r4, #0]
 8004c96:	1bc9      	subs	r1, r1, r7
 8004c98:	d420      	bmi.n	8004cdc <_malloc_r+0xd0>
 8004c9a:	290b      	cmp	r1, #11
 8004c9c:	d90a      	bls.n	8004cb4 <_malloc_r+0xa8>
 8004c9e:	19e2      	adds	r2, r4, r7
 8004ca0:	6027      	str	r7, [r4, #0]
 8004ca2:	42a3      	cmp	r3, r4
 8004ca4:	d104      	bne.n	8004cb0 <_malloc_r+0xa4>
 8004ca6:	6032      	str	r2, [r6, #0]
 8004ca8:	6863      	ldr	r3, [r4, #4]
 8004caa:	6011      	str	r1, [r2, #0]
 8004cac:	6053      	str	r3, [r2, #4]
 8004cae:	e005      	b.n	8004cbc <_malloc_r+0xb0>
 8004cb0:	605a      	str	r2, [r3, #4]
 8004cb2:	e7f9      	b.n	8004ca8 <_malloc_r+0x9c>
 8004cb4:	6862      	ldr	r2, [r4, #4]
 8004cb6:	42a3      	cmp	r3, r4
 8004cb8:	d10e      	bne.n	8004cd8 <_malloc_r+0xcc>
 8004cba:	6032      	str	r2, [r6, #0]
 8004cbc:	0028      	movs	r0, r5
 8004cbe:	f000 f82d 	bl	8004d1c <__malloc_unlock>
 8004cc2:	0020      	movs	r0, r4
 8004cc4:	2207      	movs	r2, #7
 8004cc6:	300b      	adds	r0, #11
 8004cc8:	1d23      	adds	r3, r4, #4
 8004cca:	4390      	bics	r0, r2
 8004ccc:	1ac2      	subs	r2, r0, r3
 8004cce:	4298      	cmp	r0, r3
 8004cd0:	d0df      	beq.n	8004c92 <_malloc_r+0x86>
 8004cd2:	1a1b      	subs	r3, r3, r0
 8004cd4:	50a3      	str	r3, [r4, r2]
 8004cd6:	e7dc      	b.n	8004c92 <_malloc_r+0x86>
 8004cd8:	605a      	str	r2, [r3, #4]
 8004cda:	e7ef      	b.n	8004cbc <_malloc_r+0xb0>
 8004cdc:	0023      	movs	r3, r4
 8004cde:	6864      	ldr	r4, [r4, #4]
 8004ce0:	e7a6      	b.n	8004c30 <_malloc_r+0x24>
 8004ce2:	9c00      	ldr	r4, [sp, #0]
 8004ce4:	6863      	ldr	r3, [r4, #4]
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	e7ad      	b.n	8004c46 <_malloc_r+0x3a>
 8004cea:	001a      	movs	r2, r3
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	42a3      	cmp	r3, r4
 8004cf0:	d1fb      	bne.n	8004cea <_malloc_r+0xde>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	e7da      	b.n	8004cac <_malloc_r+0xa0>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	0028      	movs	r0, r5
 8004cfa:	602b      	str	r3, [r5, #0]
 8004cfc:	f000 f80e 	bl	8004d1c <__malloc_unlock>
 8004d00:	e7c6      	b.n	8004c90 <_malloc_r+0x84>
 8004d02:	6007      	str	r7, [r0, #0]
 8004d04:	e7da      	b.n	8004cbc <_malloc_r+0xb0>
 8004d06:	46c0      	nop			@ (mov r8, r8)
 8004d08:	20000334 	.word	0x20000334

08004d0c <__malloc_lock>:
 8004d0c:	b510      	push	{r4, lr}
 8004d0e:	4802      	ldr	r0, [pc, #8]	@ (8004d18 <__malloc_lock+0xc>)
 8004d10:	f7ff ff05 	bl	8004b1e <__retarget_lock_acquire_recursive>
 8004d14:	bd10      	pop	{r4, pc}
 8004d16:	46c0      	nop			@ (mov r8, r8)
 8004d18:	2000032c 	.word	0x2000032c

08004d1c <__malloc_unlock>:
 8004d1c:	b510      	push	{r4, lr}
 8004d1e:	4802      	ldr	r0, [pc, #8]	@ (8004d28 <__malloc_unlock+0xc>)
 8004d20:	f7ff fefe 	bl	8004b20 <__retarget_lock_release_recursive>
 8004d24:	bd10      	pop	{r4, pc}
 8004d26:	46c0      	nop			@ (mov r8, r8)
 8004d28:	2000032c 	.word	0x2000032c

08004d2c <__ssputs_r>:
 8004d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d2e:	688e      	ldr	r6, [r1, #8]
 8004d30:	b085      	sub	sp, #20
 8004d32:	001f      	movs	r7, r3
 8004d34:	000c      	movs	r4, r1
 8004d36:	680b      	ldr	r3, [r1, #0]
 8004d38:	9002      	str	r0, [sp, #8]
 8004d3a:	9203      	str	r2, [sp, #12]
 8004d3c:	42be      	cmp	r6, r7
 8004d3e:	d830      	bhi.n	8004da2 <__ssputs_r+0x76>
 8004d40:	210c      	movs	r1, #12
 8004d42:	5e62      	ldrsh	r2, [r4, r1]
 8004d44:	2190      	movs	r1, #144	@ 0x90
 8004d46:	00c9      	lsls	r1, r1, #3
 8004d48:	420a      	tst	r2, r1
 8004d4a:	d028      	beq.n	8004d9e <__ssputs_r+0x72>
 8004d4c:	2003      	movs	r0, #3
 8004d4e:	6921      	ldr	r1, [r4, #16]
 8004d50:	1a5b      	subs	r3, r3, r1
 8004d52:	9301      	str	r3, [sp, #4]
 8004d54:	6963      	ldr	r3, [r4, #20]
 8004d56:	4343      	muls	r3, r0
 8004d58:	9801      	ldr	r0, [sp, #4]
 8004d5a:	0fdd      	lsrs	r5, r3, #31
 8004d5c:	18ed      	adds	r5, r5, r3
 8004d5e:	1c7b      	adds	r3, r7, #1
 8004d60:	181b      	adds	r3, r3, r0
 8004d62:	106d      	asrs	r5, r5, #1
 8004d64:	42ab      	cmp	r3, r5
 8004d66:	d900      	bls.n	8004d6a <__ssputs_r+0x3e>
 8004d68:	001d      	movs	r5, r3
 8004d6a:	0552      	lsls	r2, r2, #21
 8004d6c:	d528      	bpl.n	8004dc0 <__ssputs_r+0x94>
 8004d6e:	0029      	movs	r1, r5
 8004d70:	9802      	ldr	r0, [sp, #8]
 8004d72:	f7ff ff4b 	bl	8004c0c <_malloc_r>
 8004d76:	1e06      	subs	r6, r0, #0
 8004d78:	d02c      	beq.n	8004dd4 <__ssputs_r+0xa8>
 8004d7a:	9a01      	ldr	r2, [sp, #4]
 8004d7c:	6921      	ldr	r1, [r4, #16]
 8004d7e:	f7ff fed0 	bl	8004b22 <memcpy>
 8004d82:	89a2      	ldrh	r2, [r4, #12]
 8004d84:	4b18      	ldr	r3, [pc, #96]	@ (8004de8 <__ssputs_r+0xbc>)
 8004d86:	401a      	ands	r2, r3
 8004d88:	2380      	movs	r3, #128	@ 0x80
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	81a3      	strh	r3, [r4, #12]
 8004d8e:	9b01      	ldr	r3, [sp, #4]
 8004d90:	6126      	str	r6, [r4, #16]
 8004d92:	18f6      	adds	r6, r6, r3
 8004d94:	6026      	str	r6, [r4, #0]
 8004d96:	003e      	movs	r6, r7
 8004d98:	6165      	str	r5, [r4, #20]
 8004d9a:	1aed      	subs	r5, r5, r3
 8004d9c:	60a5      	str	r5, [r4, #8]
 8004d9e:	42be      	cmp	r6, r7
 8004da0:	d900      	bls.n	8004da4 <__ssputs_r+0x78>
 8004da2:	003e      	movs	r6, r7
 8004da4:	0032      	movs	r2, r6
 8004da6:	9903      	ldr	r1, [sp, #12]
 8004da8:	6820      	ldr	r0, [r4, #0]
 8004daa:	f000 fd31 	bl	8005810 <memmove>
 8004dae:	2000      	movs	r0, #0
 8004db0:	68a3      	ldr	r3, [r4, #8]
 8004db2:	1b9b      	subs	r3, r3, r6
 8004db4:	60a3      	str	r3, [r4, #8]
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	199b      	adds	r3, r3, r6
 8004dba:	6023      	str	r3, [r4, #0]
 8004dbc:	b005      	add	sp, #20
 8004dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dc0:	002a      	movs	r2, r5
 8004dc2:	9802      	ldr	r0, [sp, #8]
 8004dc4:	f000 fd55 	bl	8005872 <_realloc_r>
 8004dc8:	1e06      	subs	r6, r0, #0
 8004dca:	d1e0      	bne.n	8004d8e <__ssputs_r+0x62>
 8004dcc:	6921      	ldr	r1, [r4, #16]
 8004dce:	9802      	ldr	r0, [sp, #8]
 8004dd0:	f7ff feb0 	bl	8004b34 <_free_r>
 8004dd4:	230c      	movs	r3, #12
 8004dd6:	2001      	movs	r0, #1
 8004dd8:	9a02      	ldr	r2, [sp, #8]
 8004dda:	4240      	negs	r0, r0
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	89a2      	ldrh	r2, [r4, #12]
 8004de0:	3334      	adds	r3, #52	@ 0x34
 8004de2:	4313      	orrs	r3, r2
 8004de4:	81a3      	strh	r3, [r4, #12]
 8004de6:	e7e9      	b.n	8004dbc <__ssputs_r+0x90>
 8004de8:	fffffb7f 	.word	0xfffffb7f

08004dec <_svfiprintf_r>:
 8004dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dee:	b0a1      	sub	sp, #132	@ 0x84
 8004df0:	9003      	str	r0, [sp, #12]
 8004df2:	001d      	movs	r5, r3
 8004df4:	898b      	ldrh	r3, [r1, #12]
 8004df6:	000f      	movs	r7, r1
 8004df8:	0016      	movs	r6, r2
 8004dfa:	061b      	lsls	r3, r3, #24
 8004dfc:	d511      	bpl.n	8004e22 <_svfiprintf_r+0x36>
 8004dfe:	690b      	ldr	r3, [r1, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d10e      	bne.n	8004e22 <_svfiprintf_r+0x36>
 8004e04:	2140      	movs	r1, #64	@ 0x40
 8004e06:	f7ff ff01 	bl	8004c0c <_malloc_r>
 8004e0a:	6038      	str	r0, [r7, #0]
 8004e0c:	6138      	str	r0, [r7, #16]
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	d105      	bne.n	8004e1e <_svfiprintf_r+0x32>
 8004e12:	230c      	movs	r3, #12
 8004e14:	9a03      	ldr	r2, [sp, #12]
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	2001      	movs	r0, #1
 8004e1a:	4240      	negs	r0, r0
 8004e1c:	e0cf      	b.n	8004fbe <_svfiprintf_r+0x1d2>
 8004e1e:	2340      	movs	r3, #64	@ 0x40
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	2300      	movs	r3, #0
 8004e24:	ac08      	add	r4, sp, #32
 8004e26:	6163      	str	r3, [r4, #20]
 8004e28:	3320      	adds	r3, #32
 8004e2a:	7663      	strb	r3, [r4, #25]
 8004e2c:	3310      	adds	r3, #16
 8004e2e:	76a3      	strb	r3, [r4, #26]
 8004e30:	9507      	str	r5, [sp, #28]
 8004e32:	0035      	movs	r5, r6
 8004e34:	782b      	ldrb	r3, [r5, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <_svfiprintf_r+0x52>
 8004e3a:	2b25      	cmp	r3, #37	@ 0x25
 8004e3c:	d148      	bne.n	8004ed0 <_svfiprintf_r+0xe4>
 8004e3e:	1bab      	subs	r3, r5, r6
 8004e40:	9305      	str	r3, [sp, #20]
 8004e42:	42b5      	cmp	r5, r6
 8004e44:	d00b      	beq.n	8004e5e <_svfiprintf_r+0x72>
 8004e46:	0032      	movs	r2, r6
 8004e48:	0039      	movs	r1, r7
 8004e4a:	9803      	ldr	r0, [sp, #12]
 8004e4c:	f7ff ff6e 	bl	8004d2c <__ssputs_r>
 8004e50:	3001      	adds	r0, #1
 8004e52:	d100      	bne.n	8004e56 <_svfiprintf_r+0x6a>
 8004e54:	e0ae      	b.n	8004fb4 <_svfiprintf_r+0x1c8>
 8004e56:	6963      	ldr	r3, [r4, #20]
 8004e58:	9a05      	ldr	r2, [sp, #20]
 8004e5a:	189b      	adds	r3, r3, r2
 8004e5c:	6163      	str	r3, [r4, #20]
 8004e5e:	782b      	ldrb	r3, [r5, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d100      	bne.n	8004e66 <_svfiprintf_r+0x7a>
 8004e64:	e0a6      	b.n	8004fb4 <_svfiprintf_r+0x1c8>
 8004e66:	2201      	movs	r2, #1
 8004e68:	2300      	movs	r3, #0
 8004e6a:	4252      	negs	r2, r2
 8004e6c:	6062      	str	r2, [r4, #4]
 8004e6e:	a904      	add	r1, sp, #16
 8004e70:	3254      	adds	r2, #84	@ 0x54
 8004e72:	1852      	adds	r2, r2, r1
 8004e74:	1c6e      	adds	r6, r5, #1
 8004e76:	6023      	str	r3, [r4, #0]
 8004e78:	60e3      	str	r3, [r4, #12]
 8004e7a:	60a3      	str	r3, [r4, #8]
 8004e7c:	7013      	strb	r3, [r2, #0]
 8004e7e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004e80:	4b54      	ldr	r3, [pc, #336]	@ (8004fd4 <_svfiprintf_r+0x1e8>)
 8004e82:	2205      	movs	r2, #5
 8004e84:	0018      	movs	r0, r3
 8004e86:	7831      	ldrb	r1, [r6, #0]
 8004e88:	9305      	str	r3, [sp, #20]
 8004e8a:	f000 fce7 	bl	800585c <memchr>
 8004e8e:	1c75      	adds	r5, r6, #1
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d11f      	bne.n	8004ed4 <_svfiprintf_r+0xe8>
 8004e94:	6822      	ldr	r2, [r4, #0]
 8004e96:	06d3      	lsls	r3, r2, #27
 8004e98:	d504      	bpl.n	8004ea4 <_svfiprintf_r+0xb8>
 8004e9a:	2353      	movs	r3, #83	@ 0x53
 8004e9c:	a904      	add	r1, sp, #16
 8004e9e:	185b      	adds	r3, r3, r1
 8004ea0:	2120      	movs	r1, #32
 8004ea2:	7019      	strb	r1, [r3, #0]
 8004ea4:	0713      	lsls	r3, r2, #28
 8004ea6:	d504      	bpl.n	8004eb2 <_svfiprintf_r+0xc6>
 8004ea8:	2353      	movs	r3, #83	@ 0x53
 8004eaa:	a904      	add	r1, sp, #16
 8004eac:	185b      	adds	r3, r3, r1
 8004eae:	212b      	movs	r1, #43	@ 0x2b
 8004eb0:	7019      	strb	r1, [r3, #0]
 8004eb2:	7833      	ldrb	r3, [r6, #0]
 8004eb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004eb6:	d016      	beq.n	8004ee6 <_svfiprintf_r+0xfa>
 8004eb8:	0035      	movs	r5, r6
 8004eba:	2100      	movs	r1, #0
 8004ebc:	200a      	movs	r0, #10
 8004ebe:	68e3      	ldr	r3, [r4, #12]
 8004ec0:	782a      	ldrb	r2, [r5, #0]
 8004ec2:	1c6e      	adds	r6, r5, #1
 8004ec4:	3a30      	subs	r2, #48	@ 0x30
 8004ec6:	2a09      	cmp	r2, #9
 8004ec8:	d950      	bls.n	8004f6c <_svfiprintf_r+0x180>
 8004eca:	2900      	cmp	r1, #0
 8004ecc:	d111      	bne.n	8004ef2 <_svfiprintf_r+0x106>
 8004ece:	e017      	b.n	8004f00 <_svfiprintf_r+0x114>
 8004ed0:	3501      	adds	r5, #1
 8004ed2:	e7af      	b.n	8004e34 <_svfiprintf_r+0x48>
 8004ed4:	9b05      	ldr	r3, [sp, #20]
 8004ed6:	6822      	ldr	r2, [r4, #0]
 8004ed8:	1ac0      	subs	r0, r0, r3
 8004eda:	2301      	movs	r3, #1
 8004edc:	4083      	lsls	r3, r0
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	002e      	movs	r6, r5
 8004ee2:	6023      	str	r3, [r4, #0]
 8004ee4:	e7cc      	b.n	8004e80 <_svfiprintf_r+0x94>
 8004ee6:	9b07      	ldr	r3, [sp, #28]
 8004ee8:	1d19      	adds	r1, r3, #4
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	9107      	str	r1, [sp, #28]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	db01      	blt.n	8004ef6 <_svfiprintf_r+0x10a>
 8004ef2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ef4:	e004      	b.n	8004f00 <_svfiprintf_r+0x114>
 8004ef6:	425b      	negs	r3, r3
 8004ef8:	60e3      	str	r3, [r4, #12]
 8004efa:	2302      	movs	r3, #2
 8004efc:	4313      	orrs	r3, r2
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	782b      	ldrb	r3, [r5, #0]
 8004f02:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f04:	d10c      	bne.n	8004f20 <_svfiprintf_r+0x134>
 8004f06:	786b      	ldrb	r3, [r5, #1]
 8004f08:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f0a:	d134      	bne.n	8004f76 <_svfiprintf_r+0x18a>
 8004f0c:	9b07      	ldr	r3, [sp, #28]
 8004f0e:	3502      	adds	r5, #2
 8004f10:	1d1a      	adds	r2, r3, #4
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	9207      	str	r2, [sp, #28]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	da01      	bge.n	8004f1e <_svfiprintf_r+0x132>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	425b      	negs	r3, r3
 8004f1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f20:	4e2d      	ldr	r6, [pc, #180]	@ (8004fd8 <_svfiprintf_r+0x1ec>)
 8004f22:	2203      	movs	r2, #3
 8004f24:	0030      	movs	r0, r6
 8004f26:	7829      	ldrb	r1, [r5, #0]
 8004f28:	f000 fc98 	bl	800585c <memchr>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d006      	beq.n	8004f3e <_svfiprintf_r+0x152>
 8004f30:	2340      	movs	r3, #64	@ 0x40
 8004f32:	1b80      	subs	r0, r0, r6
 8004f34:	4083      	lsls	r3, r0
 8004f36:	6822      	ldr	r2, [r4, #0]
 8004f38:	3501      	adds	r5, #1
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	6023      	str	r3, [r4, #0]
 8004f3e:	7829      	ldrb	r1, [r5, #0]
 8004f40:	2206      	movs	r2, #6
 8004f42:	4826      	ldr	r0, [pc, #152]	@ (8004fdc <_svfiprintf_r+0x1f0>)
 8004f44:	1c6e      	adds	r6, r5, #1
 8004f46:	7621      	strb	r1, [r4, #24]
 8004f48:	f000 fc88 	bl	800585c <memchr>
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	d038      	beq.n	8004fc2 <_svfiprintf_r+0x1d6>
 8004f50:	4b23      	ldr	r3, [pc, #140]	@ (8004fe0 <_svfiprintf_r+0x1f4>)
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d122      	bne.n	8004f9c <_svfiprintf_r+0x1b0>
 8004f56:	2207      	movs	r2, #7
 8004f58:	9b07      	ldr	r3, [sp, #28]
 8004f5a:	3307      	adds	r3, #7
 8004f5c:	4393      	bics	r3, r2
 8004f5e:	3308      	adds	r3, #8
 8004f60:	9307      	str	r3, [sp, #28]
 8004f62:	6963      	ldr	r3, [r4, #20]
 8004f64:	9a04      	ldr	r2, [sp, #16]
 8004f66:	189b      	adds	r3, r3, r2
 8004f68:	6163      	str	r3, [r4, #20]
 8004f6a:	e762      	b.n	8004e32 <_svfiprintf_r+0x46>
 8004f6c:	4343      	muls	r3, r0
 8004f6e:	0035      	movs	r5, r6
 8004f70:	2101      	movs	r1, #1
 8004f72:	189b      	adds	r3, r3, r2
 8004f74:	e7a4      	b.n	8004ec0 <_svfiprintf_r+0xd4>
 8004f76:	2300      	movs	r3, #0
 8004f78:	200a      	movs	r0, #10
 8004f7a:	0019      	movs	r1, r3
 8004f7c:	3501      	adds	r5, #1
 8004f7e:	6063      	str	r3, [r4, #4]
 8004f80:	782a      	ldrb	r2, [r5, #0]
 8004f82:	1c6e      	adds	r6, r5, #1
 8004f84:	3a30      	subs	r2, #48	@ 0x30
 8004f86:	2a09      	cmp	r2, #9
 8004f88:	d903      	bls.n	8004f92 <_svfiprintf_r+0x1a6>
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0c8      	beq.n	8004f20 <_svfiprintf_r+0x134>
 8004f8e:	9109      	str	r1, [sp, #36]	@ 0x24
 8004f90:	e7c6      	b.n	8004f20 <_svfiprintf_r+0x134>
 8004f92:	4341      	muls	r1, r0
 8004f94:	0035      	movs	r5, r6
 8004f96:	2301      	movs	r3, #1
 8004f98:	1889      	adds	r1, r1, r2
 8004f9a:	e7f1      	b.n	8004f80 <_svfiprintf_r+0x194>
 8004f9c:	aa07      	add	r2, sp, #28
 8004f9e:	9200      	str	r2, [sp, #0]
 8004fa0:	0021      	movs	r1, r4
 8004fa2:	003a      	movs	r2, r7
 8004fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe4 <_svfiprintf_r+0x1f8>)
 8004fa6:	9803      	ldr	r0, [sp, #12]
 8004fa8:	e000      	b.n	8004fac <_svfiprintf_r+0x1c0>
 8004faa:	bf00      	nop
 8004fac:	9004      	str	r0, [sp, #16]
 8004fae:	9b04      	ldr	r3, [sp, #16]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	d1d6      	bne.n	8004f62 <_svfiprintf_r+0x176>
 8004fb4:	89bb      	ldrh	r3, [r7, #12]
 8004fb6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004fb8:	065b      	lsls	r3, r3, #25
 8004fba:	d500      	bpl.n	8004fbe <_svfiprintf_r+0x1d2>
 8004fbc:	e72c      	b.n	8004e18 <_svfiprintf_r+0x2c>
 8004fbe:	b021      	add	sp, #132	@ 0x84
 8004fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fc2:	aa07      	add	r2, sp, #28
 8004fc4:	9200      	str	r2, [sp, #0]
 8004fc6:	0021      	movs	r1, r4
 8004fc8:	003a      	movs	r2, r7
 8004fca:	4b06      	ldr	r3, [pc, #24]	@ (8004fe4 <_svfiprintf_r+0x1f8>)
 8004fcc:	9803      	ldr	r0, [sp, #12]
 8004fce:	f000 f9bf 	bl	8005350 <_printf_i>
 8004fd2:	e7eb      	b.n	8004fac <_svfiprintf_r+0x1c0>
 8004fd4:	08005be0 	.word	0x08005be0
 8004fd8:	08005be6 	.word	0x08005be6
 8004fdc:	08005bea 	.word	0x08005bea
 8004fe0:	00000000 	.word	0x00000000
 8004fe4:	08004d2d 	.word	0x08004d2d

08004fe8 <__sfputc_r>:
 8004fe8:	6893      	ldr	r3, [r2, #8]
 8004fea:	b510      	push	{r4, lr}
 8004fec:	3b01      	subs	r3, #1
 8004fee:	6093      	str	r3, [r2, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	da04      	bge.n	8004ffe <__sfputc_r+0x16>
 8004ff4:	6994      	ldr	r4, [r2, #24]
 8004ff6:	42a3      	cmp	r3, r4
 8004ff8:	db07      	blt.n	800500a <__sfputc_r+0x22>
 8004ffa:	290a      	cmp	r1, #10
 8004ffc:	d005      	beq.n	800500a <__sfputc_r+0x22>
 8004ffe:	6813      	ldr	r3, [r2, #0]
 8005000:	1c58      	adds	r0, r3, #1
 8005002:	6010      	str	r0, [r2, #0]
 8005004:	7019      	strb	r1, [r3, #0]
 8005006:	0008      	movs	r0, r1
 8005008:	bd10      	pop	{r4, pc}
 800500a:	f000 fb60 	bl	80056ce <__swbuf_r>
 800500e:	0001      	movs	r1, r0
 8005010:	e7f9      	b.n	8005006 <__sfputc_r+0x1e>

08005012 <__sfputs_r>:
 8005012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005014:	0006      	movs	r6, r0
 8005016:	000f      	movs	r7, r1
 8005018:	0014      	movs	r4, r2
 800501a:	18d5      	adds	r5, r2, r3
 800501c:	42ac      	cmp	r4, r5
 800501e:	d101      	bne.n	8005024 <__sfputs_r+0x12>
 8005020:	2000      	movs	r0, #0
 8005022:	e007      	b.n	8005034 <__sfputs_r+0x22>
 8005024:	7821      	ldrb	r1, [r4, #0]
 8005026:	003a      	movs	r2, r7
 8005028:	0030      	movs	r0, r6
 800502a:	f7ff ffdd 	bl	8004fe8 <__sfputc_r>
 800502e:	3401      	adds	r4, #1
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	d1f3      	bne.n	800501c <__sfputs_r+0xa>
 8005034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005038 <_vfiprintf_r>:
 8005038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800503a:	b0a1      	sub	sp, #132	@ 0x84
 800503c:	000f      	movs	r7, r1
 800503e:	0015      	movs	r5, r2
 8005040:	001e      	movs	r6, r3
 8005042:	9003      	str	r0, [sp, #12]
 8005044:	2800      	cmp	r0, #0
 8005046:	d004      	beq.n	8005052 <_vfiprintf_r+0x1a>
 8005048:	6a03      	ldr	r3, [r0, #32]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <_vfiprintf_r+0x1a>
 800504e:	f7ff fc21 	bl	8004894 <__sinit>
 8005052:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005054:	07db      	lsls	r3, r3, #31
 8005056:	d405      	bmi.n	8005064 <_vfiprintf_r+0x2c>
 8005058:	89bb      	ldrh	r3, [r7, #12]
 800505a:	059b      	lsls	r3, r3, #22
 800505c:	d402      	bmi.n	8005064 <_vfiprintf_r+0x2c>
 800505e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005060:	f7ff fd5d 	bl	8004b1e <__retarget_lock_acquire_recursive>
 8005064:	89bb      	ldrh	r3, [r7, #12]
 8005066:	071b      	lsls	r3, r3, #28
 8005068:	d502      	bpl.n	8005070 <_vfiprintf_r+0x38>
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d113      	bne.n	8005098 <_vfiprintf_r+0x60>
 8005070:	0039      	movs	r1, r7
 8005072:	9803      	ldr	r0, [sp, #12]
 8005074:	f000 fb6e 	bl	8005754 <__swsetup_r>
 8005078:	2800      	cmp	r0, #0
 800507a:	d00d      	beq.n	8005098 <_vfiprintf_r+0x60>
 800507c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800507e:	07db      	lsls	r3, r3, #31
 8005080:	d503      	bpl.n	800508a <_vfiprintf_r+0x52>
 8005082:	2001      	movs	r0, #1
 8005084:	4240      	negs	r0, r0
 8005086:	b021      	add	sp, #132	@ 0x84
 8005088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800508a:	89bb      	ldrh	r3, [r7, #12]
 800508c:	059b      	lsls	r3, r3, #22
 800508e:	d4f8      	bmi.n	8005082 <_vfiprintf_r+0x4a>
 8005090:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005092:	f7ff fd45 	bl	8004b20 <__retarget_lock_release_recursive>
 8005096:	e7f4      	b.n	8005082 <_vfiprintf_r+0x4a>
 8005098:	2300      	movs	r3, #0
 800509a:	ac08      	add	r4, sp, #32
 800509c:	6163      	str	r3, [r4, #20]
 800509e:	3320      	adds	r3, #32
 80050a0:	7663      	strb	r3, [r4, #25]
 80050a2:	3310      	adds	r3, #16
 80050a4:	76a3      	strb	r3, [r4, #26]
 80050a6:	9607      	str	r6, [sp, #28]
 80050a8:	002e      	movs	r6, r5
 80050aa:	7833      	ldrb	r3, [r6, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <_vfiprintf_r+0x7c>
 80050b0:	2b25      	cmp	r3, #37	@ 0x25
 80050b2:	d148      	bne.n	8005146 <_vfiprintf_r+0x10e>
 80050b4:	1b73      	subs	r3, r6, r5
 80050b6:	9305      	str	r3, [sp, #20]
 80050b8:	42ae      	cmp	r6, r5
 80050ba:	d00b      	beq.n	80050d4 <_vfiprintf_r+0x9c>
 80050bc:	002a      	movs	r2, r5
 80050be:	0039      	movs	r1, r7
 80050c0:	9803      	ldr	r0, [sp, #12]
 80050c2:	f7ff ffa6 	bl	8005012 <__sfputs_r>
 80050c6:	3001      	adds	r0, #1
 80050c8:	d100      	bne.n	80050cc <_vfiprintf_r+0x94>
 80050ca:	e0ae      	b.n	800522a <_vfiprintf_r+0x1f2>
 80050cc:	6963      	ldr	r3, [r4, #20]
 80050ce:	9a05      	ldr	r2, [sp, #20]
 80050d0:	189b      	adds	r3, r3, r2
 80050d2:	6163      	str	r3, [r4, #20]
 80050d4:	7833      	ldrb	r3, [r6, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d100      	bne.n	80050dc <_vfiprintf_r+0xa4>
 80050da:	e0a6      	b.n	800522a <_vfiprintf_r+0x1f2>
 80050dc:	2201      	movs	r2, #1
 80050de:	2300      	movs	r3, #0
 80050e0:	4252      	negs	r2, r2
 80050e2:	6062      	str	r2, [r4, #4]
 80050e4:	a904      	add	r1, sp, #16
 80050e6:	3254      	adds	r2, #84	@ 0x54
 80050e8:	1852      	adds	r2, r2, r1
 80050ea:	1c75      	adds	r5, r6, #1
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	60e3      	str	r3, [r4, #12]
 80050f0:	60a3      	str	r3, [r4, #8]
 80050f2:	7013      	strb	r3, [r2, #0]
 80050f4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80050f6:	4b59      	ldr	r3, [pc, #356]	@ (800525c <_vfiprintf_r+0x224>)
 80050f8:	2205      	movs	r2, #5
 80050fa:	0018      	movs	r0, r3
 80050fc:	7829      	ldrb	r1, [r5, #0]
 80050fe:	9305      	str	r3, [sp, #20]
 8005100:	f000 fbac 	bl	800585c <memchr>
 8005104:	1c6e      	adds	r6, r5, #1
 8005106:	2800      	cmp	r0, #0
 8005108:	d11f      	bne.n	800514a <_vfiprintf_r+0x112>
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	06d3      	lsls	r3, r2, #27
 800510e:	d504      	bpl.n	800511a <_vfiprintf_r+0xe2>
 8005110:	2353      	movs	r3, #83	@ 0x53
 8005112:	a904      	add	r1, sp, #16
 8005114:	185b      	adds	r3, r3, r1
 8005116:	2120      	movs	r1, #32
 8005118:	7019      	strb	r1, [r3, #0]
 800511a:	0713      	lsls	r3, r2, #28
 800511c:	d504      	bpl.n	8005128 <_vfiprintf_r+0xf0>
 800511e:	2353      	movs	r3, #83	@ 0x53
 8005120:	a904      	add	r1, sp, #16
 8005122:	185b      	adds	r3, r3, r1
 8005124:	212b      	movs	r1, #43	@ 0x2b
 8005126:	7019      	strb	r1, [r3, #0]
 8005128:	782b      	ldrb	r3, [r5, #0]
 800512a:	2b2a      	cmp	r3, #42	@ 0x2a
 800512c:	d016      	beq.n	800515c <_vfiprintf_r+0x124>
 800512e:	002e      	movs	r6, r5
 8005130:	2100      	movs	r1, #0
 8005132:	200a      	movs	r0, #10
 8005134:	68e3      	ldr	r3, [r4, #12]
 8005136:	7832      	ldrb	r2, [r6, #0]
 8005138:	1c75      	adds	r5, r6, #1
 800513a:	3a30      	subs	r2, #48	@ 0x30
 800513c:	2a09      	cmp	r2, #9
 800513e:	d950      	bls.n	80051e2 <_vfiprintf_r+0x1aa>
 8005140:	2900      	cmp	r1, #0
 8005142:	d111      	bne.n	8005168 <_vfiprintf_r+0x130>
 8005144:	e017      	b.n	8005176 <_vfiprintf_r+0x13e>
 8005146:	3601      	adds	r6, #1
 8005148:	e7af      	b.n	80050aa <_vfiprintf_r+0x72>
 800514a:	9b05      	ldr	r3, [sp, #20]
 800514c:	6822      	ldr	r2, [r4, #0]
 800514e:	1ac0      	subs	r0, r0, r3
 8005150:	2301      	movs	r3, #1
 8005152:	4083      	lsls	r3, r0
 8005154:	4313      	orrs	r3, r2
 8005156:	0035      	movs	r5, r6
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	e7cc      	b.n	80050f6 <_vfiprintf_r+0xbe>
 800515c:	9b07      	ldr	r3, [sp, #28]
 800515e:	1d19      	adds	r1, r3, #4
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	9107      	str	r1, [sp, #28]
 8005164:	2b00      	cmp	r3, #0
 8005166:	db01      	blt.n	800516c <_vfiprintf_r+0x134>
 8005168:	930b      	str	r3, [sp, #44]	@ 0x2c
 800516a:	e004      	b.n	8005176 <_vfiprintf_r+0x13e>
 800516c:	425b      	negs	r3, r3
 800516e:	60e3      	str	r3, [r4, #12]
 8005170:	2302      	movs	r3, #2
 8005172:	4313      	orrs	r3, r2
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	7833      	ldrb	r3, [r6, #0]
 8005178:	2b2e      	cmp	r3, #46	@ 0x2e
 800517a:	d10c      	bne.n	8005196 <_vfiprintf_r+0x15e>
 800517c:	7873      	ldrb	r3, [r6, #1]
 800517e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005180:	d134      	bne.n	80051ec <_vfiprintf_r+0x1b4>
 8005182:	9b07      	ldr	r3, [sp, #28]
 8005184:	3602      	adds	r6, #2
 8005186:	1d1a      	adds	r2, r3, #4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	9207      	str	r2, [sp, #28]
 800518c:	2b00      	cmp	r3, #0
 800518e:	da01      	bge.n	8005194 <_vfiprintf_r+0x15c>
 8005190:	2301      	movs	r3, #1
 8005192:	425b      	negs	r3, r3
 8005194:	9309      	str	r3, [sp, #36]	@ 0x24
 8005196:	4d32      	ldr	r5, [pc, #200]	@ (8005260 <_vfiprintf_r+0x228>)
 8005198:	2203      	movs	r2, #3
 800519a:	0028      	movs	r0, r5
 800519c:	7831      	ldrb	r1, [r6, #0]
 800519e:	f000 fb5d 	bl	800585c <memchr>
 80051a2:	2800      	cmp	r0, #0
 80051a4:	d006      	beq.n	80051b4 <_vfiprintf_r+0x17c>
 80051a6:	2340      	movs	r3, #64	@ 0x40
 80051a8:	1b40      	subs	r0, r0, r5
 80051aa:	4083      	lsls	r3, r0
 80051ac:	6822      	ldr	r2, [r4, #0]
 80051ae:	3601      	adds	r6, #1
 80051b0:	4313      	orrs	r3, r2
 80051b2:	6023      	str	r3, [r4, #0]
 80051b4:	7831      	ldrb	r1, [r6, #0]
 80051b6:	2206      	movs	r2, #6
 80051b8:	482a      	ldr	r0, [pc, #168]	@ (8005264 <_vfiprintf_r+0x22c>)
 80051ba:	1c75      	adds	r5, r6, #1
 80051bc:	7621      	strb	r1, [r4, #24]
 80051be:	f000 fb4d 	bl	800585c <memchr>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d040      	beq.n	8005248 <_vfiprintf_r+0x210>
 80051c6:	4b28      	ldr	r3, [pc, #160]	@ (8005268 <_vfiprintf_r+0x230>)
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d122      	bne.n	8005212 <_vfiprintf_r+0x1da>
 80051cc:	2207      	movs	r2, #7
 80051ce:	9b07      	ldr	r3, [sp, #28]
 80051d0:	3307      	adds	r3, #7
 80051d2:	4393      	bics	r3, r2
 80051d4:	3308      	adds	r3, #8
 80051d6:	9307      	str	r3, [sp, #28]
 80051d8:	6963      	ldr	r3, [r4, #20]
 80051da:	9a04      	ldr	r2, [sp, #16]
 80051dc:	189b      	adds	r3, r3, r2
 80051de:	6163      	str	r3, [r4, #20]
 80051e0:	e762      	b.n	80050a8 <_vfiprintf_r+0x70>
 80051e2:	4343      	muls	r3, r0
 80051e4:	002e      	movs	r6, r5
 80051e6:	2101      	movs	r1, #1
 80051e8:	189b      	adds	r3, r3, r2
 80051ea:	e7a4      	b.n	8005136 <_vfiprintf_r+0xfe>
 80051ec:	2300      	movs	r3, #0
 80051ee:	200a      	movs	r0, #10
 80051f0:	0019      	movs	r1, r3
 80051f2:	3601      	adds	r6, #1
 80051f4:	6063      	str	r3, [r4, #4]
 80051f6:	7832      	ldrb	r2, [r6, #0]
 80051f8:	1c75      	adds	r5, r6, #1
 80051fa:	3a30      	subs	r2, #48	@ 0x30
 80051fc:	2a09      	cmp	r2, #9
 80051fe:	d903      	bls.n	8005208 <_vfiprintf_r+0x1d0>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0c8      	beq.n	8005196 <_vfiprintf_r+0x15e>
 8005204:	9109      	str	r1, [sp, #36]	@ 0x24
 8005206:	e7c6      	b.n	8005196 <_vfiprintf_r+0x15e>
 8005208:	4341      	muls	r1, r0
 800520a:	002e      	movs	r6, r5
 800520c:	2301      	movs	r3, #1
 800520e:	1889      	adds	r1, r1, r2
 8005210:	e7f1      	b.n	80051f6 <_vfiprintf_r+0x1be>
 8005212:	aa07      	add	r2, sp, #28
 8005214:	9200      	str	r2, [sp, #0]
 8005216:	0021      	movs	r1, r4
 8005218:	003a      	movs	r2, r7
 800521a:	4b14      	ldr	r3, [pc, #80]	@ (800526c <_vfiprintf_r+0x234>)
 800521c:	9803      	ldr	r0, [sp, #12]
 800521e:	e000      	b.n	8005222 <_vfiprintf_r+0x1ea>
 8005220:	bf00      	nop
 8005222:	9004      	str	r0, [sp, #16]
 8005224:	9b04      	ldr	r3, [sp, #16]
 8005226:	3301      	adds	r3, #1
 8005228:	d1d6      	bne.n	80051d8 <_vfiprintf_r+0x1a0>
 800522a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800522c:	07db      	lsls	r3, r3, #31
 800522e:	d405      	bmi.n	800523c <_vfiprintf_r+0x204>
 8005230:	89bb      	ldrh	r3, [r7, #12]
 8005232:	059b      	lsls	r3, r3, #22
 8005234:	d402      	bmi.n	800523c <_vfiprintf_r+0x204>
 8005236:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005238:	f7ff fc72 	bl	8004b20 <__retarget_lock_release_recursive>
 800523c:	89bb      	ldrh	r3, [r7, #12]
 800523e:	065b      	lsls	r3, r3, #25
 8005240:	d500      	bpl.n	8005244 <_vfiprintf_r+0x20c>
 8005242:	e71e      	b.n	8005082 <_vfiprintf_r+0x4a>
 8005244:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005246:	e71e      	b.n	8005086 <_vfiprintf_r+0x4e>
 8005248:	aa07      	add	r2, sp, #28
 800524a:	9200      	str	r2, [sp, #0]
 800524c:	0021      	movs	r1, r4
 800524e:	003a      	movs	r2, r7
 8005250:	4b06      	ldr	r3, [pc, #24]	@ (800526c <_vfiprintf_r+0x234>)
 8005252:	9803      	ldr	r0, [sp, #12]
 8005254:	f000 f87c 	bl	8005350 <_printf_i>
 8005258:	e7e3      	b.n	8005222 <_vfiprintf_r+0x1ea>
 800525a:	46c0      	nop			@ (mov r8, r8)
 800525c:	08005be0 	.word	0x08005be0
 8005260:	08005be6 	.word	0x08005be6
 8005264:	08005bea 	.word	0x08005bea
 8005268:	00000000 	.word	0x00000000
 800526c:	08005013 	.word	0x08005013

08005270 <_printf_common>:
 8005270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005272:	0016      	movs	r6, r2
 8005274:	9301      	str	r3, [sp, #4]
 8005276:	688a      	ldr	r2, [r1, #8]
 8005278:	690b      	ldr	r3, [r1, #16]
 800527a:	000c      	movs	r4, r1
 800527c:	9000      	str	r0, [sp, #0]
 800527e:	4293      	cmp	r3, r2
 8005280:	da00      	bge.n	8005284 <_printf_common+0x14>
 8005282:	0013      	movs	r3, r2
 8005284:	0022      	movs	r2, r4
 8005286:	6033      	str	r3, [r6, #0]
 8005288:	3243      	adds	r2, #67	@ 0x43
 800528a:	7812      	ldrb	r2, [r2, #0]
 800528c:	2a00      	cmp	r2, #0
 800528e:	d001      	beq.n	8005294 <_printf_common+0x24>
 8005290:	3301      	adds	r3, #1
 8005292:	6033      	str	r3, [r6, #0]
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	069b      	lsls	r3, r3, #26
 8005298:	d502      	bpl.n	80052a0 <_printf_common+0x30>
 800529a:	6833      	ldr	r3, [r6, #0]
 800529c:	3302      	adds	r3, #2
 800529e:	6033      	str	r3, [r6, #0]
 80052a0:	6822      	ldr	r2, [r4, #0]
 80052a2:	2306      	movs	r3, #6
 80052a4:	0015      	movs	r5, r2
 80052a6:	401d      	ands	r5, r3
 80052a8:	421a      	tst	r2, r3
 80052aa:	d027      	beq.n	80052fc <_printf_common+0x8c>
 80052ac:	0023      	movs	r3, r4
 80052ae:	3343      	adds	r3, #67	@ 0x43
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	1e5a      	subs	r2, r3, #1
 80052b4:	4193      	sbcs	r3, r2
 80052b6:	6822      	ldr	r2, [r4, #0]
 80052b8:	0692      	lsls	r2, r2, #26
 80052ba:	d430      	bmi.n	800531e <_printf_common+0xae>
 80052bc:	0022      	movs	r2, r4
 80052be:	9901      	ldr	r1, [sp, #4]
 80052c0:	9800      	ldr	r0, [sp, #0]
 80052c2:	9d08      	ldr	r5, [sp, #32]
 80052c4:	3243      	adds	r2, #67	@ 0x43
 80052c6:	47a8      	blx	r5
 80052c8:	3001      	adds	r0, #1
 80052ca:	d025      	beq.n	8005318 <_printf_common+0xa8>
 80052cc:	2206      	movs	r2, #6
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	2500      	movs	r5, #0
 80052d2:	4013      	ands	r3, r2
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d105      	bne.n	80052e4 <_printf_common+0x74>
 80052d8:	6833      	ldr	r3, [r6, #0]
 80052da:	68e5      	ldr	r5, [r4, #12]
 80052dc:	1aed      	subs	r5, r5, r3
 80052de:	43eb      	mvns	r3, r5
 80052e0:	17db      	asrs	r3, r3, #31
 80052e2:	401d      	ands	r5, r3
 80052e4:	68a3      	ldr	r3, [r4, #8]
 80052e6:	6922      	ldr	r2, [r4, #16]
 80052e8:	4293      	cmp	r3, r2
 80052ea:	dd01      	ble.n	80052f0 <_printf_common+0x80>
 80052ec:	1a9b      	subs	r3, r3, r2
 80052ee:	18ed      	adds	r5, r5, r3
 80052f0:	2600      	movs	r6, #0
 80052f2:	42b5      	cmp	r5, r6
 80052f4:	d120      	bne.n	8005338 <_printf_common+0xc8>
 80052f6:	2000      	movs	r0, #0
 80052f8:	e010      	b.n	800531c <_printf_common+0xac>
 80052fa:	3501      	adds	r5, #1
 80052fc:	68e3      	ldr	r3, [r4, #12]
 80052fe:	6832      	ldr	r2, [r6, #0]
 8005300:	1a9b      	subs	r3, r3, r2
 8005302:	42ab      	cmp	r3, r5
 8005304:	ddd2      	ble.n	80052ac <_printf_common+0x3c>
 8005306:	0022      	movs	r2, r4
 8005308:	2301      	movs	r3, #1
 800530a:	9901      	ldr	r1, [sp, #4]
 800530c:	9800      	ldr	r0, [sp, #0]
 800530e:	9f08      	ldr	r7, [sp, #32]
 8005310:	3219      	adds	r2, #25
 8005312:	47b8      	blx	r7
 8005314:	3001      	adds	r0, #1
 8005316:	d1f0      	bne.n	80052fa <_printf_common+0x8a>
 8005318:	2001      	movs	r0, #1
 800531a:	4240      	negs	r0, r0
 800531c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800531e:	2030      	movs	r0, #48	@ 0x30
 8005320:	18e1      	adds	r1, r4, r3
 8005322:	3143      	adds	r1, #67	@ 0x43
 8005324:	7008      	strb	r0, [r1, #0]
 8005326:	0021      	movs	r1, r4
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	3145      	adds	r1, #69	@ 0x45
 800532c:	7809      	ldrb	r1, [r1, #0]
 800532e:	18a2      	adds	r2, r4, r2
 8005330:	3243      	adds	r2, #67	@ 0x43
 8005332:	3302      	adds	r3, #2
 8005334:	7011      	strb	r1, [r2, #0]
 8005336:	e7c1      	b.n	80052bc <_printf_common+0x4c>
 8005338:	0022      	movs	r2, r4
 800533a:	2301      	movs	r3, #1
 800533c:	9901      	ldr	r1, [sp, #4]
 800533e:	9800      	ldr	r0, [sp, #0]
 8005340:	9f08      	ldr	r7, [sp, #32]
 8005342:	321a      	adds	r2, #26
 8005344:	47b8      	blx	r7
 8005346:	3001      	adds	r0, #1
 8005348:	d0e6      	beq.n	8005318 <_printf_common+0xa8>
 800534a:	3601      	adds	r6, #1
 800534c:	e7d1      	b.n	80052f2 <_printf_common+0x82>
	...

08005350 <_printf_i>:
 8005350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005352:	b08b      	sub	sp, #44	@ 0x2c
 8005354:	9206      	str	r2, [sp, #24]
 8005356:	000a      	movs	r2, r1
 8005358:	3243      	adds	r2, #67	@ 0x43
 800535a:	9307      	str	r3, [sp, #28]
 800535c:	9005      	str	r0, [sp, #20]
 800535e:	9203      	str	r2, [sp, #12]
 8005360:	7e0a      	ldrb	r2, [r1, #24]
 8005362:	000c      	movs	r4, r1
 8005364:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005366:	2a78      	cmp	r2, #120	@ 0x78
 8005368:	d809      	bhi.n	800537e <_printf_i+0x2e>
 800536a:	2a62      	cmp	r2, #98	@ 0x62
 800536c:	d80b      	bhi.n	8005386 <_printf_i+0x36>
 800536e:	2a00      	cmp	r2, #0
 8005370:	d100      	bne.n	8005374 <_printf_i+0x24>
 8005372:	e0bc      	b.n	80054ee <_printf_i+0x19e>
 8005374:	497b      	ldr	r1, [pc, #492]	@ (8005564 <_printf_i+0x214>)
 8005376:	9104      	str	r1, [sp, #16]
 8005378:	2a58      	cmp	r2, #88	@ 0x58
 800537a:	d100      	bne.n	800537e <_printf_i+0x2e>
 800537c:	e090      	b.n	80054a0 <_printf_i+0x150>
 800537e:	0025      	movs	r5, r4
 8005380:	3542      	adds	r5, #66	@ 0x42
 8005382:	702a      	strb	r2, [r5, #0]
 8005384:	e022      	b.n	80053cc <_printf_i+0x7c>
 8005386:	0010      	movs	r0, r2
 8005388:	3863      	subs	r0, #99	@ 0x63
 800538a:	2815      	cmp	r0, #21
 800538c:	d8f7      	bhi.n	800537e <_printf_i+0x2e>
 800538e:	f7fa feb7 	bl	8000100 <__gnu_thumb1_case_shi>
 8005392:	0016      	.short	0x0016
 8005394:	fff6001f 	.word	0xfff6001f
 8005398:	fff6fff6 	.word	0xfff6fff6
 800539c:	001ffff6 	.word	0x001ffff6
 80053a0:	fff6fff6 	.word	0xfff6fff6
 80053a4:	fff6fff6 	.word	0xfff6fff6
 80053a8:	003600a1 	.word	0x003600a1
 80053ac:	fff60080 	.word	0xfff60080
 80053b0:	00b2fff6 	.word	0x00b2fff6
 80053b4:	0036fff6 	.word	0x0036fff6
 80053b8:	fff6fff6 	.word	0xfff6fff6
 80053bc:	0084      	.short	0x0084
 80053be:	0025      	movs	r5, r4
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	3542      	adds	r5, #66	@ 0x42
 80053c4:	1d11      	adds	r1, r2, #4
 80053c6:	6019      	str	r1, [r3, #0]
 80053c8:	6813      	ldr	r3, [r2, #0]
 80053ca:	702b      	strb	r3, [r5, #0]
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0a0      	b.n	8005512 <_printf_i+0x1c2>
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	6809      	ldr	r1, [r1, #0]
 80053d4:	1d02      	adds	r2, r0, #4
 80053d6:	060d      	lsls	r5, r1, #24
 80053d8:	d50b      	bpl.n	80053f2 <_printf_i+0xa2>
 80053da:	6806      	ldr	r6, [r0, #0]
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	2e00      	cmp	r6, #0
 80053e0:	da03      	bge.n	80053ea <_printf_i+0x9a>
 80053e2:	232d      	movs	r3, #45	@ 0x2d
 80053e4:	9a03      	ldr	r2, [sp, #12]
 80053e6:	4276      	negs	r6, r6
 80053e8:	7013      	strb	r3, [r2, #0]
 80053ea:	4b5e      	ldr	r3, [pc, #376]	@ (8005564 <_printf_i+0x214>)
 80053ec:	270a      	movs	r7, #10
 80053ee:	9304      	str	r3, [sp, #16]
 80053f0:	e018      	b.n	8005424 <_printf_i+0xd4>
 80053f2:	6806      	ldr	r6, [r0, #0]
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	0649      	lsls	r1, r1, #25
 80053f8:	d5f1      	bpl.n	80053de <_printf_i+0x8e>
 80053fa:	b236      	sxth	r6, r6
 80053fc:	e7ef      	b.n	80053de <_printf_i+0x8e>
 80053fe:	6808      	ldr	r0, [r1, #0]
 8005400:	6819      	ldr	r1, [r3, #0]
 8005402:	c940      	ldmia	r1!, {r6}
 8005404:	0605      	lsls	r5, r0, #24
 8005406:	d402      	bmi.n	800540e <_printf_i+0xbe>
 8005408:	0640      	lsls	r0, r0, #25
 800540a:	d500      	bpl.n	800540e <_printf_i+0xbe>
 800540c:	b2b6      	uxth	r6, r6
 800540e:	6019      	str	r1, [r3, #0]
 8005410:	4b54      	ldr	r3, [pc, #336]	@ (8005564 <_printf_i+0x214>)
 8005412:	270a      	movs	r7, #10
 8005414:	9304      	str	r3, [sp, #16]
 8005416:	2a6f      	cmp	r2, #111	@ 0x6f
 8005418:	d100      	bne.n	800541c <_printf_i+0xcc>
 800541a:	3f02      	subs	r7, #2
 800541c:	0023      	movs	r3, r4
 800541e:	2200      	movs	r2, #0
 8005420:	3343      	adds	r3, #67	@ 0x43
 8005422:	701a      	strb	r2, [r3, #0]
 8005424:	6863      	ldr	r3, [r4, #4]
 8005426:	60a3      	str	r3, [r4, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	db03      	blt.n	8005434 <_printf_i+0xe4>
 800542c:	2104      	movs	r1, #4
 800542e:	6822      	ldr	r2, [r4, #0]
 8005430:	438a      	bics	r2, r1
 8005432:	6022      	str	r2, [r4, #0]
 8005434:	2e00      	cmp	r6, #0
 8005436:	d102      	bne.n	800543e <_printf_i+0xee>
 8005438:	9d03      	ldr	r5, [sp, #12]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00c      	beq.n	8005458 <_printf_i+0x108>
 800543e:	9d03      	ldr	r5, [sp, #12]
 8005440:	0030      	movs	r0, r6
 8005442:	0039      	movs	r1, r7
 8005444:	f7fa feec 	bl	8000220 <__aeabi_uidivmod>
 8005448:	9b04      	ldr	r3, [sp, #16]
 800544a:	3d01      	subs	r5, #1
 800544c:	5c5b      	ldrb	r3, [r3, r1]
 800544e:	702b      	strb	r3, [r5, #0]
 8005450:	0033      	movs	r3, r6
 8005452:	0006      	movs	r6, r0
 8005454:	429f      	cmp	r7, r3
 8005456:	d9f3      	bls.n	8005440 <_printf_i+0xf0>
 8005458:	2f08      	cmp	r7, #8
 800545a:	d109      	bne.n	8005470 <_printf_i+0x120>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	07db      	lsls	r3, r3, #31
 8005460:	d506      	bpl.n	8005470 <_printf_i+0x120>
 8005462:	6862      	ldr	r2, [r4, #4]
 8005464:	6923      	ldr	r3, [r4, #16]
 8005466:	429a      	cmp	r2, r3
 8005468:	dc02      	bgt.n	8005470 <_printf_i+0x120>
 800546a:	2330      	movs	r3, #48	@ 0x30
 800546c:	3d01      	subs	r5, #1
 800546e:	702b      	strb	r3, [r5, #0]
 8005470:	9b03      	ldr	r3, [sp, #12]
 8005472:	1b5b      	subs	r3, r3, r5
 8005474:	6123      	str	r3, [r4, #16]
 8005476:	9b07      	ldr	r3, [sp, #28]
 8005478:	0021      	movs	r1, r4
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	9805      	ldr	r0, [sp, #20]
 800547e:	9b06      	ldr	r3, [sp, #24]
 8005480:	aa09      	add	r2, sp, #36	@ 0x24
 8005482:	f7ff fef5 	bl	8005270 <_printf_common>
 8005486:	3001      	adds	r0, #1
 8005488:	d148      	bne.n	800551c <_printf_i+0x1cc>
 800548a:	2001      	movs	r0, #1
 800548c:	4240      	negs	r0, r0
 800548e:	b00b      	add	sp, #44	@ 0x2c
 8005490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005492:	2220      	movs	r2, #32
 8005494:	6809      	ldr	r1, [r1, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	6022      	str	r2, [r4, #0]
 800549a:	2278      	movs	r2, #120	@ 0x78
 800549c:	4932      	ldr	r1, [pc, #200]	@ (8005568 <_printf_i+0x218>)
 800549e:	9104      	str	r1, [sp, #16]
 80054a0:	0021      	movs	r1, r4
 80054a2:	3145      	adds	r1, #69	@ 0x45
 80054a4:	700a      	strb	r2, [r1, #0]
 80054a6:	6819      	ldr	r1, [r3, #0]
 80054a8:	6822      	ldr	r2, [r4, #0]
 80054aa:	c940      	ldmia	r1!, {r6}
 80054ac:	0610      	lsls	r0, r2, #24
 80054ae:	d402      	bmi.n	80054b6 <_printf_i+0x166>
 80054b0:	0650      	lsls	r0, r2, #25
 80054b2:	d500      	bpl.n	80054b6 <_printf_i+0x166>
 80054b4:	b2b6      	uxth	r6, r6
 80054b6:	6019      	str	r1, [r3, #0]
 80054b8:	07d3      	lsls	r3, r2, #31
 80054ba:	d502      	bpl.n	80054c2 <_printf_i+0x172>
 80054bc:	2320      	movs	r3, #32
 80054be:	4313      	orrs	r3, r2
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	2e00      	cmp	r6, #0
 80054c4:	d001      	beq.n	80054ca <_printf_i+0x17a>
 80054c6:	2710      	movs	r7, #16
 80054c8:	e7a8      	b.n	800541c <_printf_i+0xcc>
 80054ca:	2220      	movs	r2, #32
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	4393      	bics	r3, r2
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	e7f8      	b.n	80054c6 <_printf_i+0x176>
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	680d      	ldr	r5, [r1, #0]
 80054d8:	1d10      	adds	r0, r2, #4
 80054da:	6949      	ldr	r1, [r1, #20]
 80054dc:	6018      	str	r0, [r3, #0]
 80054de:	6813      	ldr	r3, [r2, #0]
 80054e0:	062e      	lsls	r6, r5, #24
 80054e2:	d501      	bpl.n	80054e8 <_printf_i+0x198>
 80054e4:	6019      	str	r1, [r3, #0]
 80054e6:	e002      	b.n	80054ee <_printf_i+0x19e>
 80054e8:	066d      	lsls	r5, r5, #25
 80054ea:	d5fb      	bpl.n	80054e4 <_printf_i+0x194>
 80054ec:	8019      	strh	r1, [r3, #0]
 80054ee:	2300      	movs	r3, #0
 80054f0:	9d03      	ldr	r5, [sp, #12]
 80054f2:	6123      	str	r3, [r4, #16]
 80054f4:	e7bf      	b.n	8005476 <_printf_i+0x126>
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	1d11      	adds	r1, r2, #4
 80054fa:	6019      	str	r1, [r3, #0]
 80054fc:	6815      	ldr	r5, [r2, #0]
 80054fe:	2100      	movs	r1, #0
 8005500:	0028      	movs	r0, r5
 8005502:	6862      	ldr	r2, [r4, #4]
 8005504:	f000 f9aa 	bl	800585c <memchr>
 8005508:	2800      	cmp	r0, #0
 800550a:	d001      	beq.n	8005510 <_printf_i+0x1c0>
 800550c:	1b40      	subs	r0, r0, r5
 800550e:	6060      	str	r0, [r4, #4]
 8005510:	6863      	ldr	r3, [r4, #4]
 8005512:	6123      	str	r3, [r4, #16]
 8005514:	2300      	movs	r3, #0
 8005516:	9a03      	ldr	r2, [sp, #12]
 8005518:	7013      	strb	r3, [r2, #0]
 800551a:	e7ac      	b.n	8005476 <_printf_i+0x126>
 800551c:	002a      	movs	r2, r5
 800551e:	6923      	ldr	r3, [r4, #16]
 8005520:	9906      	ldr	r1, [sp, #24]
 8005522:	9805      	ldr	r0, [sp, #20]
 8005524:	9d07      	ldr	r5, [sp, #28]
 8005526:	47a8      	blx	r5
 8005528:	3001      	adds	r0, #1
 800552a:	d0ae      	beq.n	800548a <_printf_i+0x13a>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	079b      	lsls	r3, r3, #30
 8005530:	d415      	bmi.n	800555e <_printf_i+0x20e>
 8005532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005534:	68e0      	ldr	r0, [r4, #12]
 8005536:	4298      	cmp	r0, r3
 8005538:	daa9      	bge.n	800548e <_printf_i+0x13e>
 800553a:	0018      	movs	r0, r3
 800553c:	e7a7      	b.n	800548e <_printf_i+0x13e>
 800553e:	0022      	movs	r2, r4
 8005540:	2301      	movs	r3, #1
 8005542:	9906      	ldr	r1, [sp, #24]
 8005544:	9805      	ldr	r0, [sp, #20]
 8005546:	9e07      	ldr	r6, [sp, #28]
 8005548:	3219      	adds	r2, #25
 800554a:	47b0      	blx	r6
 800554c:	3001      	adds	r0, #1
 800554e:	d09c      	beq.n	800548a <_printf_i+0x13a>
 8005550:	3501      	adds	r5, #1
 8005552:	68e3      	ldr	r3, [r4, #12]
 8005554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005556:	1a9b      	subs	r3, r3, r2
 8005558:	42ab      	cmp	r3, r5
 800555a:	dcf0      	bgt.n	800553e <_printf_i+0x1ee>
 800555c:	e7e9      	b.n	8005532 <_printf_i+0x1e2>
 800555e:	2500      	movs	r5, #0
 8005560:	e7f7      	b.n	8005552 <_printf_i+0x202>
 8005562:	46c0      	nop			@ (mov r8, r8)
 8005564:	08005bf1 	.word	0x08005bf1
 8005568:	08005c02 	.word	0x08005c02

0800556c <__sflush_r>:
 800556c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800556e:	220c      	movs	r2, #12
 8005570:	5e8b      	ldrsh	r3, [r1, r2]
 8005572:	0005      	movs	r5, r0
 8005574:	000c      	movs	r4, r1
 8005576:	071a      	lsls	r2, r3, #28
 8005578:	d456      	bmi.n	8005628 <__sflush_r+0xbc>
 800557a:	684a      	ldr	r2, [r1, #4]
 800557c:	2a00      	cmp	r2, #0
 800557e:	dc02      	bgt.n	8005586 <__sflush_r+0x1a>
 8005580:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8005582:	2a00      	cmp	r2, #0
 8005584:	dd4e      	ble.n	8005624 <__sflush_r+0xb8>
 8005586:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005588:	2f00      	cmp	r7, #0
 800558a:	d04b      	beq.n	8005624 <__sflush_r+0xb8>
 800558c:	2200      	movs	r2, #0
 800558e:	2080      	movs	r0, #128	@ 0x80
 8005590:	682e      	ldr	r6, [r5, #0]
 8005592:	602a      	str	r2, [r5, #0]
 8005594:	001a      	movs	r2, r3
 8005596:	0140      	lsls	r0, r0, #5
 8005598:	6a21      	ldr	r1, [r4, #32]
 800559a:	4002      	ands	r2, r0
 800559c:	4203      	tst	r3, r0
 800559e:	d033      	beq.n	8005608 <__sflush_r+0x9c>
 80055a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80055a2:	89a3      	ldrh	r3, [r4, #12]
 80055a4:	075b      	lsls	r3, r3, #29
 80055a6:	d506      	bpl.n	80055b6 <__sflush_r+0x4a>
 80055a8:	6863      	ldr	r3, [r4, #4]
 80055aa:	1ad2      	subs	r2, r2, r3
 80055ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <__sflush_r+0x4a>
 80055b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80055b4:	1ad2      	subs	r2, r2, r3
 80055b6:	2300      	movs	r3, #0
 80055b8:	0028      	movs	r0, r5
 80055ba:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80055bc:	6a21      	ldr	r1, [r4, #32]
 80055be:	47b8      	blx	r7
 80055c0:	89a2      	ldrh	r2, [r4, #12]
 80055c2:	1c43      	adds	r3, r0, #1
 80055c4:	d106      	bne.n	80055d4 <__sflush_r+0x68>
 80055c6:	6829      	ldr	r1, [r5, #0]
 80055c8:	291d      	cmp	r1, #29
 80055ca:	d846      	bhi.n	800565a <__sflush_r+0xee>
 80055cc:	4b29      	ldr	r3, [pc, #164]	@ (8005674 <__sflush_r+0x108>)
 80055ce:	410b      	asrs	r3, r1
 80055d0:	07db      	lsls	r3, r3, #31
 80055d2:	d442      	bmi.n	800565a <__sflush_r+0xee>
 80055d4:	2300      	movs	r3, #0
 80055d6:	6063      	str	r3, [r4, #4]
 80055d8:	6923      	ldr	r3, [r4, #16]
 80055da:	6023      	str	r3, [r4, #0]
 80055dc:	04d2      	lsls	r2, r2, #19
 80055de:	d505      	bpl.n	80055ec <__sflush_r+0x80>
 80055e0:	1c43      	adds	r3, r0, #1
 80055e2:	d102      	bne.n	80055ea <__sflush_r+0x7e>
 80055e4:	682b      	ldr	r3, [r5, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d100      	bne.n	80055ec <__sflush_r+0x80>
 80055ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80055ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055ee:	602e      	str	r6, [r5, #0]
 80055f0:	2900      	cmp	r1, #0
 80055f2:	d017      	beq.n	8005624 <__sflush_r+0xb8>
 80055f4:	0023      	movs	r3, r4
 80055f6:	3344      	adds	r3, #68	@ 0x44
 80055f8:	4299      	cmp	r1, r3
 80055fa:	d002      	beq.n	8005602 <__sflush_r+0x96>
 80055fc:	0028      	movs	r0, r5
 80055fe:	f7ff fa99 	bl	8004b34 <_free_r>
 8005602:	2300      	movs	r3, #0
 8005604:	6363      	str	r3, [r4, #52]	@ 0x34
 8005606:	e00d      	b.n	8005624 <__sflush_r+0xb8>
 8005608:	2301      	movs	r3, #1
 800560a:	0028      	movs	r0, r5
 800560c:	47b8      	blx	r7
 800560e:	0002      	movs	r2, r0
 8005610:	1c43      	adds	r3, r0, #1
 8005612:	d1c6      	bne.n	80055a2 <__sflush_r+0x36>
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0c3      	beq.n	80055a2 <__sflush_r+0x36>
 800561a:	2b1d      	cmp	r3, #29
 800561c:	d001      	beq.n	8005622 <__sflush_r+0xb6>
 800561e:	2b16      	cmp	r3, #22
 8005620:	d11a      	bne.n	8005658 <__sflush_r+0xec>
 8005622:	602e      	str	r6, [r5, #0]
 8005624:	2000      	movs	r0, #0
 8005626:	e01e      	b.n	8005666 <__sflush_r+0xfa>
 8005628:	690e      	ldr	r6, [r1, #16]
 800562a:	2e00      	cmp	r6, #0
 800562c:	d0fa      	beq.n	8005624 <__sflush_r+0xb8>
 800562e:	680f      	ldr	r7, [r1, #0]
 8005630:	600e      	str	r6, [r1, #0]
 8005632:	1bba      	subs	r2, r7, r6
 8005634:	9201      	str	r2, [sp, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	079b      	lsls	r3, r3, #30
 800563a:	d100      	bne.n	800563e <__sflush_r+0xd2>
 800563c:	694a      	ldr	r2, [r1, #20]
 800563e:	60a2      	str	r2, [r4, #8]
 8005640:	9b01      	ldr	r3, [sp, #4]
 8005642:	2b00      	cmp	r3, #0
 8005644:	ddee      	ble.n	8005624 <__sflush_r+0xb8>
 8005646:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005648:	0032      	movs	r2, r6
 800564a:	001f      	movs	r7, r3
 800564c:	0028      	movs	r0, r5
 800564e:	9b01      	ldr	r3, [sp, #4]
 8005650:	6a21      	ldr	r1, [r4, #32]
 8005652:	47b8      	blx	r7
 8005654:	2800      	cmp	r0, #0
 8005656:	dc07      	bgt.n	8005668 <__sflush_r+0xfc>
 8005658:	89a2      	ldrh	r2, [r4, #12]
 800565a:	2340      	movs	r3, #64	@ 0x40
 800565c:	2001      	movs	r0, #1
 800565e:	4313      	orrs	r3, r2
 8005660:	b21b      	sxth	r3, r3
 8005662:	81a3      	strh	r3, [r4, #12]
 8005664:	4240      	negs	r0, r0
 8005666:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005668:	9b01      	ldr	r3, [sp, #4]
 800566a:	1836      	adds	r6, r6, r0
 800566c:	1a1b      	subs	r3, r3, r0
 800566e:	9301      	str	r3, [sp, #4]
 8005670:	e7e6      	b.n	8005640 <__sflush_r+0xd4>
 8005672:	46c0      	nop			@ (mov r8, r8)
 8005674:	dfbffffe 	.word	0xdfbffffe

08005678 <_fflush_r>:
 8005678:	690b      	ldr	r3, [r1, #16]
 800567a:	b570      	push	{r4, r5, r6, lr}
 800567c:	0005      	movs	r5, r0
 800567e:	000c      	movs	r4, r1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d102      	bne.n	800568a <_fflush_r+0x12>
 8005684:	2500      	movs	r5, #0
 8005686:	0028      	movs	r0, r5
 8005688:	bd70      	pop	{r4, r5, r6, pc}
 800568a:	2800      	cmp	r0, #0
 800568c:	d004      	beq.n	8005698 <_fflush_r+0x20>
 800568e:	6a03      	ldr	r3, [r0, #32]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <_fflush_r+0x20>
 8005694:	f7ff f8fe 	bl	8004894 <__sinit>
 8005698:	220c      	movs	r2, #12
 800569a:	5ea3      	ldrsh	r3, [r4, r2]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f1      	beq.n	8005684 <_fflush_r+0xc>
 80056a0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80056a2:	07d2      	lsls	r2, r2, #31
 80056a4:	d404      	bmi.n	80056b0 <_fflush_r+0x38>
 80056a6:	059b      	lsls	r3, r3, #22
 80056a8:	d402      	bmi.n	80056b0 <_fflush_r+0x38>
 80056aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056ac:	f7ff fa37 	bl	8004b1e <__retarget_lock_acquire_recursive>
 80056b0:	0028      	movs	r0, r5
 80056b2:	0021      	movs	r1, r4
 80056b4:	f7ff ff5a 	bl	800556c <__sflush_r>
 80056b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80056ba:	0005      	movs	r5, r0
 80056bc:	07db      	lsls	r3, r3, #31
 80056be:	d4e2      	bmi.n	8005686 <_fflush_r+0xe>
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	059b      	lsls	r3, r3, #22
 80056c4:	d4df      	bmi.n	8005686 <_fflush_r+0xe>
 80056c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056c8:	f7ff fa2a 	bl	8004b20 <__retarget_lock_release_recursive>
 80056cc:	e7db      	b.n	8005686 <_fflush_r+0xe>

080056ce <__swbuf_r>:
 80056ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d0:	0006      	movs	r6, r0
 80056d2:	000d      	movs	r5, r1
 80056d4:	0014      	movs	r4, r2
 80056d6:	2800      	cmp	r0, #0
 80056d8:	d004      	beq.n	80056e4 <__swbuf_r+0x16>
 80056da:	6a03      	ldr	r3, [r0, #32]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d101      	bne.n	80056e4 <__swbuf_r+0x16>
 80056e0:	f7ff f8d8 	bl	8004894 <__sinit>
 80056e4:	69a3      	ldr	r3, [r4, #24]
 80056e6:	60a3      	str	r3, [r4, #8]
 80056e8:	89a3      	ldrh	r3, [r4, #12]
 80056ea:	071b      	lsls	r3, r3, #28
 80056ec:	d502      	bpl.n	80056f4 <__swbuf_r+0x26>
 80056ee:	6923      	ldr	r3, [r4, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d109      	bne.n	8005708 <__swbuf_r+0x3a>
 80056f4:	0021      	movs	r1, r4
 80056f6:	0030      	movs	r0, r6
 80056f8:	f000 f82c 	bl	8005754 <__swsetup_r>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	d003      	beq.n	8005708 <__swbuf_r+0x3a>
 8005700:	2501      	movs	r5, #1
 8005702:	426d      	negs	r5, r5
 8005704:	0028      	movs	r0, r5
 8005706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005708:	6923      	ldr	r3, [r4, #16]
 800570a:	6820      	ldr	r0, [r4, #0]
 800570c:	b2ef      	uxtb	r7, r5
 800570e:	1ac0      	subs	r0, r0, r3
 8005710:	6963      	ldr	r3, [r4, #20]
 8005712:	b2ed      	uxtb	r5, r5
 8005714:	4283      	cmp	r3, r0
 8005716:	dc05      	bgt.n	8005724 <__swbuf_r+0x56>
 8005718:	0021      	movs	r1, r4
 800571a:	0030      	movs	r0, r6
 800571c:	f7ff ffac 	bl	8005678 <_fflush_r>
 8005720:	2800      	cmp	r0, #0
 8005722:	d1ed      	bne.n	8005700 <__swbuf_r+0x32>
 8005724:	68a3      	ldr	r3, [r4, #8]
 8005726:	3001      	adds	r0, #1
 8005728:	3b01      	subs	r3, #1
 800572a:	60a3      	str	r3, [r4, #8]
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	6022      	str	r2, [r4, #0]
 8005732:	701f      	strb	r7, [r3, #0]
 8005734:	6963      	ldr	r3, [r4, #20]
 8005736:	4283      	cmp	r3, r0
 8005738:	d004      	beq.n	8005744 <__swbuf_r+0x76>
 800573a:	89a3      	ldrh	r3, [r4, #12]
 800573c:	07db      	lsls	r3, r3, #31
 800573e:	d5e1      	bpl.n	8005704 <__swbuf_r+0x36>
 8005740:	2d0a      	cmp	r5, #10
 8005742:	d1df      	bne.n	8005704 <__swbuf_r+0x36>
 8005744:	0021      	movs	r1, r4
 8005746:	0030      	movs	r0, r6
 8005748:	f7ff ff96 	bl	8005678 <_fflush_r>
 800574c:	2800      	cmp	r0, #0
 800574e:	d0d9      	beq.n	8005704 <__swbuf_r+0x36>
 8005750:	e7d6      	b.n	8005700 <__swbuf_r+0x32>
	...

08005754 <__swsetup_r>:
 8005754:	4b2d      	ldr	r3, [pc, #180]	@ (800580c <__swsetup_r+0xb8>)
 8005756:	b570      	push	{r4, r5, r6, lr}
 8005758:	0005      	movs	r5, r0
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	000c      	movs	r4, r1
 800575e:	2800      	cmp	r0, #0
 8005760:	d004      	beq.n	800576c <__swsetup_r+0x18>
 8005762:	6a03      	ldr	r3, [r0, #32]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <__swsetup_r+0x18>
 8005768:	f7ff f894 	bl	8004894 <__sinit>
 800576c:	230c      	movs	r3, #12
 800576e:	5ee2      	ldrsh	r2, [r4, r3]
 8005770:	0713      	lsls	r3, r2, #28
 8005772:	d423      	bmi.n	80057bc <__swsetup_r+0x68>
 8005774:	06d3      	lsls	r3, r2, #27
 8005776:	d407      	bmi.n	8005788 <__swsetup_r+0x34>
 8005778:	2309      	movs	r3, #9
 800577a:	602b      	str	r3, [r5, #0]
 800577c:	2340      	movs	r3, #64	@ 0x40
 800577e:	2001      	movs	r0, #1
 8005780:	4313      	orrs	r3, r2
 8005782:	81a3      	strh	r3, [r4, #12]
 8005784:	4240      	negs	r0, r0
 8005786:	e03a      	b.n	80057fe <__swsetup_r+0xaa>
 8005788:	0752      	lsls	r2, r2, #29
 800578a:	d513      	bpl.n	80057b4 <__swsetup_r+0x60>
 800578c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800578e:	2900      	cmp	r1, #0
 8005790:	d008      	beq.n	80057a4 <__swsetup_r+0x50>
 8005792:	0023      	movs	r3, r4
 8005794:	3344      	adds	r3, #68	@ 0x44
 8005796:	4299      	cmp	r1, r3
 8005798:	d002      	beq.n	80057a0 <__swsetup_r+0x4c>
 800579a:	0028      	movs	r0, r5
 800579c:	f7ff f9ca 	bl	8004b34 <_free_r>
 80057a0:	2300      	movs	r3, #0
 80057a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80057a4:	2224      	movs	r2, #36	@ 0x24
 80057a6:	89a3      	ldrh	r3, [r4, #12]
 80057a8:	4393      	bics	r3, r2
 80057aa:	81a3      	strh	r3, [r4, #12]
 80057ac:	2300      	movs	r3, #0
 80057ae:	6063      	str	r3, [r4, #4]
 80057b0:	6923      	ldr	r3, [r4, #16]
 80057b2:	6023      	str	r3, [r4, #0]
 80057b4:	2308      	movs	r3, #8
 80057b6:	89a2      	ldrh	r2, [r4, #12]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	81a3      	strh	r3, [r4, #12]
 80057bc:	6923      	ldr	r3, [r4, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10b      	bne.n	80057da <__swsetup_r+0x86>
 80057c2:	21a0      	movs	r1, #160	@ 0xa0
 80057c4:	2280      	movs	r2, #128	@ 0x80
 80057c6:	89a3      	ldrh	r3, [r4, #12]
 80057c8:	0089      	lsls	r1, r1, #2
 80057ca:	0092      	lsls	r2, r2, #2
 80057cc:	400b      	ands	r3, r1
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d003      	beq.n	80057da <__swsetup_r+0x86>
 80057d2:	0021      	movs	r1, r4
 80057d4:	0028      	movs	r0, r5
 80057d6:	f000 f8a5 	bl	8005924 <__smakebuf_r>
 80057da:	230c      	movs	r3, #12
 80057dc:	5ee2      	ldrsh	r2, [r4, r3]
 80057de:	2101      	movs	r1, #1
 80057e0:	0013      	movs	r3, r2
 80057e2:	400b      	ands	r3, r1
 80057e4:	420a      	tst	r2, r1
 80057e6:	d00b      	beq.n	8005800 <__swsetup_r+0xac>
 80057e8:	2300      	movs	r3, #0
 80057ea:	60a3      	str	r3, [r4, #8]
 80057ec:	6963      	ldr	r3, [r4, #20]
 80057ee:	425b      	negs	r3, r3
 80057f0:	61a3      	str	r3, [r4, #24]
 80057f2:	2000      	movs	r0, #0
 80057f4:	6923      	ldr	r3, [r4, #16]
 80057f6:	4283      	cmp	r3, r0
 80057f8:	d101      	bne.n	80057fe <__swsetup_r+0xaa>
 80057fa:	0613      	lsls	r3, r2, #24
 80057fc:	d4be      	bmi.n	800577c <__swsetup_r+0x28>
 80057fe:	bd70      	pop	{r4, r5, r6, pc}
 8005800:	0791      	lsls	r1, r2, #30
 8005802:	d400      	bmi.n	8005806 <__swsetup_r+0xb2>
 8005804:	6963      	ldr	r3, [r4, #20]
 8005806:	60a3      	str	r3, [r4, #8]
 8005808:	e7f3      	b.n	80057f2 <__swsetup_r+0x9e>
 800580a:	46c0      	nop			@ (mov r8, r8)
 800580c:	2000001c 	.word	0x2000001c

08005810 <memmove>:
 8005810:	b510      	push	{r4, lr}
 8005812:	4288      	cmp	r0, r1
 8005814:	d806      	bhi.n	8005824 <memmove+0x14>
 8005816:	2300      	movs	r3, #0
 8005818:	429a      	cmp	r2, r3
 800581a:	d008      	beq.n	800582e <memmove+0x1e>
 800581c:	5ccc      	ldrb	r4, [r1, r3]
 800581e:	54c4      	strb	r4, [r0, r3]
 8005820:	3301      	adds	r3, #1
 8005822:	e7f9      	b.n	8005818 <memmove+0x8>
 8005824:	188b      	adds	r3, r1, r2
 8005826:	4298      	cmp	r0, r3
 8005828:	d2f5      	bcs.n	8005816 <memmove+0x6>
 800582a:	3a01      	subs	r2, #1
 800582c:	d200      	bcs.n	8005830 <memmove+0x20>
 800582e:	bd10      	pop	{r4, pc}
 8005830:	5c8b      	ldrb	r3, [r1, r2]
 8005832:	5483      	strb	r3, [r0, r2]
 8005834:	e7f9      	b.n	800582a <memmove+0x1a>
	...

08005838 <_sbrk_r>:
 8005838:	2300      	movs	r3, #0
 800583a:	b570      	push	{r4, r5, r6, lr}
 800583c:	4d06      	ldr	r5, [pc, #24]	@ (8005858 <_sbrk_r+0x20>)
 800583e:	0004      	movs	r4, r0
 8005840:	0008      	movs	r0, r1
 8005842:	602b      	str	r3, [r5, #0]
 8005844:	f7fb fb08 	bl	8000e58 <_sbrk>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	d103      	bne.n	8005854 <_sbrk_r+0x1c>
 800584c:	682b      	ldr	r3, [r5, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d000      	beq.n	8005854 <_sbrk_r+0x1c>
 8005852:	6023      	str	r3, [r4, #0]
 8005854:	bd70      	pop	{r4, r5, r6, pc}
 8005856:	46c0      	nop			@ (mov r8, r8)
 8005858:	20000328 	.word	0x20000328

0800585c <memchr>:
 800585c:	b2c9      	uxtb	r1, r1
 800585e:	1882      	adds	r2, r0, r2
 8005860:	4290      	cmp	r0, r2
 8005862:	d101      	bne.n	8005868 <memchr+0xc>
 8005864:	2000      	movs	r0, #0
 8005866:	4770      	bx	lr
 8005868:	7803      	ldrb	r3, [r0, #0]
 800586a:	428b      	cmp	r3, r1
 800586c:	d0fb      	beq.n	8005866 <memchr+0xa>
 800586e:	3001      	adds	r0, #1
 8005870:	e7f6      	b.n	8005860 <memchr+0x4>

08005872 <_realloc_r>:
 8005872:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005874:	0006      	movs	r6, r0
 8005876:	000c      	movs	r4, r1
 8005878:	0015      	movs	r5, r2
 800587a:	2900      	cmp	r1, #0
 800587c:	d105      	bne.n	800588a <_realloc_r+0x18>
 800587e:	0011      	movs	r1, r2
 8005880:	f7ff f9c4 	bl	8004c0c <_malloc_r>
 8005884:	0004      	movs	r4, r0
 8005886:	0020      	movs	r0, r4
 8005888:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800588a:	2a00      	cmp	r2, #0
 800588c:	d103      	bne.n	8005896 <_realloc_r+0x24>
 800588e:	f7ff f951 	bl	8004b34 <_free_r>
 8005892:	2400      	movs	r4, #0
 8005894:	e7f7      	b.n	8005886 <_realloc_r+0x14>
 8005896:	f000 f8ab 	bl	80059f0 <_malloc_usable_size_r>
 800589a:	0007      	movs	r7, r0
 800589c:	4285      	cmp	r5, r0
 800589e:	d802      	bhi.n	80058a6 <_realloc_r+0x34>
 80058a0:	0843      	lsrs	r3, r0, #1
 80058a2:	42ab      	cmp	r3, r5
 80058a4:	d3ef      	bcc.n	8005886 <_realloc_r+0x14>
 80058a6:	0029      	movs	r1, r5
 80058a8:	0030      	movs	r0, r6
 80058aa:	f7ff f9af 	bl	8004c0c <_malloc_r>
 80058ae:	9001      	str	r0, [sp, #4]
 80058b0:	2800      	cmp	r0, #0
 80058b2:	d0ee      	beq.n	8005892 <_realloc_r+0x20>
 80058b4:	002a      	movs	r2, r5
 80058b6:	42bd      	cmp	r5, r7
 80058b8:	d900      	bls.n	80058bc <_realloc_r+0x4a>
 80058ba:	003a      	movs	r2, r7
 80058bc:	0021      	movs	r1, r4
 80058be:	9801      	ldr	r0, [sp, #4]
 80058c0:	f7ff f92f 	bl	8004b22 <memcpy>
 80058c4:	0021      	movs	r1, r4
 80058c6:	0030      	movs	r0, r6
 80058c8:	f7ff f934 	bl	8004b34 <_free_r>
 80058cc:	9c01      	ldr	r4, [sp, #4]
 80058ce:	e7da      	b.n	8005886 <_realloc_r+0x14>

080058d0 <__swhatbuf_r>:
 80058d0:	b570      	push	{r4, r5, r6, lr}
 80058d2:	000e      	movs	r6, r1
 80058d4:	001d      	movs	r5, r3
 80058d6:	230e      	movs	r3, #14
 80058d8:	5ec9      	ldrsh	r1, [r1, r3]
 80058da:	0014      	movs	r4, r2
 80058dc:	b096      	sub	sp, #88	@ 0x58
 80058de:	2900      	cmp	r1, #0
 80058e0:	da0c      	bge.n	80058fc <__swhatbuf_r+0x2c>
 80058e2:	89b2      	ldrh	r2, [r6, #12]
 80058e4:	2380      	movs	r3, #128	@ 0x80
 80058e6:	0011      	movs	r1, r2
 80058e8:	4019      	ands	r1, r3
 80058ea:	421a      	tst	r2, r3
 80058ec:	d114      	bne.n	8005918 <__swhatbuf_r+0x48>
 80058ee:	2380      	movs	r3, #128	@ 0x80
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	2000      	movs	r0, #0
 80058f4:	6029      	str	r1, [r5, #0]
 80058f6:	6023      	str	r3, [r4, #0]
 80058f8:	b016      	add	sp, #88	@ 0x58
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
 80058fc:	466a      	mov	r2, sp
 80058fe:	f000 f853 	bl	80059a8 <_fstat_r>
 8005902:	2800      	cmp	r0, #0
 8005904:	dbed      	blt.n	80058e2 <__swhatbuf_r+0x12>
 8005906:	23f0      	movs	r3, #240	@ 0xf0
 8005908:	9901      	ldr	r1, [sp, #4]
 800590a:	021b      	lsls	r3, r3, #8
 800590c:	4019      	ands	r1, r3
 800590e:	4b04      	ldr	r3, [pc, #16]	@ (8005920 <__swhatbuf_r+0x50>)
 8005910:	18c9      	adds	r1, r1, r3
 8005912:	424b      	negs	r3, r1
 8005914:	4159      	adcs	r1, r3
 8005916:	e7ea      	b.n	80058ee <__swhatbuf_r+0x1e>
 8005918:	2100      	movs	r1, #0
 800591a:	2340      	movs	r3, #64	@ 0x40
 800591c:	e7e9      	b.n	80058f2 <__swhatbuf_r+0x22>
 800591e:	46c0      	nop			@ (mov r8, r8)
 8005920:	ffffe000 	.word	0xffffe000

08005924 <__smakebuf_r>:
 8005924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005926:	2602      	movs	r6, #2
 8005928:	898b      	ldrh	r3, [r1, #12]
 800592a:	0005      	movs	r5, r0
 800592c:	000c      	movs	r4, r1
 800592e:	b085      	sub	sp, #20
 8005930:	4233      	tst	r3, r6
 8005932:	d007      	beq.n	8005944 <__smakebuf_r+0x20>
 8005934:	0023      	movs	r3, r4
 8005936:	3347      	adds	r3, #71	@ 0x47
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	6123      	str	r3, [r4, #16]
 800593c:	2301      	movs	r3, #1
 800593e:	6163      	str	r3, [r4, #20]
 8005940:	b005      	add	sp, #20
 8005942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005944:	ab03      	add	r3, sp, #12
 8005946:	aa02      	add	r2, sp, #8
 8005948:	f7ff ffc2 	bl	80058d0 <__swhatbuf_r>
 800594c:	9f02      	ldr	r7, [sp, #8]
 800594e:	9001      	str	r0, [sp, #4]
 8005950:	0039      	movs	r1, r7
 8005952:	0028      	movs	r0, r5
 8005954:	f7ff f95a 	bl	8004c0c <_malloc_r>
 8005958:	2800      	cmp	r0, #0
 800595a:	d108      	bne.n	800596e <__smakebuf_r+0x4a>
 800595c:	220c      	movs	r2, #12
 800595e:	5ea3      	ldrsh	r3, [r4, r2]
 8005960:	059a      	lsls	r2, r3, #22
 8005962:	d4ed      	bmi.n	8005940 <__smakebuf_r+0x1c>
 8005964:	2203      	movs	r2, #3
 8005966:	4393      	bics	r3, r2
 8005968:	431e      	orrs	r6, r3
 800596a:	81a6      	strh	r6, [r4, #12]
 800596c:	e7e2      	b.n	8005934 <__smakebuf_r+0x10>
 800596e:	2380      	movs	r3, #128	@ 0x80
 8005970:	89a2      	ldrh	r2, [r4, #12]
 8005972:	6020      	str	r0, [r4, #0]
 8005974:	4313      	orrs	r3, r2
 8005976:	81a3      	strh	r3, [r4, #12]
 8005978:	9b03      	ldr	r3, [sp, #12]
 800597a:	6120      	str	r0, [r4, #16]
 800597c:	6167      	str	r7, [r4, #20]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00c      	beq.n	800599c <__smakebuf_r+0x78>
 8005982:	0028      	movs	r0, r5
 8005984:	230e      	movs	r3, #14
 8005986:	5ee1      	ldrsh	r1, [r4, r3]
 8005988:	f000 f820 	bl	80059cc <_isatty_r>
 800598c:	2800      	cmp	r0, #0
 800598e:	d005      	beq.n	800599c <__smakebuf_r+0x78>
 8005990:	2303      	movs	r3, #3
 8005992:	89a2      	ldrh	r2, [r4, #12]
 8005994:	439a      	bics	r2, r3
 8005996:	3b02      	subs	r3, #2
 8005998:	4313      	orrs	r3, r2
 800599a:	81a3      	strh	r3, [r4, #12]
 800599c:	89a3      	ldrh	r3, [r4, #12]
 800599e:	9a01      	ldr	r2, [sp, #4]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	81a3      	strh	r3, [r4, #12]
 80059a4:	e7cc      	b.n	8005940 <__smakebuf_r+0x1c>
	...

080059a8 <_fstat_r>:
 80059a8:	2300      	movs	r3, #0
 80059aa:	b570      	push	{r4, r5, r6, lr}
 80059ac:	4d06      	ldr	r5, [pc, #24]	@ (80059c8 <_fstat_r+0x20>)
 80059ae:	0004      	movs	r4, r0
 80059b0:	0008      	movs	r0, r1
 80059b2:	0011      	movs	r1, r2
 80059b4:	602b      	str	r3, [r5, #0]
 80059b6:	f7fb fa2c 	bl	8000e12 <_fstat>
 80059ba:	1c43      	adds	r3, r0, #1
 80059bc:	d103      	bne.n	80059c6 <_fstat_r+0x1e>
 80059be:	682b      	ldr	r3, [r5, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d000      	beq.n	80059c6 <_fstat_r+0x1e>
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	bd70      	pop	{r4, r5, r6, pc}
 80059c8:	20000328 	.word	0x20000328

080059cc <_isatty_r>:
 80059cc:	2300      	movs	r3, #0
 80059ce:	b570      	push	{r4, r5, r6, lr}
 80059d0:	4d06      	ldr	r5, [pc, #24]	@ (80059ec <_isatty_r+0x20>)
 80059d2:	0004      	movs	r4, r0
 80059d4:	0008      	movs	r0, r1
 80059d6:	602b      	str	r3, [r5, #0]
 80059d8:	f7fb fa29 	bl	8000e2e <_isatty>
 80059dc:	1c43      	adds	r3, r0, #1
 80059de:	d103      	bne.n	80059e8 <_isatty_r+0x1c>
 80059e0:	682b      	ldr	r3, [r5, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d000      	beq.n	80059e8 <_isatty_r+0x1c>
 80059e6:	6023      	str	r3, [r4, #0]
 80059e8:	bd70      	pop	{r4, r5, r6, pc}
 80059ea:	46c0      	nop			@ (mov r8, r8)
 80059ec:	20000328 	.word	0x20000328

080059f0 <_malloc_usable_size_r>:
 80059f0:	1f0b      	subs	r3, r1, #4
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	1f18      	subs	r0, r3, #4
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	da01      	bge.n	80059fe <_malloc_usable_size_r+0xe>
 80059fa:	580b      	ldr	r3, [r1, r0]
 80059fc:	18c0      	adds	r0, r0, r3
 80059fe:	4770      	bx	lr

08005a00 <_init>:
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a02:	46c0      	nop			@ (mov r8, r8)
 8005a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a06:	bc08      	pop	{r3}
 8005a08:	469e      	mov	lr, r3
 8005a0a:	4770      	bx	lr

08005a0c <_fini>:
 8005a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0e:	46c0      	nop			@ (mov r8, r8)
 8005a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a12:	bc08      	pop	{r3}
 8005a14:	469e      	mov	lr, r3
 8005a16:	4770      	bx	lr
